<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

@see spark.components.SkinnableContainer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		>
	
	<fx:Metadata>
		[HostComponent("com.supermap.wegis.common.components.zoomPanel.ZoomContainer")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import mx.core.UIComponent;
			import mx.effects.IEffectInstance;
			import mx.events.EffectEvent;
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				// Push backgroundColor and backgroundAlpha directly.
				// Handle undefined backgroundColor by hiding the background object.
				if (isNaN(getStyle("backgroundColor")))
				{
					background.visible = false;
				}
				else
				{
					background.visible = true;
					bgFill.color = getStyle("backgroundColor");
					bgFill.alpha = getStyle("backgroundAlpha");
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>        
	</fx:Script>
	
	<s:states>
		<s:State name="minimized" />
		<s:State name="open" />
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	<fx:Declarations>
	</fx:Declarations>
	<s:transitions>
		<s:Transition fromState="open" toState="minimized">
			<s:Sequence>
				<!--<s:Resize heightTo="{topLeftImage.height}"	  target="{hostComponent}"
						  widthTo="{topLeftImage.width}"/>-->
				<s:Rotate duration="100" target="{topLeftImage}" angleBy="180"  autoCenterTransform="true"/>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="minimized" toState="open">
			<s:Sequence>
			<!--	<s:Resize heightTo="{hostComponent.containerHeight}"	  target="{hostComponent}"
						  widthTo="{hostComponent.containerWidth}"/>-->
				<s:Rotate duration="100" target="{topLeftImage}" angleBy="180" autoCenterTransform="true"/>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
	<!--- Defines the appearance of the SkinnableContainer class's background. -->
	<s:Rect id="background" width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="bgFill" color="#FFFFFF"/>
		</s:fill> 
		<s:stroke>
			<s:SolidColorStroke alpha.minimized="0.5"   alpha.open="0.8" color="{getStyle('borderColor') == null ? 0x333333 : getStyle('borderColor')}"/>
		</s:stroke>
	</s:Rect>
	<!--	<s:Group id="contentFrame" left="0" right="0" bottom="0" top="0" minHeight="0" minWidth="0">-->
	<!--
	Note: setting the minimum size to 0 here so that changes to the host component's
	size will not be thwarted by this skin part's minimum size.   This is a compromise,
	more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
	-->
	<!--- @copy spark.components.SkinnableContainer#contentGroup -->
	<s:Group id="contentGroup" left="3" right="3" top="3" bottom="3" minHeight="0" minWidth="0"
			 visible.minimized="false" visible.open="true" >
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
	</s:Group>
	
	<s:Image id="topLeftImage" x="0" y="0" width="13" height="13"
			 source="{hostComponent.iconSource}" />
	<!--</s:Group>-->
</s:Skin>
