<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<!--自定义缩放条皮肤-->
	
	<fx:Metadata>
		[HostComponent("com.supermap.web.components.ZoomSlider")]
	</fx:Metadata>
	<fx:Declarations>
		<mx:NumberFormatter id="numberFormatter" rounding="nearest"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[   
			import com.supermap.web.utils.ScaleUtil;
			
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.controls.sliderClasses.SliderThumb;
			import mx.core.IToolTip;
			import mx.core.UIComponent;
			import mx.effects.easing.Back;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			
			import spark.components.Group;
			//鼠标移动到滚动条上显示文字提示
			private var tooltip:IToolTip
			//划动条在划动过程中的提示文本
			private function formatSliderDataTip(value:Number):String
			{  
				if(tooltip)
				{
					tooltip.visible = false;
				}
				var scale:int = parseInt((1/ScaleUtil.resolutionToScale( this.hostComponent.map.resolutions[value],96)).toString(),10);
				return slider_text(scale);
			}
			
			private function slider_rollOver(event:MouseEvent):void 
			{
				this.slider.addEventListener(MouseEvent.MOUSE_MOVE,slider_mouseMove);
			}
			
			private function slider_mouseMove(event:MouseEvent):void
			{
				//				if(event.target is  SliderThumb)
				//				{
				//					return;
				//				}
				var sliderThumb:SliderThumb =  slider.getThumbAt(0);
				var currentScale:Number;
				var tempHeight:int = slider.height -sliderThumb.height;
				var tempMouseY:int = slider.mouseY - sliderThumb.height/2;
				if(tempMouseY < 0)
				{
					tempMouseY = 0;
				}
				if(tempHeight < tempMouseY)
				{
					tempMouseY =tempHeight;
				}
				var index:int;
				var toolTipX:int;
				index = Math.floor((tempHeight - tempMouseY )) / tempHeight * (hostComponent.map.resolutions.length -1);
				if (hostComponent.map.scales != null )
				{
					currentScale = 1/hostComponent.map.scales[index];
				}else if (hostComponent.map.resolutions != null ) {
					currentScale = 1/ScaleUtil.resolutionToScale(hostComponent.map.resolutions[index],96);	
				}
				if(tooltip)
				{
					ToolTipManager.destroyToolTip(tooltip);
				}
				toolTipX = slider.parent.localToGlobal(new Point(slider.x,slider.y)).x;				
				tooltip = ToolTipManager.createToolTip(slider_text(currentScale),toolTipX - slider.width * 2.5, event.stageY);
				tooltip.visible =true;
			}
			
			protected function slider_rollOut(event:MouseEvent):void
			{
				if(tooltip)
				{
					ToolTipManager.destroyToolTip(tooltip);
					tooltip = null;
				}
				this.slider.removeEventListener(MouseEvent.MOUSE_MOVE,slider_mouseMove);
			}
			
			//提示文字格式化
			protected function slider_text(tempValue:Number):String
			{
				if (0<=tempValue && tempValue<1000){
					return "1:"+tempValue;
				}else if (1000<=tempValue && tempValue<10000){
					return "1:"+Math.floor (tempValue/1000)+"千";
				}else if (10000<=tempValue && tempValue<100000000){
					return "1:"+Math.floor (tempValue/10000)+"万";
				}else if (100000000<=tempValue){
					return "1:"+Math.floor (tempValue/100000000)+"亿";
				}else{
					return "";
				}
			}
			
			/* protected function viewLocateHandler(event:MouseEvent):void
			{
			var label:Label = event.currentTarget as Label;
			if(label != null)
			{
			switch(label.name)
			{
			case "CountyView":
			{
			this.hostComponent.map.zoomToLevel(11);
			break;
			}
			case "CityView":
			{
			this.hostComponent.map.zoomToLevel(7);
			break;
			}
			case "ProvinceView":
			{
			this.hostComponent.map.zoomToLevel(3);
			break;
			}
			case "CountryView":
			{
			this.hostComponent.map.viewEntire();
			break;
			}
			default:
			{
			break;
			}
			}
			} 
			} */
			
		]]>
	</fx:Script>
	
	<!--状态-->
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="normalWithSlider"/>
		<s:State name="disabledWithSlider"/>
	</s:states>  
	
	<!--<s:VGroup color="#ffffff" width="25" left="-25" top="20" horizontalAlign="left" gap="0">
	<s:Label id="CountyView" name="CountyView" width="100%" text="县" buttonMode="true"
	click="viewLocateHandler(event)"/>
	<s:Spacer height="16"/>
	<s:Label id="CityView" name="CityView" width="100%" text="市" buttonMode="true"
	click="viewLocateHandler(event)"/>
	<s:Spacer height="16"/>
	<s:Label id="ProvinceView" name="ProvinceView" width="100%" text="省" buttonMode="true"
	click="viewLocateHandler(event)"/>
	<s:Spacer height="16"/>
	<s:Label id="CountryView" name="CountryView" width="100%" text="全国" buttonMode="true"
	click="viewLocateHandler(event)"/>
	</s:VGroup>-->
	
	<!--导航条按钮-->
	<s:VGroup gap="0" horizontalAlign="center" verticalAlign="top">
		<!--放大按钮-->
		<s:Button id="zoomInButton" 
				  width="20" 
				  height="20" 
				  skinClass="{ZoomSliderZoomInButtonSkin}"
				  toolTip="放大一级"
				  enabled.disabled="false"
				  enabled.disabledWithSlider="false"/>
		<!--划动条-->
		<mx:VSlider id="slider" includeIn="normalWithSlider,disabledWithSlider"
					height="{(this.hostComponent.map.resolutions.length) * this.hostComponent.sliderHeightParam}"
					dataTipFormatFunction="formatSliderDataTip" 
					showDataTip="false"
					rollOver="slider_rollOver(event)"
					rollOut="slider_rollOut(event)"
					maximum="{this.hostComponent.map.resolutions.length - 1}" 
					showTrackHighlight="true" 
					snapInterval="1" 
					thumbSkin="{ZoomSliderThumbSkin}"
					tickColor="0x4F7DBC" 
					tickInterval="1" 
					tickLength="9" 
					tickOffset="10"
					tickThickness="2" 
					value="{this.hostComponent.map.level}"
					enabled.disabled="false"
					enabled.disabledWithSlider="false"
					enabled.normalWithSlider="true"/>
		<!--缩小按钮-->
		<s:Button id="zoomOutButton" 
				  width="20" 
				  height="20" 
				  skinClass="{ZoomSliderZoomOutButtonSkin}"
				  toolTip="缩小一级"
				  enabled.disabled="false"
				  enabled.disabledWithSlider="false"/>
	</s:VGroup>
</s:Skin>
