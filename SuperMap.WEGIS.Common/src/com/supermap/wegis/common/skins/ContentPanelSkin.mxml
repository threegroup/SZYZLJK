<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

@see spark.components.SkinnableContainer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		xmlns:skins="com.supermap.wegis.common.skins.*"
		xmlns:button="com.supermap.wegis.common.components.button.*"
		visible.closed="false"
		alpha.disabled="0.5">
	
	<fx:Metadata>
		[HostComponent("com.supermap.wegis.common.components.panel.contentPanel.ContentPanel")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			protected function changeTitleHandler(event:FlexEvent):void
			{
				if(widgetLabel.text != null && widgetLabel.text.length > 14)
				{
					widgetLabel.toolTip =  widgetLabel.text;
					widgetLabel.text = widgetLabel.text.substr(0,13)+"...";
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="open"/>
		<s:State name="normal"/>
		<s:State name="minimized"/>
		<s:State name="closed"/>
		<s:State name="disabled"/>
	</s:states>
	
	<fx:Declarations>
		<s:Bounce id="bounce"/>
	</fx:Declarations>
	
	<!--状态过渡-->
	<s:transitions>
		<s:Transition fromState="open" toState="minimized">
			<s:Sequence>
				<s:Fade duration="100" target="{widgetLabel}"/>
				<s:Fade duration="100" target="{contentGroup}"/>
				<s:Fade duration="100" target="{widgetFrame}"/>
				<!--<s:Move easer="{bounce}" target="{icon}"/>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="*" toState="open">
			<s:Sequence>
				<!--<s:Move easer="{bounce}" target="{icon}"/>-->
				<s:Fade duration="100" target="{widgetFrame}"/>
				<s:Fade duration="200" target="{widgetLabel}"/>
				<s:Fade duration="100" target="{contentGroup}"/>
				<s:Fade duration="100" target="{headerToolGroup}"/>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="open" toState="closed">
			<s:Sequence>
				<s:Fade duration="100" target="{widgetFrame}"/>
				<s:Fade duration="100" target="{widgetLabel}"/>
				<s:Fade duration="100" target="{headerToolGroup}"/>
				<s:Fade duration="100" target="{contentGroup}"/>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
	<!-- the widget template wireframe -->
	<s:Group id="widgetFrame" left="0" right="0" top="0" bottom="0">
		<s:Rect left="0" right="0" top="0" bottom="0" radiusX="0" radiusY="0"
				visible.minimized="false">
			<s:fill>
				<!--<s:SolidColor alpha="1" color="#D0E5FE"
				alpha.minimized="0"/>-->
				<s:SolidColor alpha="1" color="#FFFFFF"
							  alpha.minimized="0"/>
			</s:fill>
		</s:Rect>
		<s:Rect left="0" right="0" top="0" bottom="0"  radiusX="0" radiusY="0"
				visible.minimized="false">
			<s:stroke>
				<s:SolidColorStroke color="0xB3B3B3" weight="0"/>
			</s:stroke>
		</s:Rect>
		<s:Rect left="0" right="0" top="0" width="100%" height="{header.height}" radiusX="0" radiusY="0">
			<s:fill>
				<s:SolidColor color="#3385FF"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<s:Group id="headerToolGroup"
			 right="50"
			 top="0"
			 height="18"
			 visible.closed="false"
			 visible.minimized="false"
			 visible.open="true">
		<s:layout>
			<s:HorizontalLayout paddingLeft="10"/>
		</s:layout>
	</s:Group>
	
	<s:HGroup id="minclose" 
			  right="3" 
			  top="0" 
			  height="{header.height}" 
			  gap="2" 
			  paddingLeft="2"
			  verticalAlign="middle"
			  visible.closed="false"
			  visible.minimized="false">
		<s:Image id="minimizeButton" 
				 visible="{hostComponent.enableMinimizeButton}"
				 buttonMode="true"
				 includeInLayout="{hostComponent.enableMinimizeButton}"
				 source="@Embed('com/supermap/wegis/common/images/min.png')"/>
		<button:CloseButton id="closeButton" 
							visible="{hostComponent.enableCloseButton}"
							width="25"
							height="20" 
							buttonMode="true"/>
	</s:HGroup>
	<s:Scroller left="0" right="0" top="{header.height}"
				bottom="{hostComponent.enableState ? stateGroup.height: 2}"
				horizontalScrollPolicy="{hostComponent.horizontalScrollPolicy}"
				verticalScrollPolicy="{hostComponent.verticalScrollPolicy}"
				visible.closed="false"
				visible.minimized="false"
				visible.open="true">
		<s:Group id="contentGroup"
				 left="{ isNaN(hostComponent.paddingLeft)  ? 5 : hostComponent.paddingLeft}"
				 right="{isNaN(hostComponent.paddingLeft) ? 5 : hostComponent.paddingLeft}"
				 top="{hostComponent.paddingTop &gt; header.height ?  hostComponent.paddingTop : header.height}"
				 bottom="{isNaN(hostComponent.paddingBottom) ? 5 : hostComponent.paddingBottom}"
				 clipAndEnableScrolling="true" 
				 contentBackgroundColor="0xffffff"
				 visible.closed="false"
				 visible.minimized="false"
				 visible.normal="true"
				 visible.open="true">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
		</s:Group>
	</s:Scroller>
	<s:Group id="floatGroup"  left="0" right="0" top="{header.height}"
			 bottom="{hostComponent.enableState ? stateGroup.height: 2}"/>
	
	<s:Group id="stateGroup" 
			 visible="{hostComponent.enableState}" 
			 left="0"
			 right="0" 
			 bottom="0"
			 width="100%">
		<s:Rect left="0"
				right="0" 
				top="0" 
				bottom="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry id="stateColorFrom"  alpha="0.7"/>
					<s:GradientEntry id="stateColorTo"   alpha="0.7"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
	</s:Group>
	<s:HGroup id="header" 
			  left="0" 
			  top="2" 
			  height="25" 
			  fontSize="14"
			  verticalAlign="middle"
			  visible.minimized="false">
		<s:Image id="icon"
				 maxWidth="22" 
				 maxHeight="22" 
				 buttonMode="false" 
				 width="{hostComponent.enableIcon == true ?  NaN : 0}"
				 source="{hostComponent.widgetIcon  == null ? null : hostComponent.widgetIcon  }" 
				 visible.closed="false"
				 x.minimized="10"
				 y.minimized="-4" 
				 buttonMode.minimized="true"
				 useHandCursor.minimized="true"
				 visible.open="{hostComponent.enableIcon}"
				 x.open="2"
				 y.open="2">
		</s:Image>
		<s:Label id="widgetLabel"
				 text="{hostComponent.widgetTitle}" 
				 width="100%" 
				 fontWeight="bold" 
				 maxDisplayedLines="1"
				 showTruncationTip="true" 
				 styleName="ContentTitle"
				 color="#FFFFFF"
				 verticalCenter="0"
				 alpha.closed="0"
				 alpha.minimized="0"
				 alpha.open="1"
				 creationComplete="changeTitleHandler(event)"/>
	</s:HGroup>
	<s:Image id="resizeButton" 
			 right="0" bottom="0"
			 source="@Embed('com/supermap/wegis/common/images/resize.png')"
			 visible.closed="false"
			 visible.minimized="false"
			 visible.open="{hostComponent.resizable}"/>
</s:Skin>
