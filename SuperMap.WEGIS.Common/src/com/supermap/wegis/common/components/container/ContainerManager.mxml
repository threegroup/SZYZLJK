<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ns="http://code.google.com/p/flexlib/"
		 width="100%" height="100%">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace ns "http://code.google.com/p/flexlib/";
		.btnScrollCanvas
		{
			cornerRadius: 2;
			borderVisible: false;
			dropShadowVisible: true;
			upButtonStyleName: "upButton";
			downButtonStyleName: "downButton";
			leftButtonStyleName: "leftButton";
			rightButtonStyleName : "rightButton"
		}
	</fx:Style>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.supermap.wegis.common.components.ButtonScrollingCanvas.ButtonScrollingCanvas;
			import com.supermap.wegis.common.components.events.ContainerManagerEvent;
			import com.supermap.wegis.common.components.events.MenuEventEx;
			import com.supermap.wegis.common.components.menuBar.MenuBar;
			import com.supermap.wegis.common.core.hashTable.HashTable;
			
			import mx.containers.Canvas;
			import mx.containers.ViewStack;
			
			import org.efflex.mx.viewStackEffects.Squash;
			
			import spark.components.VGroup;

			
			/**容器管理器界面布局管理*/
			private var _buttonwidth:Number = 68;
			private var _buttonheight:Number = 65;
			private var _Container:String= "_Container";
			[Bindable]
			/**垂直间隔*/
			public var vGap:Number = 2;
			[Bindable]
			/**水平间隔*/
			public var hGap:Number = 1;
			
			private var _isVisable:Boolean;
			private var containerItems:HashTable = new HashTable();

 
			/**
			 * 获取面板底部控制栏的按钮高度
			 */
			public function get buttonHeight():Number
			{
				return _buttonheight;
			}
			/**
			 * 设置面板底部控制栏的按钮高度
			 */
			public function set buttonHeight(value:Number):void
			{
				_buttonheight = value;
			}
			/**获取面板底部控制栏的按钮的宽度*/
			public function get buttonWidth():Number
			{
				return _buttonwidth;
			}
			/**
			 * 设置面板底部控制栏的按钮宽度
			 */
			public function set buttonWidth(value:Number):void
			{
				_buttonwidth = value;
			}
			
			private var _menuItemSkinClass:Class;
			
			/**按钮样式*/
			public function get menuItemSkinClass():Class
			{
				return _menuItemSkinClass;
			}
			
			public function set menuItemSkinClass(value:Class):void
			{
				_menuItemSkinClass = value;
			}
			
			
			//容器面板
			private var viewStack:ViewStack = new ViewStack();
			private var IndexGroup:MenuBar = null;
			
			/**启用翻页特效*/
			public var enabledEffect:Boolean = false;
			
			/** 是否创建关联按钮*/
			public var isCreateLinkButton:Boolean = true;
			
			override public function set visible(value:Boolean):void
			{
				super.visible = value;
				dispatchLegendContainerChangeEvent();
			}
			
			/**初始化*/
			override protected  function createChildren():void
			{
				super.createChildren();
				var vGroup:VGroup = new VGroup();
				vGroup.percentHeight = 100;
				vGroup.percentWidth = 100;
				vGroup.horizontalAlign = "center";
				vGroup.paddingBottom = 6;
				vGroup.requestedRowCount = 2;
				vGroup.verticalAlign = "middle";
				vGroup.gap = vGap;
				
				var subGroup:Group = new Group();
				subGroup.percentHeight = 100;
				subGroup.percentWidth = 100;
				
				viewStack.percentHeight = 100;
				viewStack.percentWidth = 100;
				viewStack.setStyle("borderVisible", false);
				
				if(isCreateLinkButton){
					var btnScrollCanvas:ButtonScrollingCanvas = new ButtonScrollingCanvas();
					btnScrollCanvas.percentWidth = 100;
					btnScrollCanvas.height = _buttonheight;
					btnScrollCanvas.horizontalScrollPolicy = "auto";
					btnScrollCanvas.verticalScrollPolicy = "off";
					btnScrollCanvas.buttonWidth = 10;
					btnScrollCanvas.styleName = "btnScrollCanvas";
					
					IndexGroup = new MenuBar();
					IndexGroup.itemHeight = buttonHeight;
					IndexGroup.itemWidth = buttonWidth;
					IndexGroup.itemHorizontalGap = hGap;
					IndexGroup.isUpdateStatus = true;
					IndexGroup.menuItemSkinClass = _menuItemSkinClass;
					IndexGroup.addEventListener(MenuEventEx.MENU_CLICK, menuClickHandler);
					
					btnScrollCanvas.addElement(IndexGroup);
					vGroup.addElement(btnScrollCanvas);
				}
				
				subGroup.addElement(viewStack);
				vGroup.addElement(subGroup);
				
				this.addElement(vGroup);
			}
			
			/**按钮单击事件处理函数*/
			private function menuClickHandler(e:MenuEventEx):void
			{
				if(e.Message  != null && e.Message.currentItem != null)
				{
					var item:Object =  e.Message.currentItem;
					if(item != null)
					{
						if(this.viewStack.getChildren().length > 0)
						{
							var containerkey:String = item.key;
							this.viewStack.selectedIndex = this.viewStack.getChildIndex(this.viewStack.getChildByName(containerkey));
							
//							if(isCreateLinkButton)
//								IndexGroup.updateStatus(item);
						}
					}
				}
				
			}
			
			/**判断容器是否存在*/
			private function ExistContainer(name:String):Boolean
			{
				var obj:Canvas = 
					this.viewStack.getChildByName(name)
					as Canvas;
				if(obj != null)
					return true;
				else
					return false;
			}
			
			/**查找容器*/
			private function FindContainerByName(name:String):Canvas
			{
				var obj:Canvas = 
					this.viewStack.getChildByName(name)
					as Canvas;
				if(obj != null)
					return obj;
				return null;
			}
			
			/**MVC容器管理器内容管理*/
			/**添加MVCContainer对象*/
			public function addContainer(key:String, title:String, mvcobject:ContainerItem):void
			{
				key = key + _Container;
				var container:Canvas = null;
				if(ExistContainer(key))
				{
					container = FindContainerByName(key);
					
					if(isCreateLinkButton)
						IndexGroup.updateStatus(IndexGroup.getMenuItem(key));
				}
				else
				{
					if(mvcobject === null)
						return;
					container = new Canvas();
					
					if(enabledEffect)
					{
						var pixe:Squash = new Squash();
						container.setStyle("showEffect",pixe);
						container.setStyle("hideEffect",pixe);  
					}
					
					container.horizontalScrollPolicy = "off";
					
					container.percentWidth = 100;
					container.percentHeight = 100;
					container.name = key;
					container.addElement(mvcobject);
					this.viewStack.addItem(container);
					
					if(isCreateLinkButton)
						IndexGroup.updateStatus(IndexGroup.addButtonItem(title, key,"",{key:key}));
				}
				
				if(container != null)
				{
					this.viewStack.selectedIndex = this.viewStack.getChildIndex(container);
					dispatchLegendContainerChangeEvent();
				}
			}
			
			private function dispatchLegendContainerChangeEvent():void
			{
				//派发选择切换事件,采用冒泡方式，派发事件
				var containerManagerEvent:ContainerManagerEvent = new ContainerManagerEvent(ContainerManagerEvent.CONTAINER_CHANGE);
				var newSelectKey:String;
				if(this.viewStack.selectedChild != null)
				{
					newSelectKey = this.viewStack.selectedChild.name;
					containerManagerEvent.newSelectKey = newSelectKey.substring(0,newSelectKey.search(_Container));
				}
				containerManagerEvent.visable = visible;
				this.stage.dispatchEvent(containerManagerEvent);
			}
			
			/**MVC容器管理器内容管理*/
			/**更加key，获取容器的containerItem*/
			public function getContainerItem(key:String):ContainerItem
			{
				var containerItem:ContainerItem = containerItems.find(key) as ContainerItem;
				if(containerItem == null)
				{
					containerItem = new ContainerItem();
					containerItems.add(key,containerItem);
				}
				return containerItem;
			}
		]]>
	</fx:Script>
</s:Group>
