<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false"
				styleName="dataGroupItemRenderStyle"
				height="100%" width="100%"
				minHeight="25"
				buttonMode="true"
				click="itemrenderer_clickHandler(event)"  
				creationComplete="creationCompleteHandler()"
				dataChange="itemrenderer_dataChangeHandler(event)"
				>
	<fx:Script>
		<![CDATA[
			import com.supermap.wegis.common.components.events.ChangeSelectAllStateEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Spacer;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.CheckBox;
			import spark.components.Label;
			//checkbox是否设置为绑定
			private var _checkBoxIsBindable:Boolean = true;
			//checkbox 设置选择绑定,通过这个属性绑定
			[Bindable]
			private var _checkSelect:Boolean = false;
			private var _selectField:String = "select";
			private var _initData:Array;
			private var _captionField:String ="columncaption";
			private var _columnField:String = "columnfield";
			private var _columnWidthField:String ="columnwidth";
			private var _columnType:String = "columntype";
			private var _gap:int;//分割线和文本的间距
			public function get columnField():String
			{
				return _columnField;
			}

			public function set columnField(value:String):void
			{
				_columnField = value;
			}

			[Bindable]
			public function get checkSelect():Boolean
			{
				return _checkSelect;
			}

			public function set checkSelect(value:Boolean):void
			{
				_checkSelect = value;
			}

			/**存储表格初始化信息，包括标题，每列显示的field，每列宽度*/
			public function get initData():Array
			{
				return _initData;
			}
			
			/**
			 * @private
			 */
			public function set initData(value:Array):void
			{
				_initData = value;
			}
			
			/**标题字段*/
			public function get captionField():String
			{
				return _captionField;
			}
			
			/**
			 * @private
			 */
			public function set captionField(value:String):void
			{
				_captionField = value;
			}
			
			/**值字段*/
			public function get valueField():String
			{
				return _columnField;
			}
			
			/**
			 * @private
			 */
			public function set valueField(value:String):void
			{
				_columnField = value;
			}
			
			/**列框*/
			public function get columnWidthField():String
			{
				return _columnWidthField;
			}
			
			/**
			 * @private
			 */
			public function set columnWidthField(value:String):void
			{
				_columnWidthField = value;
			}
			
			/**列下面控件的类型 ，checkbox  ,label，目前支持*/
			public function get columnType():String
			{
				return _columnType;
			}
			
			/**
			 * @private
			 */
			public function set columnType(value:String):void
			{
				_columnType = value;
			}
			
			/**checkbox是否绑定,默认绑定*/
			public function get checkBoxIsBindable():Boolean
			{
				return _checkBoxIsBindable;
			}
			/**checkbox是否绑定,默认绑定*/
			public function set checkBoxIsBindable(value:Boolean):void
			{
				_checkBoxIsBindable = value;
			}
			
			protected function itemrenderer_clickHandler(event:MouseEvent):void
			{
				//控制checkbox选择状态 ,如果当前点击的是checkbox
				if(event.target is CheckBox)
				{
					var check:CheckBox = event.target as CheckBox;
					if(check.selected == true)
					{
						data[_selectField] = true;
					}else
					{
						data[_selectField] = false;
					}
				}else //如果当前点击的其他地方
				{
					if(checkSelect== true)
					{
						data[_selectField] = false;
						checkSelect  = false;
					}else if(checkSelect == false)
					{
						data[_selectField] = true;
						checkSelect  = true;
					}
				}
				dispatchSelectAllStateChanged();
			}
			
			/**全选按钮发生变化*/
			private function dispatchSelectAllStateChanged():void
			{
				var selectAllChangedEvent:ChangeSelectAllStateEvent = new ChangeSelectAllStateEvent(ChangeSelectAllStateEvent.SELECT_ALL_STATE_CHANGED,true);
				dispatchEvent(selectAllChangedEvent);
			}
			
			protected function itemrenderer_dataChangeHandler(event:FlexEvent):void
			{
				if(data == null)
				{
					return;
				}
				if(data[_selectField] == undefined  || data[_selectField] == false)
				{
					data[_selectField] = false;
					checkSelect = false;
				}else if(data[_selectField] == true)
				{
					checkSelect = true;
				}
				//如果是第一个渲染器，将最上面一个line可见
				if(itemIndex == 0)
				{
					topLine.visible = true;
				}else
				{
					topLine.visible = false;
				}
			
			}
			
			protected function creationCompleteHandler():void
			{
				if(initData != null)
				{
					_gap = getStyle("gap") == null ? 10 : getStyle("gap");
					var line:Line;
					var space:Spacer;
					var solidColorStroke:SolidColorStroke;
					for each(var item:Object in initData)
					{
							var control:UIComponent;
							switch(item[columnType])
							{
								case "check":
									control = new CheckBox();
									control = initProperty(control,item) ;
									if(checkBoxIsBindable)
									{
										BindingUtils.bindProperty(control,"selected",this,"checkSelect");
										BindingUtils.bindProperty(this,"checkSelect",control,"selected");
//										BindingUtils.bindProperty(control,"selected",this,["data",_selectField]);
										BindingUtils.bindSetter(changeDataGroupSelects,control,"selected");
									}
									break;
								case "label":
									control = new Label();
									control = initProperty(control,item,"text");
									break;
								default:
									control = new Label();
									control = initProperty(control,item,"text");
									break;
							}
						line = new Line();
						line.percentHeight = 100;
						solidColorStroke = new SolidColorStroke();
						solidColorStroke.color = getStyle("lineColor");
						solidColorStroke.weight = 0.8;
						line.stroke = solidColorStroke;
						space = new Spacer();
						space.width = _gap;
						contentGroup.addElement(line);
						contentGroup.addElement(space);
						contentGroup.addElement(control);
					}
					line = new Line();
					line.percentHeight = 100;
					solidColorStroke = new SolidColorStroke();
					solidColorStroke.color = getStyle('lineColor');
					solidColorStroke.weight = 0.8;
					line.stroke = solidColorStroke;
					contentGroup.addElement(line);
				}
			}
			
			//将当前状态存入到父控件的selects 
			
			private function changeDataGroupSelects(value:Object):void
			{
				var dataGroup:DataGroupEx = this.owner as DataGroupEx;
				var dt:ArrayCollection = dataGroup.selectItems;
				if(value == true)
				{
						if(dt.contains(data) == false)
						{
							dt.addItem(data);
						}
				}else
				{
					if(dt.contains(data) == true )
					{
						dt.removeItemAt(dt.getItemIndex(data));
					}				
				}
			}
			
			private function initProperty(control:UIComponent , value:Object , labelField:String=null):UIComponent
			{
				if(labelField != null && labelField.length >0)
				{
					if(value.hasOwnProperty(columnField))
					{
						var propField:String = value[columnField];
						if(value.hasOwnProperty("needconvert"))
						{
							if(data.hasOwnProperty(propField) == false)
							{
								data[propField] = "0";
							}
							control[labelField] = data[propField].toString() == "1" ? "启用" : "禁用";
							BindingUtils.bindSetter(bindControlProp,this,["widgets.basedataquery.dObj",propField]);
								function bindControlProp(item:Object):void
								{
									if(control != null && item != null)
									{
										control[labelField] = item.toString() == "1" ? "启用":"禁用";
									}
								}
						}else
						{
							control[labelField] =  data[propField];
						var watch:ChangeWatcher =	BindingUtils.bindProperty(control,labelField.toString(),this,["widgets.basedataquery.dObj",propField]);
						}
					
					}else {
						control[labelField] ="未定义字段";
					}
				}
				if(value.hasOwnProperty(columnWidthField))
				{
					var itemWidth:String = value[columnWidthField];
					var index:int =itemWidth.indexOf("%" );
					if(index != -1)
					{
						control.percentWidth = parseInt( itemWidth.substring(0,index));
					}else
					{
						control.width = parseInt(itemWidth);
					}
				}else
				{
					control.percentWidth = 100;
				}
				return control;
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<!-- border/background rectangle -->
	<s:Rect    left="0" right="0" top="0" bottom="0">
		<s:fill >
			<s:SolidColor alpha="0.5"
						   alpha.hovered="0.9" 
						   color.hovered="{getStyle('rollOverColor')}"
						   color.normal="{getStyle('normalColor')}"
						   color.selected="{getStyle('selectColor')}"/>
		</s:fill>
	</s:Rect>
	<s:VGroup gap="0" width="100%" height="100%">
		<s:Line  id="topLine" width="100%"   >
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('lineColor')}" weight="0.8"/>
			</s:stroke>
		</s:Line>
		<s:HGroup  id="contentGroup" gap="0" width="100%" height="100%" horizontalAlign="left" verticalAlign="middle"  >
		</s:HGroup>
		<s:Line   width="100%"    >
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('lineColor')}" weight="0.8"/>
			</s:stroke>
		</s:Line>
	</s:VGroup>
</s:ItemRenderer>
