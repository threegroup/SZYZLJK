<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   xmlns:line="sm.wegis.szy.components.line.*"
			   width="100%" 
			   creationComplete="initWidget(event)" xmlns:drodown="sm.wegis.szy.components.drodown.*">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.supermap.web.core.Point2D;
			import com.supermap.wegis.common.components.checkComboBox.CheckBoxSelectEvent;
			import com.supermap.wegis.common.components.mapCtrl.MapCtrl;
			import com.supermap.wegis.common.core.hashTable.HashTable;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.utils.ArrayCollectionUtils;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import sm.wegis.szy.events.DropDownPanelEvent;
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.renders.DataGroupCheckItemrenderer;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.vo.GridColumnInfo;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			
			private const  SHOW:String = "show";
			private const  HIDE:String = "hide";
			
			private const MaxHeight:int = 200;
			
			private const CONTRACT:String = "收缩";
			private const EXPAND:String = "展开";
			
			/**当前所有监测指标*/
			[Bindable]
			private var watchIndexs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			/**模型定位器*/
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			
			protected function initWidget(event:FlexEvent):void
			{
				initListener();
			}
			
			/**初始化事件监听*/
			private function initListener():void
			{
				var eventObject:CairngormEventClass = new CairngormEventClass();
				/**事件列表*/
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_SINGLE_OBJECT_INFO_RESPONSE, querySingleObjectInfoResponseHandler],//响应查询结果
					[QueryEvent.HIDE_WATER_WATCH_WIDGET, clearSystemHandler],//隐藏容器面板
				]);
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
				
				//响应系统清除功能
				CairngormEventManager.getInstance().attachSingleEvent(new CairngormEventClass(SystemEvent.CLEAR_SYSTEM, clearSystemHandler));
				
				//切换系统
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.SYSTEM_RELOAD	, systemReloadHandler);
			}
			
			//用户或子系统发生变化，刷新数据
			private function systemReloadHandler(event:CairngormEvent):void
			{
				//此处添加模块UI及逻辑初始化功能
				this.resetUI();
			}
			
			//系统初始化或系统切换之后重置UI
			private function resetUI():void
			{
				if(this.currentState != HIDE)
				{
					this.currentState = HIDE;
				}
				clearAllResult();
			}
			
			//响应系统清除
			private function clearSystemHandler(event:CairngormEvent):void
			{
				//暂定不重置UI
				this.resetUI();
			}
			
			/**清除所有结果*/
			private function clearAllResult():void
			{
				resultGrid.dataProvider = null;
				if( resultGrid.columns != null)
				{
					resultGrid.columns.removeAll();
				}
				hideInfoWidow();
			}
			
			/**清除地图弹出面板*/
			private function hideInfoWidow():void
			{
				var map:MapCtrl = modelLocator.mapCtrl;
				if(map.infoWindow.content != null)
				{
					map.infoWindow.content = null;
				}
				map.infoWindow.hide();
			}
			
			/**响应查询结果*/
			private function querySingleObjectInfoResponseHandler(event:QueryEvent):void
			{
				var resultData:Object = event.data;
				var gridColumnInfo:GridColumnInfo;
				if (resultData != null)
				{
					if (resultData.selected == true) {
						if ( resultData.success == true)
						{
							resultGrid.dataProvider = resultGrid.dataProvider == null ? new ArrayCollection() : resultGrid.dataProvider;
							var resultTarget:Object = resultData.attributes.targets[0];
							if (resultTarget != null) {
								var item:Object = {};
								item.id = resultTarget.id;
								item.name = resultTarget.name;
								item.index = resultData.index;
								item.x = resultData.x;
								item.y = resultData.y;
								//遍历，更新watchIndexs数据
								for each(var attribute:Object in resultTarget.attributes)
								{
									for (var propKey:String in attribute) {
										item[propKey] = attribute[propKey];
										var hasContain:Boolean = false;
										for each(gridColumnInfo in watchIndexs) {
											if (gridColumnInfo.dataField == propKey) {
												gridColumnInfo.count++;
												hasContain = true;
												break;
											}
										}
										if (hasContain == false) {
											gridColumnInfo = new GridColumnInfo();
											gridColumnInfo.dataField = propKey;
											gridColumnInfo.count++;
											watchIndexs.addItem(gridColumnInfo);
										}
									}
								}
							}
							
							//第一次插入记录，设置默认显示列
							if (resultGrid.dataProvider.length == 0) {
								initDefaultWatchIndex();
							}
							resultGrid.dataProvider.addItem(item);
							createGridColumn();
							
							ArrayCollectionUtils.FieldSort(resultGrid.dataProvider as ArrayCollection, ["index"], null, [Array.NUMERIC]);
							panel.contentGroup.visible = panel.contentGroup.includeInLayout = true;
							this.currentState = SHOW;
						}
					} else if (resultData.selected == false) 
					{
						var dataProvider:ArrayCollection = resultGrid.dataProvider as ArrayCollection;
						for each(var itemData:Object in dataProvider)
						{
							if (resultData.id == itemData.id) {
								dataProvider.removeItemAt(dataProvider.getItemIndex(itemData));
								//属性列计数器减小，删除count==0的属性列
								var removes:Array = [];
								for (var key:String in itemData) {
									for each (gridColumnInfo in watchIndexs) {
										if (gridColumnInfo.dataField == key) {
											gridColumnInfo.count--;
											if (gridColumnInfo.count == 0){
												removes.push(gridColumnInfo);
											}
											break;
										}
									}
								}
								for each(gridColumnInfo in removes) {
									watchIndexs.removeItemAt(watchIndexs.getItemIndex(gridColumnInfo));
								}
								createGridColumn();
								break;
							}
						}
						
						//如果表格不再有记录，则清除表格列，并隐藏模块。
						if(dataProvider.length == 0)
						{
							resultGrid.columns.removeAll();
							this.currentState = HIDE;
						}
					}
//					watchList.dataProvider = watchIndexs;
				}
			}
			
			/**第一次显示类，按照默认配置列显示列数*/
			private function initDefaultWatchIndex():void
			{
				//如果没有列被选，按照默认列数，设置
				var selectCount:int = 0;
				var gridColumnInfo:GridColumnInfo;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectCount++;
					}
				}
				if (selectCount == 0) {
					var normalCols:int =  modelLocator.systemInfo.normalCols;
					normalCols =  normalCols > watchIndexs.length ? watchIndexs.length : normalCols;
					for (var index:int = 0; index < normalCols; index++) {
						gridColumnInfo = watchIndexs.getItemAt(index) as GridColumnInfo;
						gridColumnInfo.selected = true;
					}
				}
			}
			
			/**创建表格列*/
			private function createGridColumn():void
			{
				//清空表格列
				resultGrid.columns = new ArrayCollection(); 
				var gridColumnInfo:GridColumnInfo;
				var column:GridColumn;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						column = new GridColumn();
						column.dataField = gridColumnInfo.dataField;
						column.headerText = gridColumnInfo.dataField;
						column.minWidth = 100;
						resultGrid.columns.addItem(column);
					}
				}
				column = new GridColumn();
				column.dataField = "name";
				column.headerText = "名称";
				column.minWidth = 120;
				resultGrid.columns.addItemAt(column, 0);
			}
			
			//显示或隐藏数据展示
			override public function set visible(value:Boolean):void
			{
				if(resultGrid.dataProvider != null)
				{
					this.currentState = SHOW;
				}
				else
				{
					this.currentState = HIDE;
				}
				
				var map:MapCtrl = modelLocator.mapCtrl;
				if(value == false)
				{
					map.infoWindow.content = null;
					map.infoWindow.hide();
				}
			}
			
			//点击对象表格行，定位要素
			protected function resultGrid_gridClickHandler(event:GridEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				if (event.rowIndex > -1 && event.rowIndex < grid.dataProvider.length)
				{
					//地图定位
					var selectedItem:Object = grid.selectedItem;
					if ("x" in selectedItem && "y" in selectedItem) {
						var point:Point2D = new Point2D(selectedItem.x, selectedItem.y);
						if (modelLocator.mapCtrl.level < 3) {
							modelLocator.mapCtrl.zoomToLevel(3, point);
						} else {
							modelLocator.mapCtrl.panTo(point);
						}
					}
				}
			}
			
			//点击控制panel展开和收缩
			protected function stateImage_clickHandler(event:MouseEvent):void
			{
				panel.contentGroup.visible = panel.contentGroup.includeInLayout = !panel.contentGroup.includeInLayout;
				if ( panel.contentGroup.visible) {
					stateImage.toolTip = CONTRACT;
					resizeEffect.heightTo =  MaxHeight;
					fadeEffect.alphaTo = 1;
				} else {
					stateImage.toolTip = EXPAND;
					resizeEffect.heightTo =  panel.controlBarGroup.height;
					fadeEffect.alphaTo = 0;
				}
				animateEffect.stop();
				animateEffect.play();
			}
			
			protected function watchList_creationCompleteHandler(event:FlexEvent):void
			{
				var classFactory:ClassFactory = new ClassFactory(DataGroupCheckItemrenderer);
				classFactory.properties = {watchIndexs:watchIndexs, maxCount:modelLocator.systemInfo.maxCols};
				watchList.itemRenderer = classFactory;
			}
			
			private function watchListLabelFunction(item:Object):String
			{
				var selectColumn:String = "";
				for each(var gridColumnInfo:GridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectColumn = selectColumn + gridColumnInfo.dataField;
						if (watchIndexs.getItemIndex(gridColumnInfo) != watchIndexs.length -1) {
							selectColumn = selectColumn + ",";
						}
					}
				}
				return selectColumn;
			}
			
			protected function watchList_changeHandler(event:DropDownPanelEvent):void
			{
				createGridColumn();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="animateEffect" duration="500" effectEnd="stateImage.enabled=true;"
					effectStart="stateImage.enabled=false">
			<s:Fade id="fadeEffect" target="{resultGrid}"   />
			<s:Resize id="resizeEffect"  target="{panel}" />
			<s:Rotate id="rotateEffect" angleBy="180" autoCenterTransform="true"
					  target="{stateImage}"/>
		</s:Parallel>
	</fx:Declarations>
	<ns:states>
		<s:State name="hide"/>
		<s:State name="show"/>
	</ns:states>
	<s:Panel id="panel" width="100%" maxHeight="{MaxHeight}" title="对象监测数据列表" bottom.show="5" bottom.hide="0"
			 height.hide="0">
		<s:controlBarContent>
			<s:Label text="设置监测指标:" color="#FFFFFF"/>
			<!--<ns:CheckBoxComboBox id="watchList" width="80"  
								 dataProvider="{watchIndexs}" 
								 selectChanged="watchList_changeHandler(event)"/>-->
			<drodown:DropDownPanel id="watchList"  dataProvider="{watchIndexs}" 
								   selectChanged="watchList_changeHandler(event)"/>
 			<s:Spacer width="10"/>
			<s:Image id="stateImage" width="16" height="16" buttonMode="true" 
					 click="stateImage_clickHandler(event)"
					 source="{ResourceManagerEx.FindResource('Down').cls}" toolTip="收缩"/>
			<s:Spacer width="10"/>
		</s:controlBarContent>
		<s:DataGrid id="resultGrid" width="100%" height="100%" maxHeight="200"  borderVisible="false"
					gridClick="resultGrid_gridClickHandler(event)" sortableColumns="false"/>
	</s:Panel>
</ns:WidgetBase>
