<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   xmlns:line="sm.wegis.szy.components.line.*"
			   width="100%" 
			   creationComplete="initWidget(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.Point2D;
			import com.supermap.web.core.geometry.GeoPoint;
			import com.supermap.web.core.styles.PictureMarkerStyle;
			import com.supermap.wegis.common.components.mapCtrl.MapCtrl;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.mappingEx.FeaturesLayerEx;
			import com.supermap.wegis.common.utils.ArrayCollectionUtils;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.utils.FeatureLayerUtil;
			import sm.wegis.szy.vo.ConstVO;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			
			private const  SHOW:String = "show";
			private const  HIDE:String = "hide";
			
			private const MaxHeight:int = 200;
			
			private const CONTRACT:String = "收缩";
			private const EXPAND:String = "展开";
			
			[Bindable]
			/**模型定位器*/
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			
			protected function initWidget(event:FlexEvent):void
			{
				initListener();
			}
			
			/**初始化事件监听*/
			private function initListener():void
			{
				var eventObject:CairngormEventClass = new CairngormEventClass();
				/**事件列表*/
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_SINGLE_OBJECT_INFO_RESPONSE, querySingleObjectInfoResponseHandler],//响应查询结果
					[QueryEvent.HIDE_WATER_WATCH_WIDGET, clearSystemHandler],//隐藏容器面板
				]);
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
				
				//响应系统清除功能
				CairngormEventManager.getInstance().attachSingleEvent(new CairngormEventClass(SystemEvent.CLEAR_SYSTEM, clearSystemHandler));
			}
			
			
			//响应系统清除
			private function clearSystemHandler(event:CairngormEvent):void
			{
				this.currentState = HIDE;
				clearAllResult();
			}
			
			/**清除所有结果*/
			private function clearAllResult():void
			{
				resultGrid.dataProvider = null;
				if( resultGrid.columns != null)
				{
					resultGrid.columns.removeAll();
				}
				hideInfoWidow();
			}
			
			/**清除地图弹出面板*/
			private function hideInfoWidow():void
			{
				var map:MapCtrl = modelLocator.mapCtrl;
				if(map.infoWindow.content != null)
				{
					map.infoWindow.content = null;
				}
				map.infoWindow.hide();
			}
			
			/**响应查询结果*/
			private function querySingleObjectInfoResponseHandler(event:QueryEvent):void
			{
				var resultData:Object = event.data;
				if (resultData != null)
				{
					if (resultData.selected == true) {
						if ( resultData.success == true)
						{
							resultGrid.dataProvider = resultGrid.dataProvider == null ? new ArrayCollection() : resultGrid.dataProvider;
							var item:Object = {};
							var resultTarget:Object = resultData.attributes.targets[0];
							item.id = resultTarget.id;
							item.name = resultTarget.name;
							item.index = resultData.index;
							var newColumn:GridColumn;
							//如果为空或者length=0，添加名称列
							if (resultGrid.columns == null || resultGrid.columns.length == 0) {
								resultGrid.columns =new ArrayList();
								newColumn = new GridColumn();
								newColumn.dataField = "name";
								newColumn.headerText = "名称";
								resultGrid.columns.addItem(newColumn);
							}
							//遍历，添加不包含的列
							for each(var attribute:Object in resultTarget.attributes)
							for (var propKey:String in attribute) {
								if (propKey == "坐标" && attribute[propKey] != null) {
									var pointStr:String = attribute["坐标"];
									var pointArr:Array = pointStr.split(",");
									item.x = Number(pointArr[0]);
									item.y = Number(pointArr[1]);
									continue;
								}
								var hasContain:Boolean = false;
								for (var index:int = 0 ; index < resultGrid.columns.length; index++) {
									var colmn:GridColumn = resultGrid.columns.getItemAt(index) as GridColumn;
									if (colmn.dataField == propKey) {
										hasContain = true;
										break;
									}
								}
								if (hasContain == false) {
									newColumn = new GridColumn();
									newColumn.dataField = propKey;
									resultGrid.columns.addItem(newColumn);
								}
								item[propKey] = resultTarget.attributes[propKey];
							}
						}
						resultGrid.dataProvider.addItem(item);
						ArrayCollectionUtils.FieldSort(resultGrid.dataProvider as ArrayCollection, ["index"], null, [Array.NUMERIC]);
						panel.contentGroup.visible = panel.contentGroup.includeInLayout = true;
						this.currentState = SHOW;
					} else if (resultData.selected == false) {
						var dataProvider:ArrayCollection = resultGrid.dataProvider as ArrayCollection;
						for each(var itemData:Object in dataProvider)
						{
							if (resultData.id == itemData.id) {
								dataProvider.removeItemAt(dataProvider.getItemIndex(itemData));
								break;
							}
						}
					}
				}
			}
			
			
			//显示或隐藏数据展示
			override public function set visible(value:Boolean):void
			{
				this.currentState = value == true ? SHOW : HIDE;
				var map:MapCtrl = modelLocator.mapCtrl;
				if(value == false)
				{
					map.infoWindow.content = null;
					map.infoWindow.hide();
				}
			}
			
			//点击对象表格行，定位要素
			protected function resultGrid_gridClickHandler(event:GridEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				if (event.rowIndex > -1 && event.rowIndex < grid.dataProvider.length)
				{
					//地图定位
					var selectedItem:Object = grid.selectedItem;
					var point2D:Point2D = new Point2D(selectedItem.x, selectedItem.y);
					modelLocator.mapCtrl.panTo(point2D);
					
					//添加地图定位点图片
					var importFeatureLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURE_LAYER, modelLocator.mapCtrl);
					importFeatureLayer.clear();
					var feature:Feature = new Feature();
					feature.geometry = new GeoPoint(point2D.x, point2D.y);
					var picStyle:PictureMarkerStyle = new PictureMarkerStyle(ResourceManagerEx.FindResource("Location").cls);
					picStyle.yOffset = 11;
					feature.style = picStyle;
					importFeatureLayer.addFeature(feature);
				}
			}
			
			//点击控制panel展开和收缩
			protected function stateImage_clickHandler(event:MouseEvent):void
			{
				panel.contentGroup.visible = panel.contentGroup.includeInLayout = !panel.contentGroup.includeInLayout;
				if ( panel.contentGroup.visible) {
					stateImage.toolTip = CONTRACT;
					resizeEffect.heightTo =  MaxHeight;
					fadeEffect.alphaTo = 1;
				} else {
					stateImage.toolTip = EXPAND;
					resizeEffect.heightTo =  panel.controlBarGroup.height;
					fadeEffect.alphaTo = 0;
				}
				animateEffect.stop();
				animateEffect.play();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="animateEffect" duration="500" effectEnd="stateImage.enabled=true;"
					effectStart="stateImage.enabled=false">
			<s:Fade id="fadeEffect" target="{resultGrid}"   />
			<s:Resize id="resizeEffect"  target="{panel}" />
			<s:Rotate id="rotateEffect" angleBy="180" autoCenterTransform="true"
					  target="{stateImage}"/>
		</s:Parallel>
	</fx:Declarations>
	<ns:states>
		<s:State name="hide"/>
		<s:State name="show"/>
	</ns:states>
	<s:Panel id="panel" width="100%" maxHeight="{MaxHeight}" title="对象监测数据列表" bottom.show="5" bottom.hide="0"
			 height.hide="0">
		<s:controlBarContent>
			<s:Image id="stateImage" width="16" height="16" buttonMode="true" 
					 click="stateImage_clickHandler(event)"
					 source="{ResourceManagerEx.FindResource('Down').cls}" toolTip="收缩"/>
			<s:Spacer width="10"/>
		</s:controlBarContent>
		<s:DataGrid id="resultGrid" width="100%" height="100%" maxHeight="200"  borderVisible="false"
					gridClick="resultGrid_gridClickHandler(event)" sortableColumns="false"/>
	</s:Panel>
</ns:WidgetBase>
