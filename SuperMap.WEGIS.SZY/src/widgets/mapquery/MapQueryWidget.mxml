<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common" 
			   xmlns:line="sm.wegis.szy.components.line.*"
			   width="100%" height="100%"
			   creationComplete="creationCompleteHandler(event)" 
			   WidgetAddComplete="widgetAddCompleteHandler(event)"
			   WidgetRemove="removeWidget(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.adobe.utils.StringUtil;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.Point2D;
			import com.supermap.web.core.geometry.GeoPoint;
			import com.supermap.web.core.styles.PictureMarkerStyle;
			import com.supermap.web.core.styles.TextStyle;
			import com.supermap.wegis.common.components.events.BaseWidgetEvent;
			import com.supermap.wegis.common.core.resourceManager.ResourceInfo;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.mappingEx.FeaturesLayerEx;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import sm.wegis.szy.events.ListCheckItemRendererEvent;
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.utils.FeatureLayerUtil;
			import sm.wegis.szy.vo.ConstVO;
			import sm.wegis.szy.vo.MapQueryParam;
			import sm.wegis.szy.vo.MapQueryVO;
			import sm.wegis.szy.vo.WaterEvaluaParam;
			
			import spark.components.DropDownList;
			import spark.events.IndexChangeEvent;
			
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				initEventListener();
			}
			
			public function initEventListener():void{
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_STATION_REAL_INFO_RESPONSE, queryStationRealInfoResponseHandler],//获取对象详细属性是否成功，如果不成功，不勾选
					[QueryEvent.HIDE_WATER_WATCH_WIDGET, clearSystemHandler],
					[SystemEvent.SYSTEM_RELOAD, systemReloadHandler],
					[QueryEvent.QUERY_TYPES_AND_DETAIL_LIST_RESPONSE, queryTypesAndDetailListHandler]
				]);
				var eventObject:CairngormEventClass = new CairngormEventClass();
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
			}
			
			private function queryStationRealInfoResponseHandler(event:CairngormEvent):void
			{
				// 打开遮罩面板
				maskGroup.visible = false;
				var result:Object = event.data;
				var index:int =  result.index as int;
				var selectItem:Object = resultList.dataProvider.getItemAt(index);
				//查询失败和取消选择
				if (result.selected == false) {
					resultList.dataProvider.itemUpdated(selectItem);
//					QueryInfoLabel.includeInLayout = true;
//					QueryInfoLabel.text = result.message;
				} 
				var featuresLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURE_LAYER, modelLocator.mapCtrl);
				//如果选择成功，切换选择图标，如果取到勾选，切换普通图标
				for each(var feature:Feature in featuresLayer.features) {
					if (selectItem.id == feature.id) {
						var picStyle:PictureMarkerStyle = new PictureMarkerStyle();
						var resourceInfo:ResourceInfo;
						if (selectItem.selected == true){
							
							resourceInfo = ResourceManagerEx.FindResource(feature.attributes.typeIDs+"_S");
							if (resourceInfo != null) {
								picStyle.source = resourceInfo.cls;
							} else {
								picStyle.source = ResourceManagerEx.FindResource("lcsel").cls;
							}
							picStyle.yOffset = 10;
						} else {
							resourceInfo = ResourceManagerEx.FindResource(feature.attributes.typeIDs);
							if (resourceInfo != null) {
								picStyle.source = resourceInfo.cls;
							} else {
								picStyle.source = ResourceManagerEx.FindResource("lcnor").cls;
							}
						}
						feature.style = picStyle;
					}
				}
			}
			
			private function clearSystemHandler(event:CairngormEvent):void
			{
				
			}
			
			//用户或子系统发生变化，刷新数据
			private function systemReloadHandler(event:CairngormEvent):void
			{
				//此处添加模块UI及逻辑初始化功能
				this.resetUI();
				queryMainTypes();
			}
			
			//系统初始化或系统切换之后重置UI
			private function resetUI():void
			{
				if(this.conditionGroup != null && this.conditionGroup.numElements >0)
				{
					this.conditionGroup.removeAllElements();
				}
				
				this.ResultContentPanel.visible = false;
				this.resultList.dataProvider = null;
				creationMapMarks();
				this.searchInput.text = null;
				maskGroup.visible = false;
				QueryInfoLabel.includeInLayout = false;
				QueryInfoLabel.text = "";
			}
			
			//请求mainType
			public function queryMainTypes():void
			{
				QueryInfoLabel.includeInLayout = false;
				QueryInfoLabel.text = "";
				var queryMainTypes:QueryEvent = new QueryEvent(QueryEvent.QUERY_MAIN_TYPES);
				queryMainTypes.dispatch();
			}
			
			//查询分类和明细
			private function queryTypesAndDetailList():void
			{
				clearLastQuery();
				var typeIds:Array = getTypeIds();
				var mapQueryVO:MapQueryVO = new MapQueryVO();
				if (StringUtil.trim(searchInput.text).length != 0) {
					mapQueryVO.keyword = StringUtil.trim(searchInput.text);
				}
				
				if (typeIds.length > 0 ) {
					mapQueryVO.typeIds = typeIds.join(",");
				}
				QueryInfoLabel.includeInLayout = false;
				QueryInfoLabel.text = "";
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_TYPES_AND_DETAIL_LIST);
				queryEvent.data = mapQueryVO;
				queryEvent.dispatch();
				
			}
			
			private function clearLastQuery():void
			{
				//清空对象列表
				resultList.dataProvider = null;
				//清除地图标绘的feature
				var markLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURE_LAYER, modelLocator.mapCtrl);
				markLayer.clear();
				var markTextLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURETEXT_LAYER, modelLocator.mapCtrl);
				markTextLayer.maxVisibleResolution = modelLocator.mapCtrl.resolutions[2];
				markTextLayer.clear();
				//隐藏右下对象监测数据面板
				var waterWatchEvent:QueryEvent = new QueryEvent(QueryEvent.HIDE_WATER_WATCH_WIDGET);
				waterWatchEvent.dispatch();
			}
			
			//获取下拉框选择的多个类型
			private function getTypeIds():Array
			{
				var typeIds:Array = [];
				for(var i:int = 0 ; i < conditionGroup.numElements ; i++)
				{
					var childElement:DropDownList = conditionGroup.getElementAt(i) as DropDownList;
					//如果选项大于0，需要返回选择的type值
					if (childElement.selectedIndex > 0 ) {
						typeIds.push(childElement.selectedItem.typeId);
					}
				}
				return typeIds;
			}
			
			private function queryMainTypesHandler(event:CairngormEvent):void
			{
//				var data:Object = event.data;
//				if (data.success == true) {
//					if (data.attributes) {
//						if (data.attributes.mainTypes != null && data.attributes.mainTypes.length > 0)
//						{
//							scrollButtonPanel.dataProvider = new ArrayCollection(data.attributes.mainTypes);
//							scrollButtonPanel.selectedIndex = 0;//必须先设置数据源，查询第一级分类，在scrollButtonPanel的click事件里进行查询
//						}
//					}
//				}else{
//					QueryInfoLabel.text = data.message;
//				}
			}
			
			private function queryTypesAndDetailListHandler(event:CairngormEvent):void
			{
				searchBt.enabled = true;
				var data:Object = event.data;
				resultList.dataProvider = null;
				if (resultList.scrollRect) {
					resultList.scrollRect.y = 0;
				}
				if (data.success == true) 
				{
					if(!this.ResultContentPanel.visible)
						this.ResultContentPanel.visible = true;
					if (data.attributes) 
					{
						if (data.attributes.types != null && data.attributes.types.length > 0)
						{
							var dropDownList:DropDownList = createTypeDropDownControl(new ArrayCollection(data.attributes.types));
							conditionGroup.addElement(dropDownList);
						}
						if (data.attributes.targetList != null && data.attributes.targetList.length > 0) 
						{
							resultList.dataProvider = new ArrayCollection(data.attributes.targetList);
							creationMapMarks(data.attributes.targetList);
						}
					}
				}
				else
				{
					this.ResultContentPanel.visible = false;
					//此处面板做相应的初始化
					QueryInfoLabel.includeInLayout = true;
					QueryInfoLabel.text = data.message;
				}
			}
			
			//创建地图mark,如果传空，清除
			private function creationMapMarks(results:Array = null):void
			{
				var markLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURE_LAYER, modelLocator.mapCtrl);
				markLayer.clear();
				var markTextLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.LOCATION_FEATURETEXT_LAYER, modelLocator.mapCtrl);
				var maxLevel:int = modelLocator.systemInfo.maxLevel;
				markTextLayer.maxVisibleResolution = modelLocator.mapCtrl.resolutions[maxLevel];
				markTextLayer.clear();
				if (results != null) {
					for each(var item:Object in results) {
						//现在的返回结果没有坐标，先程序添加几个点
						var picMarkStyle:PictureMarkerStyle = new PictureMarkerStyle();
						var positionStr:String = item.location;
						if (positionStr != null && positionStr.split(",").length == 2) {
							var positions:Array = positionStr.split(",");
							item.x = Number(positions[0]);
							item.y = Number(positions[1]);
							if ("typeIDs" in item && item.typeIDs != null){
								var resourceInfo:ResourceInfo = ResourceManagerEx.FindResource(item.typeIDs);
								if (resourceInfo != null) {
									picMarkStyle.source = resourceInfo.cls;
								}
							} 
							if (picMarkStyle.source == null){
								picMarkStyle.source = ResourceManagerEx.FindResource("lcnor").cls;
							}
							var feature:Feature = new Feature(new GeoPoint(item.x, item.y), picMarkStyle, item);
							feature.addEventListener(MouseEvent.CLICK, featureClickHandler);
							feature.id = item.id;
							feature.buttonMode = true;
							feature.attributes = item;
							markLayer.addFeature(feature);
							
							var textType:TextStyle =  FeatureLayerUtil.getTextStyle(" " + item.name + " ");
							textType.yOffset = -10;
							var textFeature:Feature = new Feature(new GeoPoint(item.x, item.y), textType);
							textFeature.id = "lab"+item.id;
							textFeature.buttonMode = true;
							markTextLayer.addFeature(textFeature);
						}
					}
				}
				markTextLayer.refresh();
			}
			
			//点击要素，结果列表定位显示
			private function featureClickHandler(event:MouseEvent):void
			{
				var feature:Feature = event.currentTarget as Feature;
				var attribute:Object = feature.attributes;
				var id:String = attribute.id;
				for each(var item:Object in resultList.dataProvider) {
					if (item.id == id) {
						resultList.selectedItem = item;
						resultList.ensureIndexIsVisible(resultList.dataProvider.getItemIndex(item));
					}
				}
				showFeatureDetail(attribute);
			}
			
			private function featureOverHander(event:MouseEvent):void
			{
				var feature:Feature = event.currentTarget as Feature;
				showFeatureDetail(feature);
			}
			
			private function featureOutHandler(event:MouseEvent):void
			{
				//移除弹出框及清除相应的内容
				
			}
			
			private function showFeatureDetail(data:Object):void
			{
				var queryObjectEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_OBJECT_DETAIL);
				var param:WaterEvaluaParam = new WaterEvaluaParam();
				param.id = data.id;
				param.name =  data["name"];
				param.x = data["x"];
				param.y = data["y"];
				queryObjectEvent.data = param;
				queryObjectEvent.dispatch();
			}
			
			//创建新下拉框
			private function createTypeDropDownControl(dataProvider:ArrayCollection):DropDownList
			{
				var dropDownList:DropDownList = new DropDownList();
				dropDownList.requireSelection = true;
				dropDownList.percentWidth = 100;
				dropDownList.height = 30;
				dropDownList.addEventListener(IndexChangeEvent.CHANGE, selectChangeHandler);
				dropDownList.labelField = "typeName";
				dropDownList.dataProvider = dataProvider;
				dropDownList.styleName = "SystemSelectorStyle";
				return dropDownList;
			}
			
			//各级分类条件选择发生变化
			private function selectChangeHandler(event:IndexChangeEvent):void
			{
				var currentDrop:DropDownList = event.currentTarget as DropDownList;
				//将要删除的下拉框，删除当前选择后面所有下拉框
				var removeDDs:Array = [];
				for(var i:int = 0 ; i < conditionGroup.numElements ; i++)
				{
					var childElement:DropDownList = conditionGroup.getElementAt(i) as DropDownList;
					if (currentDrop == childElement) {
						var j:int = i+1;
						//如果选择了第一项(全部)，需要把选择的水体类型也删除，因为后台返回的结果类型就是当前选择的水体类型
						if (currentDrop.selectedIndex == 0) {
							j = i ;
						}
						for ( ; j < conditionGroup.numElements ; j++)
						{
							removeDDs.push(conditionGroup.getElementAt(j));
						}
						break;
					}
				}
				for each(var item:IVisualElement in removeDDs) {
					conditionGroup.removeElement(item);
				}
				queryTypesAndDetailList();
			}
			
			
			protected function resultList_creationCompleteHandler(event:FlexEvent):void
			{
				resultList.addEventListener(ListCheckItemRendererEvent.SELECT_CHANGED, selectChangedHandler);
			}
			
			//结果列表，选择框选择和取消
			private function selectChangedHandler(event:ListCheckItemRendererEvent):void
			{
				QueryInfoLabel.includeInLayout = false;
				QueryInfoLabel.text = "";
				// 打开遮罩面板
				maskGroup.visible = true;
				var requestParam:MapQueryParam = new MapQueryParam();
				requestParam.id = event.data.id;
				requestParam.selected = event.data.selected;
				requestParam.index = event.data.index;
				requestParam.name = event.data.name;
				requestParam.x = event.data.x;
				requestParam.y = event.data.y;
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_STATION_REAL_INFO);
				queryEvent.data = requestParam;
				queryEvent.dispatch();
			}
			
			private function searchBt_clickHandler():void
			{
				if (searchBt.enabled == true){
					searchBt.enabled = false;
					conditionGroup.removeAllElements();
					queryTypesAndDetailList();
				}
			}
			
			//点击结果列表，根据当前对象是否在屏幕显示范围内，如果在，不移动地图，如果不在，居中显示
			protected function resultList_clickHandler(event:MouseEvent):void
			{
				var selectItem:Object = resultList.selectedItem;
				if (selectItem != null && "x" in selectItem && "y" in selectItem) {
					var x:Number = selectItem.x;
					var y:Number = selectItem.y;
					var point:Point2D = new Point2D(x, y);
					if (modelLocator.mapCtrl.level < 3) {
						modelLocator.mapCtrl.zoomToLevel(3, point);
					} else {
						modelLocator.mapCtrl.panTo(point);
					}
					showFeatureDetail(selectItem);
				}
			}
			
			//模块移除时触发,清除查询结果
			protected function removeWidget(event:BaseWidgetEvent):void
			{
				//清除查询条件，初始化界面面板
				clearLastQuery();
				modelLocator.mapCtrl.infoWindow.hide();
			}
			
			protected function widgetAddCompleteHandler(event:BaseWidgetEvent):void
			{
				//清除查询条件，重新查询 
				conditionGroup.removeAllElements();
				queryTypesAndDetailList();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="5" 
			  paddingTop="10" paddingBottom="5" paddingLeft="5" paddingRight="5">
		<!--<s:HGroup width="100%" horizontalAlign="center">
			<ns:ScrollPanel id="scrollButtonPanel" 
							horizontalCenter="0"
							hGap="15"  
							itemHeight="80" itemWidth="80"
							contentBackgroundAlpha="0.8" alpha="0.8"
							labelField="name"
							rowCount="6" columnCount="4"
							type="button"
							buttonStyleName="ScrollPanelItemStyle"
							ScrollPanelClick="searchBt_clickHandler()"/>
		</s:HGroup>
		<line:HLine />-->
		<s:HGroup width="100%" gap="5" verticalAlign="middle">
			<s:TextInput id="searchInput"  height="100%" prompt="请输入关键字" width="100%" enter="searchBt_clickHandler()"/> 
			<s:Button id="searchBt" width="45" height="25" buttonMode="true" label="查询" 
					  styleName="SubmitRegisterStyle"  click="searchBt_clickHandler()"/>
		</s:HGroup>
		<s:Label id="QueryInfoLabel"  styleName="SubmitRegisterInfo" includeInLayout="false"/>
		<s:VGroup id="ResultContentPanel" width="100%" height="100%" gap="10" visible="false">
			<s:Panel title="信息分类" width="100%" maxHeight="200" minHeight="60">
				<s:Scroller width="100%" height="100%" 
							verticalScrollPolicy="auto" horizontalScrollPolicy="off">
					<s:VGroup id="conditionGroup" width="100%" 
							  paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5"/>
				</s:Scroller>
			</s:Panel>
			<s:Panel title="信息列表" width="100%" height="100%">
				<s:List id="resultList" width="100%" height="100%"  labelField="name"  
						creationComplete="resultList_creationCompleteHandler(event)"
						borderVisible="false" 
						itemRenderer="sm.wegis.szy.renders.MapQueryListItemRenderer"
						click="resultList_clickHandler(event)"/>
				<s:Group id="maskGroup" width="100%" height="100%" visible="false">
					<s:Rect left="0" right="0" top="0" bottom="0" >
						<s:fill>
							<s:SolidColor color="0x979797" alpha="0.5"/>
						</s:fill>
					</s:Rect>
					<s:Label text="查询中..." color="0xFFFFFF" horizontalCenter="0" verticalCenter="0"/>
				</s:Group>
			</s:Panel>
		</s:VGroup>
	</s:VGroup>
</ns:WidgetBase>
