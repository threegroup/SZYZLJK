<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   width="100%" height="100%"
			   creationComplete="creationCompleteHandler(event)"
			   WidgetAddComplete="this_WidgetAddCompleteHandler(event)"
			   WidgetRemove="this_WidgetRemoveHandler(event)"
			   resize="widgetbase_resizeHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.adobe.serialization.json.JSON;
			import com.adobe.serialization.json.JSONEncoder;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.geometry.GeoPoint;
			import com.supermap.web.core.styles.PictureMarkerStyle;
			import com.supermap.web.core.styles.PredefinedMarkerStyle;
			import com.supermap.wegis.common.components.events.BaseWidgetEvent;
			import com.supermap.wegis.common.components.panel.contentPanel.ContentPanel;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.flexdiv.PanelContainer;
			import com.supermap.wegis.common.mappingEx.FeaturesLayerEx;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import sm.wegis.szy.core.baseclass.DottedLineClass;
			import sm.wegis.szy.core.utils.DataUtils;
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.utils.FeatureLayerUtil;
			import sm.wegis.szy.vo.ConstVO;
			import sm.wegis.szy.vo.SaveThemeMapVO;
			import sm.wegis.szy.vo.WaterCapacityParam;
			import sm.wegis.szy.vo.WaterEvaluaParam;
			
			import spark.components.Group;
			import spark.components.Panel;
			import spark.events.IndexChangeEvent;
			
			import widgets.waterevaluation.Items.CheckBoxGroup;
			import widgets.waterevaluation.Items.CommonGroup;
			import widgets.waterevaluation.Items.RadioButtonGroup;
			import widgets.waterevaluation.Items.TextGroup;
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			[Bindable]
			/**评价条件面板高度*/
			private var searchRiverPanelHeight:Number = 0;
			
			[Bindable]
			/**评价年份面板高度*/
			private var searchYearPanelHeight:Number = 0;
			
			[Bindable]
			/**评价类型面板高度*/
			private var searchTypePanelHeight:Number = 0;
			
			[Bindable]
			/**评价周期面板高度*/
			private var searchPeriodPanelHeight:Number = 0;
			
			/**默认显示字数*/
			private const LENGTH:Number = 5;
			
			/**pdf文档显示容器*/
			private var pdfPanel:ContentPanel = null;
			/**pdf文档*/
			private var pdf:PanelContainer = null;
			
			/**复选*/
			private static const CHECKBOX:String ="0";      
			/**单选*/
			private static const RADIOBUTTON:String ="1";  
			/**文本*/
			private static const TEXT:String ="2"; 
			
			/**评价类型*/
			private var searchTypeData:Object = {
				"nodeListSelect": [
					{
						"initialDisplay": "1",
						"isSelect": "1",
						"isShow": "1",
						"optionList": [
							{
								"dicOrder": "周",
								"optionName": "周",
								"optionValue": "week"
							},
							{
								"dicOrder": "旬",
								"optionName": "旬",
								"optionValue": "tenDays"
							},
							{
								"dicOrder": "月",
								"optionName": "月",
								"optionValue": "month"
							},
							{
								"dicOrder": "季度",
								"optionName": "季度",
								"optionValue": "quarterly"
							},
							{
								"dicOrder": "年",
								"optionName": "年",
								"optionValue": "year"
							},
							{
								"dicOrder": "丰水期 ",
								"optionName": "丰水期 ",
								"optionValue": "fengShui"
							},
							{
								"dicOrder": "枯水期 ",
								"optionName": "枯水期 ",
								"optionValue": "kuShui"
							},
							{
								"dicOrder": "平水期",
								"optionName": "平水期",
								"optionValue": "pingShui"
							}],
						"orderIndex": "3",
						"propertyDisplayType": "1",
						"propertyType": "3",
						"propertyId": "",
						"propertyName": "评价周期"
					}]
			};
			
			/**评价河流*/
			private var riverListData:Object = {
				"nodeListSelect": [
					{
						"initialDisplay": "1",
						"isSelect": "1",
						"isShow": "1",
						"optionList":[],
						"orderIndex": "1",
						"propertyDisplayType": "0",
						"propertyId": "",
						"propertyName": "评价河流",
						"propertyType": "1",
						"surveyFields": "",
						"surveyTable": ""
					}]
			};
			
			/**重绘布局*/
			
			/**水资源评价评价年份*/
			private var yearListData:Object = {
				"nodeListSelect": [
					{
						"hasCustom": "1",
						"customOptionValue":"begDate&endDate",
						"initialDisplay": "1",
						"isSelect": "1",
						"isShow": "1",
						"optionList": [],
						"orderIndex": "2",
						"propertyDisplayType": "1",
						"propertyType": "3",
						"propertyId": "",
						"propertyName": "评价年份"
					}]
			};
			
			/**水资源承载力评价年份，不需要定义时间*/
			private var capacityYearListData:Object = {
				"nodeListSelect": [
					{
						"initialDisplay": "1",
						"isSelect": "1",
						"isShow": "1",
						"optionList": [],
						"orderIndex": "2",
						"propertyDisplayType": "1",
						"propertyType": "3",
						"propertyId": "",
						"propertyName": "评价年份"
					}]
			};
			
			//水质评价专题图列表测试数据
			[Bindable]
			private var themeListData:ArrayCollection = new ArrayCollection([
				{name:"河流水质专题图"},
				{name:"水功能区水质专题图"},
				{name:"水质评价专题图1"},
				{name:"水质评价专题图2"},
				{name:"水质评价专题图3"},
				{name:"水质评价专题图4"},
				{name:"水质评价专题图5"},
				{name:"水质评价专题图6"}
			]);
			
			//水质评报告列表测试数据
			[Bindable]
			private var evaluationListData:ArrayCollection = new ArrayCollection([
				{name:"水质评价报告1", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告2", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告3", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告4", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告5", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告6", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告7", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告8", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告9", url:"assets/pdf/水环境质量评价方案.pdf"},
				{name:"水质评价报告10", url:"assets/pdf/水环境质量评价方案.pdf"}
			]);
			
			
			//水资源承载力专题图
			[Bindable]
			private var capacityThemeListData:ArrayCollection = new ArrayCollection([
				{name:"2012水资源承载力"},
				{name:"2013水资源承载力"},
				{name:"2014水资源承载力"},
				{name:"2015水资源承载力"}
			]);
			
			//水资源承载力报告 
			[Bindable]
			private var capacityEvaluationListData:ArrayCollection = new ArrayCollection([
				{name:"水资源承载力评价方案", url:"assets/pdf/水资源承载力评价方案.pdf"},
				{name:"水资源承载力评价方案1", url:"assets/pdf/水资源承载力评价方案.pdf"},
				{name:"水资源承载力评价方案2", url:"assets/pdf/水资源承载力评价方案.pdf"}
			]);
			
			private function updateUnitLayout():void
			{
				if(stage != null)
				{
					var factor:Number = stage.height/768;
					searchTypePanelHeight = 120;
					searchYearPanelHeight = 130;//150*factor;
					//searchRiverPanelHeight = 100*factor;
					searchPeriodPanelHeight = stage.stageHeight - 110 
						- searchYearPanelHeight 
						- searchTypePanelHeight; 
					//- searchRiverPanelHeight;
					
					var conArr:Array = [searchYearContainer];//[searchRiverContainer, searchYearContainer];
					var heightArr:Array = [searchYearPanelHeight];//[searchRiverPanelHeight, searchYearPanelHeight];
					for(var i:int = 0;i < conArr.length; i++)
					{
						if((conArr[i] as Group).numElements > 0)
						{
							(conArr[i].getElementAt(0) as CommonGroup).maxContentHeight = heightArr[i];
						}
					}
				}
			}
			
			protected function widgetbase_resizeHandler(event:ResizeEvent):void
			{
				// TODO Auto-generated method stub
				updateUnitLayout();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				queryWaterFunctionDestination();
				//计算条件面板高度
				updateUnitLayout();
				
				initEventListener();
				//queryRiverList();//初始化不再查询评价河流
				queryRiverYear(null);//直接查询所有河流评价年份
				
				//初始化评价类型列表
				decodeUI(searchTypeContainer, searchTypePanelHeight, searchTypeData);
			}
			
			//由于水功能区目标水质，只与waterbodyid有关，设置初始化就请求数据
			public function queryWaterFunctionDestination():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_WATER_FUNCTION_DESTINATION_INFO);
				queryEvent.dispatch();
			}
			
			/**清空条件内容*/
			public function clear():void
			{
				
			}
			
			//重置UI及数据
			private function resetUI():void
			{
				this.periodList.dataProvider = null;
				this.periodList.selectedIndex = -1;
				this.queryInfoText.text = "0";
				
				this.clearLastQuery();
			}
			
			/**根据需要组装河流数据*/
			private function decodeRiverData(targetData:Object, data:Array=null):void
			{
				targetData["nodeListSelect"][0]["optionList"]=[];
				if(data == null)
					return;
				
				if(data != null && data.length >0)
				{
					for each (var item:Object in data) 
					{
						var tf:Object = {};
						tf["dicOrder"] = item["River_name"];
						tf["optionName"] = item["River_name"];
						tf["optionValue"] = item["River_id"];
						targetData["nodeListSelect"][0]["optionList"].push(tf);
					}
				}
			}
			
			/**根据需要组装河流年份数据*/
			private function decodeYearData(targetData:Object, data:Array=null):void
			{
				targetData["nodeListSelect"][0]["propertyName"]="评价年份";
				targetData["nodeListSelect"][0]["optionList"]=[];
				if(data == null)
					return;
				
				if(data != null && data.length >0)
				{
					for each (var item:Object in data) 
					{
						var tf:Object = {};
						tf["dicOrder"] = item["year"];
						tf["optionName"] = item["year"];
						tf["optionValue"] = item["year"];
						targetData["nodeListSelect"][0]["optionList"].push(tf);
					}
				}
			}
			
			//解释界面数据 ,data包含：显示类型,属性类型,预定义列表信息
			private function decodeUI(con:Group, maxContentHeight:Number, data:Object=null):void
			{
				if(data == null)
					return;
				
				con.removeAllElements();
				con.setStyle("paddingBottom",5);
				con.setStyle("paddingTop",5);
				
				//生成常用查询条件
				if(data.hasOwnProperty("nodeListSelect") 
					&& data["nodeListSelect"] is Array 
					&& (data["nodeListSelect"] as Array).length >0)
				{
					var tempArr:Array = data["nodeListSelect"];
					//格式化条件组名
					tempArr = formatData(tempArr, "propertyName", false);
					
					//遍历数组，生成界面
					for (var i:int = 0; i < tempArr.length; i++) 
					{
						var item:Object = tempArr[i];
						
						//格式化预定义条件值
						if(item != null && item.hasOwnProperty("optionList")
							&& item["optionList"] is Array && (item["optionList"] as Array).length > 0)
						{
							item["optionList"] = formatData(item["optionList"], "optionName", true);
						}
						
						var gapLine:DottedLineClass = null;
						if(i <= tempArr.length - 2)
						{
							gapLine = new DottedLineClass();
							gapLine.percentWidth = 100;
							gapLine.height = 1;
						} 
						
						switch(item["propertyDisplayType"])
						{
							case TEXT:
							{
								var t:TextGroup = new TextGroup();
								t.data = item;
								con.addElement(t);
								if(gapLine)
									con.addElement(gapLine as IVisualElement);
								break;
							}
							case CHECKBOX:
							{
								var c:CheckBoxGroup = new CheckBoxGroup();
								c.data = item;
								c.isFirstItemSelected = true;
								c.maxContentHeight = maxContentHeight;
								con.addElement(c);
								if(gapLine)
									con.addElement(gapLine as IVisualElement);
								break;
							}
							case RADIOBUTTON:
							{
								var r:RadioButtonGroup = new RadioButtonGroup();
								r.percentWidth = 100;
								r.data = item;
								r.isFirstItemSelected = true;
								r.maxContentHeight = maxContentHeight;
								con.addElement(r);
								if(gapLine)
									con.addElement(gapLine as IVisualElement);
								break;
							}
							default:
							{
								break;
							}
						}
					}
				}
			}
			
			/**获取查询参数*/
			private function getQueryParam(con:Group):Array
			{
				var items:Array = [];
				for(var i:int = 0;i < con.numElements; i++)
				{
					items.push(con.getElementAt(i));
				}
				var temps:Array = [];
				if(items.length > 0)
				{
					for each (var item:CommonGroup in items) 
					{
						if(item != null)
						{
							if(item.isSelected)
							{
								if(item.selectContent.length == 0)
								{
									temps.push(item.getContent().value + "~" + item.getContent().maxValue);
									temps.push(item.data["customOptionValue"]);
								}
								else
								{
									temps.push(item.getContent().value);
								}
							}
						}
					}
				}
				return temps;
			}
			
			/**获取评价条件对象*/
			private function getQueryParamObject(con:Group):Object
			{
				var items:Array = [];
				for(var i:int = 0;i < con.numElements; i++)
				{
					items.push(con.getElementAt(i));
				}
				var tempOjb:Object = null;
				if(items.length > 0)
				{
					for each (var item:CommonGroup in items) 
					{
						if(item != null)
						{
							tempOjb = item;
						}
					}
				}
				return tempOjb;
			}
			
			//常用条件字段格式化
			public function formatData(dObj:Object, field:String="", isValue:Boolean=false):Array
			{
				if(dObj != null && dObj is Array)
				{
					var tempArray:Array = dObj as Array;
					if(tempArray != null)
					{
						var len:int = tempArray.length;
						if(len > 0)
						{
							for each (var item:Object in tempArray) 
							{
								if(item != null)
								{
									var value:String  = item[field]==null?" ":item[field];
									var strLen:int = value.length;
									if(strLen <= LENGTH)
									{
										if(isValue)
										{
											var dLen:Number = LENGTH - strLen;
											for (var i:int = 0; i < dLen; i++) 
											{
												value = value + "  ";
											} 
											
											item[field] = value;
										}
										else
										{
											item[field] = value + ":";
										}
									}
									else
									{
										if(isValue)
										{
											item["tip"] = value;
											item[field] = value.substr(0,LENGTH-1) + "..";
										}
										else
										{
											item["tip"] = value;
											item[field] = value.substr(0,LENGTH-1) + ":";
										}
									}
								}
							}
						}
						
						return tempArray;
					}
				}
				
				return null;
			}
			
			public function initEventListener():void{
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_RIVER_LIST_RESPONSE, queryRiverListResponseHandler],//评价河流
					[QueryEvent.QUERY_RIVER_YEAR_RESPONSE, queryRiverYearResponseHandler],//评价年份
					[QueryEvent.QUERY_RIVER_PERIOD_RESPONSE, queryRiverPeriodResponseHandler],//评价周期
					[QueryEvent.QUERY_RIVER_PERIOD_DATA_RESPONSE, queryRiverPeriodDataResponseHandler],//评价周期
					[QueryEvent.QUERY_DEFAULT_POINT_RESPONSE, queryDefaultPointResponseHandler],//获取默认测站
					[QueryEvent.QUERY_POLLUTION_POINT_RESPONSE, queryPollutionPointResponseHandler],//获取排污口
					[QueryEvent.QUERY_STATION_EVALUTION_INFO_RESPONSE, queryStationEvalutionInfoResponseHandler], // 获取对象信息和下方面板信息
					[QueryEvent.INVOKE_TIME_SPAN_CONDITION, invokeTimeSpanConditionHandler], 
					[QueryEvent.HIDE_WATER_WATCH_WIDGET, clearSystemHandler],
					[QueryEvent.QUERY_WATEREVALUATION_RESULT_RESPONSE, queryWaterEvaluationResultHandler],
					[QueryEvent.WATER_EVALUATION_THEME_MAP_RIVER_CLICK, waterEvaluationThemeMapRiverClickHandler],
					[QueryEvent.QUERY_RIVER_CAPACITY_YEAR_RESPONSE, queryRiverCapacityYearResponseHandler],//水资源承载力评价年份
					[SystemEvent.SYSTEM_RELOAD, systemReloadHandler]
				]);
				var eventObject:CairngormEventClass = new CairngormEventClass();
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
			}
			
			
			//查明河流列表
			private function queryRiverList():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_LIST);
				queryEvent.dispatch();
			}
			
			//查询水质评价结果
			private function queryWaterEvaluationResultHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
					}
				}
			}
			
			//河流点击，查询河流主要污染指标
			private function waterEvaluationThemeMapRiverClickHandler(event:CairngormEvent):void
			{
				var waterEvaluationParam:WaterEvaluaParam = event.data as WaterEvaluaParam;
				
				var modelWaterEvaluationParam:WaterEvaluaParam = modelLocator.waterEvaluaParam;
				if (modelWaterEvaluationParam != null && modelWaterEvaluationParam.periodId != null && modelWaterEvaluationParam.searchType != null) {
					waterEvaluationParam.periodId = modelWaterEvaluationParam.periodId;
					waterEvaluationParam.searchType = modelWaterEvaluationParam.searchType;
				}
				
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_MAIN_POLLUTION);
				queryEvent.data = waterEvaluationParam;
				queryEvent.dispatch();
				
				modelLocator.mapCtrl.infoWindow.hide();
			}
			
			
			private function queryRiverYear(riverList:Array):void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_YEAR);
				if(riverList != null && riverList.length >0)
				{
					var temps:Array = [];
					for each (var item:Object in riverList) 
					{
						temps.push(item["data"]["optionValue"]);
					}
					
					queryEvent.data = temps.join(",");
				}
				else
				{
					queryEvent.data = null;
				}
				queryEvent.dispatch();
			}
			
			//查明河流评价周期列表
			private function queryRiverPeriod():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_PERIOD);
				
				//				var tempData:Object = {};
				//评价河流IDs
				//				tempData["searchIds"] = "";//getQueryParam(searchRiverContainer).join(",");
				//评价年份
				var searchArray:Array = getQueryParam(searchYearContainer);
				//				tempData["searchYear"] = searchArray[0];
				modelLocator.waterEvaluaParam.searchYear =  searchArray[0];
				if(searchArray.length == 2)
				{
					//					tempData["searchType"] = searchArray[1];
					modelLocator.waterEvaluaParam.searchType = searchArray[1];
					queryEvaluaByPeriod();
				}
				else
				{
					//评价类型
					//					tempData["searchType"] = getQueryParam(searchTypeContainer)[0];
					modelLocator.waterEvaluaParam.searchType = getQueryParam(searchTypeContainer)[0];
				}
				
				if(searchArray.length == 1)
				{
					queryEvent.data = modelLocator.waterEvaluaParam;	
					queryEvent.dispatch();
				}
				
				//水功能区水质查询
				/* var queryWaterFunEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_WATER_FUNCTION_REGION);
				queryWaterFunEvent.dispatch(); */
			}
			
			//查明河流评价周期列表
			private function queryRiverPeriodData(periodId:String):void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_PERIOD_DATA);
				
				var tempData:Object = {};
				//评价河流IDs
				tempData["searchIds"] = "";//getQueryParam(searchRiverContainer).join(",");
				//评价周期ID
				tempData["searchPeriodId"] = periodId;
				//评价类型
				tempData["searchType"] = getQueryParam(searchTypeContainer)[0];
				
				queryEvent.data = tempData;	
				
				queryEvent.dispatch();
			}
			
			//查询评价河流列表响应
			private function queryRiverListResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
						if(targetList is Array)
							decodeRiverData(riverListData, targetList as Array);
						else
							decodeRiverData(riverListData,[targetList]);
						
						//decodeUI(searchRiverContainer, searchRiverPanelHeight, riverListData);
					}
				}
			}
			
			//查询评价河流年份列表响应
			private function queryRiverYearResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
						if(targetList is Array) {
							
							decodeYearData(yearListData, DataUtils.FieldSort(new ArrayCollection(targetList as Array), "year", true, true).toArray());
						}else {
							decodeYearData(yearListData,DataUtils.FieldSort(new ArrayCollection([targetList]), "year", true, true).toArray());
						}
						//此处派发默认选中项目评价年份
						decodeUI(searchYearContainer, searchYearPanelHeight, yearListData);
					}
				}
			}
			
			//查询水资源承载力评价年份列表响应
			private function queryRiverCapacityYearResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
						if(targetList is Array) {
							decodeYearData(capacityYearListData, DataUtils.FieldSort(new ArrayCollection(targetList as Array), "year", true, true).toArray());
						}else {
							decodeYearData(capacityYearListData,DataUtils.FieldSort(new ArrayCollection([targetList]), "year", true, true).toArray());
						}
						//水资源承载力评价年份界面
						decodeUI(capacitySearchYearContainer, searchYearPanelHeight, capacityYearListData);
					}
				}
			}
			
			
			//查询评价河流周期列表响应
			private function queryRiverPeriodResponseHandler(event:CairngormEvent):void
			{
				var tempArrCol:ArrayCollection = null;
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
						if(targetList is Array)
						{
							tempArrCol = new ArrayCollection(targetList as Array);
						}
						else
						{
							tempArrCol = new ArrayCollection([targetList]);
						}
						this.periodList.dataProvider = tempArrCol;
						this.queryInfoText.text = tempArrCol.length.toString();
					}
				}
			}
			
			//查询评价河流周期数据响应
			private function queryRiverPeriodDataResponseHandler(event:CairngormEvent):void
			{
				var tempArrCol:ArrayCollection = null;
				var result:Object = event.data;
				if (result != null && result.success == true) {
					var targetList:Object = result.attributes.targetList;
					if(targetList != null)
					{
						if(targetList is Array)
						{
							tempArrCol = new ArrayCollection(targetList as Array);
						}
						else
						{
							tempArrCol = new ArrayCollection([targetList]);
						}
						this.periodList.dataProvider = tempArrCol;
						this.queryInfoText.text = tempArrCol.length.toString();
					}
				}
			}
			
			//是否启用评价类型条件
			private function invokeTimeSpanConditionHandler(event:CairngormEvent):void
			{
				var isInvoke:Boolean = event.data["isInvokeCustom"];
				this.searchTypeContainer.enabled = !isInvoke;
				this.searchTypeContainer.alpha = isInvoke?0.5:1;
				this.resetUI();
			}
			
			private function queryStationEvalutionInfoResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
			}
			
			//查询水质评价周期列表
			protected function searchButton_clickHandler(event:MouseEvent):void
			{
				this.resetUI();
				hideEvalutionThemeType();
				modelLocator.waterEvaluationVO.themeMapType  = modelLocator.waterEvaluationVO.EvalutionThemeMapType;
				queryRiverPeriod();
			}
			
			//查询默认点成功
			public function queryDefaultPointResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				var featuresLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_FEATURE_LAYER, modelLocator.mapCtrl, 7, 1);
				featuresLayer.clear();
				featuresLayer.visible = false;
				if (result != null && result.success == true) {
					if (result.attributes.targetList !=null)
						var targetList:Object = result.attributes.targetList;
					
					for each(var item:Object in targetList) {
						var pictureMarkerStyle:PictureMarkerStyle = new PictureMarkerStyle();
						var typeIDs:String = item.typeIDs;
						pictureMarkerStyle.source = ResourceManagerEx.FindResource(typeIDs).cls;
						
						var positionStr:String = item.location;
						if (positionStr != null && positionStr.split(",").length == 2) {
							var positions:Array = positionStr.split(",");
							item.x = Number(positions[0]);
							item.y = Number(positions[1]);
							var geoPoint:GeoPoint = new GeoPoint(item.x, item.y);
							var feature:Feature = new Feature(geoPoint, pictureMarkerStyle, item);
							feature.id = item.id;
							feature.toolTip = item.name;
							feature.addEventListener(MouseEvent.CLICK, featureMouseClickHandler);
							feature.buttonMode = true;
							featuresLayer.addFeature(feature);
						}
					}
				}
				waterTypeBTB_valueCommitHandler();
			}
			
			//查询排污口成功
			public function queryPollutionPointResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				var featuresLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_POLLUTION_STATION_LAYER, modelLocator.mapCtrl, 7, 1);
				featuresLayer.visible = false;
				featuresLayer.clear();
				if (result != null && result.success == true) {
					if (result.attributes.targetList !=null)
						var targetList:Object = result.attributes.targetList;
					
					for each(var item:Object in targetList) {
						var pictureMarkerStyle:PictureMarkerStyle = new PictureMarkerStyle();
						var typeIDs:String = item.typeIDs;
						pictureMarkerStyle.source = ResourceManagerEx.FindResource(typeIDs).cls;
						
						var positionStr:String = item.location;
						if (positionStr != null && positionStr.split(",").length == 2) {
							var positions:Array = positionStr.split(",");
							item.x = Number(positions[0]);
							item.y = Number(positions[1]);
							var geoPoint:GeoPoint = new GeoPoint(item.x, item.y);
							var feature:Feature = new Feature(geoPoint, pictureMarkerStyle, item);
							feature.id = item.id;
							feature.toolTip = item.name;
							feature.addEventListener(MouseEvent.CLICK, pollutionStationMouseClickHandler);
							feature.buttonMode = true;
							featuresLayer.addFeature(feature);
						}
					}
				}
				waterTypeBTB_valueCommitHandler();
			}
			
			//排污口基本信息查询 
			private function pollutionStationMouseClickHandler(event:MouseEvent):void
			{
				var feature:Feature = event.currentTarget as Feature;
				var attribute:Object = feature.attributes;
				
				var param:WaterEvaluaParam = new WaterEvaluaParam();
				param.id = feature.id;
				param.name =  feature.attributes["name"];
				param.x = feature.attributes["x"];
				param.y = feature.attributes["y"];
				
				//点击站点，请求要素infowindow数据
				var queryObjectEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_OBJECT_DETAIL);
				queryObjectEvent.data = param;
				queryObjectEvent.dispatch();
			}
			
			private function featureMouseClickHandler(event:MouseEvent):void
			{
				var feature:Feature = event.currentTarget as Feature;
				var attribute:Object = feature.attributes;
				
				var param:WaterEvaluaParam = new WaterEvaluaParam();
				param.id = feature.id;
				param.name =  feature.attributes["name"];
				param.x = feature.attributes["x"];
				param.y = feature.attributes["y"];
				
				var waterEvaluaParam:WaterEvaluaParam = modelLocator.waterEvaluaParam;
				if (waterEvaluaParam != null && waterEvaluaParam.searchType != null && waterEvaluaParam.periodId != null) {
					param.periodId = waterEvaluaParam.periodId;
					param.searchType = waterEvaluaParam.searchType;
				}
				//点击站点，请求要素infowindow数据
				var queryObjectEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_OBJECT_DETAIL);
				queryObjectEvent.data = param;
				queryObjectEvent.dispatch();
				
				//点击站点，查询水质评价主要评价指标
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_STATION_EVALUTION_INFO);
				queryEvent.data = param;
				queryEvent.dispatch();
			}
			
			//清除
			public function clearSystemHandler(event:CairngormEvent):void
			{
				
			}
			
			//系统重新加载
			public function systemReloadHandler(event:CairngormEvent):void
			{
				if(pdfPanel != null)
				{
					pdfPanel.closeWindow();
				}
			}
			
			//查明默认缺省监测点，断面水功能区点,  查询排污口
			private function queryDefaultStation():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_DEFAULT_POINT);
				queryEvent.dispatch();
				
				//查询排污口
				queryEvent = new QueryEvent(QueryEvent.QUERY_POLLUTION_POINT);
				queryEvent.dispatch();
			}	
			
			//清除当前菜单操作结果
			private function clearLastQuery():void
			{
				//隐藏右下对象监测数据面板
				var waterWatchEvent:QueryEvent = new QueryEvent(QueryEvent.HIDE_WATER_EVALUTION_WIDGET);
				waterWatchEvent.dispatch();
				
				//隐藏河流及水功能区
				modelLocator.waterEvaluationVO.waterEvaluationResult = null;
				waterWatchEvent = new QueryEvent(QueryEvent.QUERY_WATER_FUNCTION_REGION);
				waterWatchEvent.dispatch();
				
				modelLocator.mapCtrl.infoWindow.hide();
			}
			
			protected function this_WidgetRemoveHandler(event:BaseWidgetEvent):void
			{
				//清除默认断面点
				var featuresLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_FEATURE_LAYER, modelLocator.mapCtrl);
				featuresLayer.clear();
				
				//清除排污口
				featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_POLLUTION_STATION_LAYER, modelLocator.mapCtrl);
				featuresLayer.clear();
				
				clearLastQuery();
				
				hideEvalutionThemeType();
			}
			
			//模块加载完成
			protected function this_WidgetAddCompleteHandler(event:BaseWidgetEvent):void
			{
				queryDefaultStation();
			}
			
			protected function periodList_changeHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var tempObject:Object = this.periodList.selectedItem;
				if(tempObject != null)
				{
					modelLocator.waterEvaluaParam.periodId = tempObject["id"];
					queryEvaluaByPeriod();
				}
			}
			
			//根据周期查询评价信息
			private function queryEvaluaByPeriod():void
			{
				var waterEvaluaParam:WaterEvaluaParam = modelLocator.waterEvaluaParam;
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_WATEREVALUATION_RESULT);
				queryEvent.data = waterEvaluaParam;
				queryEvent.dispatch();
			}
			
			//保存专题图
			protected function searchBt_clickHandler(event:MouseEvent):void
			{
				//当前有结果数据在展示
				if (modelLocator.waterEvaluationVO.waterEvaluationResult != null) {
					var saveThemeMapVO:SaveThemeMapVO = new SaveThemeMapVO();
					saveThemeMapVO.waterEvaluation = modelLocator.waterEvaluationVO;
					saveThemeMapVO.mapViewBounds = modelLocator.mapCtrl.viewBounds.bbox;
					saveThemeMapVO.waterEvaluaParam = modelLocator.waterEvaluaParam;
					var jsonString:String = com.adobe.serialization.json.JSON.encode(saveThemeMapVO);
					trace(jsonString);
				}
			}
			
			protected function themeList_changeHandler(event:MouseEvent):void
			{
				periodList.selectedIndex = -1;
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_SAVE_THEME_MAP);
				queryEvent.dispatch();
			}
			
			protected function evaluationList_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
					var list:List = event.currentTarget as List;
				var item:Object = list.selectedItem;
				if(item != null)
				{
					this.showPdfDoc(item["name"], item["url"]);
				}
			}
			
			/**显示pdf文档*/
			private function showPdfDoc(pdfTitle:String, pdfUrl:String):void
			{
				if(pdf == null)
				{
					pdf = new PanelContainer("pdf");
					pdf.percentWidth = 100;
					pdf.percentHeight = 100;
				}
				pdf.source = pdfUrl;
				
				if(pdfPanel == null)
				{
					pdfPanel = new ContentPanel();
					pdfPanel.depth = FlexGlobals.topLevelApplication.numElements + 10;
					pdfPanel.x = 300;
					pdfPanel.y = 70;
					pdfPanel.percentWidth = 100;
					pdfPanel.percentHeight = 100; 
					pdfPanel.enableMinimizeButton = false;
					pdfPanel.enableResizeButton =false;
					pdfPanel.enableIcon = false;
					pdfPanel.draggable = false;
					pdfPanel.unLoad = true;
				}
				pdfPanel.widgetState = ContentPanel.WIDGET_OPENED;
				pdfPanel.depth = FlexGlobals.topLevelApplication.numElements + 10;
				pdfPanel.widgetTitle = pdfTitle;
				pdfPanel.addElement(pdf);
				FlexGlobals.topLevelApplication.addElement(pdfPanel); 
				
				/* navigateToURL(new URLRequest(pdfUrl), "_blank"); */
			}
			
			protected function capacityNc_creationCompleteHandler(event:FlexEvent):void
			{
				queryRiverCapacityYear();
			}
			
			//隐藏水质评价专题图类型面板
			private function hideEvalutionThemeType():void
			{
				//隐藏水质评价专题类型切换面板
				var queryEvent:QueryEvent  = new QueryEvent(QueryEvent.SHOW_THEME_MAP_TYPE_PANEL_VISIBLE);
				queryEvent.data = false;
				queryEvent.dispatch();
			}
			
			private function queryRiverCapacityYear():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_CAPACITY_YEAR);
				queryEvent.dispatch();
			}
			
			//水资源承载力查询地图专题图数据
			protected function capacitySearchButton_clickHandler(event:Event):void
			{
				resetUI();
				//存储水质评价选择的专题图类型
				modelLocator.waterEvaluationVO.themeMapType = ConstVO.COUNTY_THEME_TYPE;
				modelLocator.waterCapacityParam = new WaterCapacityParam();
				var waterCapacityParam:WaterCapacityParam = modelLocator.waterCapacityParam;
				var searchArray:Array = getQueryParam(capacitySearchYearContainer);
				waterCapacityParam.searchYear = searchArray[0];
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_COUNTY_THEME_DATA);
				queryEvent.data = waterCapacityParam;
				queryEvent.dispatch();
			}
			
			protected function waterTypeBTB_valueCommitHandler():void
			{
				var breakLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_FEATURE_LAYER, modelLocator.mapCtrl, 7, 1);
				var pollutionLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.EVALUATION_POLLUTION_STATION_LAYER, modelLocator.mapCtrl, 7, 1);
				breakLayer.visible =false;
				pollutionLayer.visible = false;
				if (waterTypeBTB.selectedIndex == 0) {
					breakLayer.visible = true;
				} else if (waterTypeBTB.selectedIndex == 1) {
					pollutionLayer.visible = true;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="2">
		<s:ButtonBar id="waterTypeBTB" width="100%" dataProvider="{featureDetailInfos}"
					 valueCommit="waterTypeBTB_valueCommitHandler()"/>
		<mx:ViewStack id="featureDetailInfos" width="100%" height="100%">
			<s:NavigatorContent  label="水资源质量" width="100%" height="100%">
				<mx:Accordion width="100%" height="100%">
					<s:NavigatorContent  label="水质评价" width="100%" height="100%">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<!--<s:HGroup width="100%"
							horizontalAlign="left" verticalAlign="middle">
							<s:Label text="水质评价条件设置：" width="100%" height="25" 
							backgroundColor="#3385FF" fontSize="12" color="#FFFFFF"/>
							</s:HGroup>-->
							<!--<s:Line width="100%">
							<s:stroke>
							<s:SolidColorStroke color="#ACAB96" weight="1"/>
							</s:stroke>
							</s:Line>-->
							<!--<s:VGroup id="searchRiverContainer" width="100%" maxHeight="{searchRiverPanelHeight}">  
							</s:VGroup>-->
							<!--<s:Line width="100%">
							<s:stroke>
							<s:SolidColorStroke color="#ACAB96" weight="1"/>
							</s:stroke>
							</s:Line>-->
							<s:VGroup id="searchYearContainer" 
									  width="100%" height="{searchYearPanelHeight}">
							</s:VGroup>
							<s:Line width="100%">
								<s:stroke>
									<s:SolidColorStroke color="#ACAB96" weight="1"/>
								</s:stroke>
							</s:Line>
							<s:VGroup id="searchTypeContainer"  width="100%" height="{searchTypePanelHeight}">
							</s:VGroup>
							<s:Line width="100%">
								<s:stroke>
									<s:SolidColorStroke color="#ACAB96" weight="1"/>
								</s:stroke>
							</s:Line>
							<!--<s:VGroup id="periodContainer" width="100%" height="{searchPeriodPanelHeight}" gap="2"
							horizontalAlign="center" verticalAlign="middle">-->
							<s:VGroup id="periodContainer" width="100%" height="100%" gap="2"
									  horizontalAlign="center" verticalAlign="middle">
								<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
									<s:Label verticalAlign="middle" text="周期列表:" fontWeight="normal"/>
									<s:Label verticalAlign="middle" text="共"/>
									<s:Label id="queryInfoText" verticalAlign="middle" color="#FF0000"  text="0"/>
									<s:Label verticalAlign="middle" text="条记录"/>
									<s:Spacer width="100%"/>
									<s:Button id="deduceButton" width="45" height="25" buttonMode="true" label="推演" 
											  styleName="SubmitRegisterStyle"/>
									<s:Button id="searchButton" width="45" height="25" buttonMode="true" label="查询" 
											  styleName="SubmitRegisterStyle" click="searchButton_clickHandler(event)"/>
								</s:HGroup> 
								<s:List id="periodList" width="100%" height="100%" borderVisible="false"
										horizontalScrollPolicy="off" itemRenderer="sm.wegis.szy.renders.PeriodListItemRenderer"
										click="periodList_changeHandler(event)"/>
							</s:VGroup>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="水质评价专题图" width="100%" height="100%">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<s:HGroup width="100%" verticalAlign="middle" gap="5">
								<s:TextInput prompt="请输入专题名称" width="100%"/> 
								<s:Button id="searchBt" buttonMode="true" width="45" height="25" label="保存" 
										  toolTip="保存当前水质评价结果专题图" click="searchBt_clickHandler(event)"
										  styleName="SubmitRegisterStyle"/>
							</s:HGroup>
							<s:Line width="100%">
								<s:stroke>
									<s:SolidColorStroke color="#ACAB96" weight="1"/>
								</s:stroke>
							</s:Line>
							<s:List id="themeList" width="100%" height="100%" borderVisible="false"
									horizontalScrollPolicy="off" 
									dataProvider="{themeListData}"
									click="themeList_changeHandler(event)"
									itemRenderer="sm.wegis.szy.renders.ThemeListItemRenderer"/>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent  label="水质评价报告" width="100%" height="100%">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<s:List id="evaluationList" width="100%" height="100%" borderVisible="false"
									horizontalScrollPolicy="off" 
									dataProvider="{evaluationListData}"
									change="evaluationList_changeHandler(event)"
									itemRenderer="sm.wegis.szy.renders.EvaluationListItemRenderer"/>
						</s:VGroup>
					</s:NavigatorContent>
				</mx:Accordion>
			</s:NavigatorContent>	
			<s:NavigatorContent id="capacityNc"  label="水资源承载力" width="100%" height="100%" >
				<mx:Accordion width="100%" height="100%">
					<s:NavigatorContent  label="水资源承载力评价" width="100%" height="100%"
										 creationComplete="capacityNc_creationCompleteHandler(event)">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<s:VGroup id="capacitySearchYearContainer"  width="100%" >
							</s:VGroup>
							<s:Line width="100%">
								<s:stroke>
									<s:SolidColorStroke color="#ACAB96" weight="1"/>
								</s:stroke>
							</s:Line>
							<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
								<s:Button id="capacitySearchButton" width="45" height="25" buttonMode="true" label="查询" 
										  styleName="SubmitRegisterStyle" click="capacitySearchButton_clickHandler(event)"/>
							</s:HGroup> 
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="水资源承载力专题图" width="100%" height="100%">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<s:HGroup width="100%" verticalAlign="middle" gap="5">
								<s:TextInput prompt="请输入专题名称" width="100%"/> 
								<s:Button id="capacitySearchBt" buttonMode="true" width="45" height="25" label="保存" 
										  toolTip="保存当前水资源承载力专题图" click="searchBt_clickHandler(event)"
										  styleName="SubmitRegisterStyle"/>
							</s:HGroup>
							<s:Line width="100%">
								<s:stroke>
									<s:SolidColorStroke color="#ACAB96" weight="1"/>
								</s:stroke>
							</s:Line>
							<s:List id="capacityThemeList" width="100%" height="100%" borderVisible="false"
									horizontalScrollPolicy="off" 
									dataProvider="{capacityThemeListData}"
									click="capacitySearchButton_clickHandler(event)"
									itemRenderer="sm.wegis.szy.renders.ThemeListItemRenderer"/>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent  label="水资源承载力报告" width="100%" height="100%">
						<s:VGroup width="100%" height="100%"
								  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3">
							<s:List id="capacityEvaluationList" width="100%" height="100%" borderVisible="false"
									horizontalScrollPolicy="off" 
									dataProvider="{capacityEvaluationListData}"
									change="evaluationList_changeHandler(event)"
									itemRenderer="sm.wegis.szy.renders.EvaluationListItemRenderer"/>
						</s:VGroup>
					</s:NavigatorContent>
				</mx:Accordion>
			</s:NavigatorContent>	
		</mx:ViewStack>
	</s:VGroup>
</ns:WidgetBase>