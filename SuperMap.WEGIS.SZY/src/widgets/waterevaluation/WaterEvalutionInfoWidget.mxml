<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   xmlns:line="sm.wegis.szy.components.line.*"
			   xmlns:drodown="sm.wegis.szy.components.drodown.*"
			   width="100%" 
			   creationComplete="initWidget(event)"
			   WidgetRemove="widgetRemoveHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.supermap.web.core.Point2D;
			import com.supermap.wegis.common.components.events.BaseWidgetEvent;
			import com.supermap.wegis.common.components.mapCtrl.MapCtrl;
			import com.supermap.wegis.common.core.hashTable.HashTable;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			
			import flashx.textLayout.formats.Direction;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.core.UITextFormat;
			import mx.events.FlexEvent;
			
			import sm.wegis.szy.events.DropDownPanelEvent;
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.renders.CapacityDetailItemRenderer;
			import sm.wegis.szy.renders.CapacityLocationItemRenderer;
			import sm.wegis.szy.renders.DataGroupCheckItemrenderer;
			import sm.wegis.szy.renders.HistoryLineRender;
			import sm.wegis.szy.renders.IndexOrderRender;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.vo.ConstVO;
			import sm.wegis.szy.vo.GridColumnInfo;
			import sm.wegis.szy.vo.WaterCapacityParam;
			
			import spark.components.DataGrid;
			import spark.components.gridClasses.GridColumn;
			import spark.components.gridClasses.GridSelectionMode;
			import spark.events.GridEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			private const  SHOW:String = "show";
			private const  HIDE:String = "hide";
			
			private const MaxHeight:int = 200;
			
			private const CONTRACT:String = "收缩";
			private const EXPAND:String = "展开";
			
			/**当前所有监测指标*/
			[Bindable]
			private var watchIndexs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			/**模型定位器*/
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			//---DataGrid容器------
			private var dgContainer:HashTable = new HashTable();
			
			protected function initWidget(event:FlexEvent):void
			{
				initListener();
				
				initDataGrid();
				
//				switchDataGrid(ConstVO.WATER_EVALUATION_TYPE);
			}
			
			/**初始化事件监听*/
			private function initListener():void
			{
				var eventObject:CairngormEventClass = new CairngormEventClass();
				/**事件列表*/
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_STATION_EVALUTION_INFO_RESPONSE, queryStationEvalutionInfoResponseHandler],//响应查询结果
					[QueryEvent.GET_XZQ_CONDITION_RESPONSE, getXZQConditionHandler],//显示行政区承载力情况统计表
					[QueryEvent.GET_RIVER_WATER_FOUNCTION_CONDITION_RESPONSE, getRiverWaterFunctionConditionHandler],//河流水功能区水质达标率及污染物入河量情况统计表
					[QueryEvent.GET_WATER_FOUNCTION_ITEM_VALUE_RESPONSE, getWaterFounctionItemValueHandler],//点击水功能区，详情列，显示水功能区水质达标率及污染物入河量详情
					[QueryEvent.GET_PWK_DETAIL_RESPONSE, getPWKDetailHandler],//水功能区排污口污染物入河量详情
					[QueryEvent.HIDE_WATER_EVALUTION_WIDGET, clearSystemHandler]//隐藏容器面板
				]);
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
				
				//响应系统清除功能
				CairngormEventManager.getInstance().attachSingleEvent(new CairngormEventClass(SystemEvent.CLEAR_SYSTEM, clearSystemHandler));
				
				//切换系统
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.SYSTEM_RELOAD	, systemReloadHandler);
			}
			
			/**解码表格字段*/
			private function decodeDatagridField(cols:Array):Array
			{
				var tempCols:Array = [];
				if(cols != null && cols.length > 0)
				{
					for each(var col:Object in cols)
					{
						var isMK:int = col["isMainKey"];
						if(isMK == 1 || isMK == -1)
						{
							tempCols.push(col);
						}
					}
				}
				return tempCols;
			}
			
			/**切换表格*/
			private function switchDataGrid(dgSrc:Object):void
			{
				this.dgGroup.removeAllElements();
				var dgKey:String = dgSrc["key"];
				var dg:DataGrid = getDataGrid(dgSrc);
				fadeEffect.target = dg;//为切换的表格增加渐变特效
				this.dgGroup.addElement(dg);
				if(dgKey != ConstVO.WATER_EVALUATION_TYPE)
				{
					dg.dataProvider = new ArrayCollection(dgSrc["nodeList"]);
					this.currentState = SHOW;
				}
			}
			
			/**获取表格*/
			private function getDataGrid(dgSrc:Object):DataGrid
			{
				var key:String = dgSrc["key"];
				var dg:DataGrid;
				if(dgContainer.containsKey(key))
				{
					dg = dgContainer.find(key) as DataGrid;
				} else {
					var dg:DataGrid = createDataGrid(dgSrc);
					dg.name = key;
					dgContainer.add(key, dg);
				}	
				return dg;
			}
			
			/**创建DataGrid内容*/
			private function createDataGrid(contentData:Object):DataGrid
			{
				var dg:DataGrid = new DataGrid();
				dg.addEventListener(GridEvent.GRID_CLICK, drillGridClickHandler);
				dg.percentWidth = 100;
				dg.percentHeight = 100;
				dg.sortableColumns = false;
				dg.setStyle("borderVisible",false);
				dg.selectionMode = GridSelectionMode.SINGLE_CELL;
				dg.columns = new ArrayCollection([]);
				
				//用于计算表头宽度
				var uiTextFormat:UITextFormat = new UITextFormat(systemManager);
				uiTextFormat.antiAliasType = AntiAliasType.NORMAL;
				uiTextFormat.gridFitType =GridFitType.NONE;
				uiTextFormat.direction =Direction.LTR;
				var textLine:TextLineMetrics;
				//根据返回结果创建需要显示的列
				if(contentData.hasOwnProperty("propFields"))
				{
					var headerList:Array = decodeDatagridField(contentData["propFields"] as Array);
					if(headerList != null && headerList.length > 0)
					{
						for each(var item:Object in headerList)
						{
							var column:GridColumn = new GridColumn();
							dg.columns.addItem(column);
							column.dataField = item["fieldKey"];
							var headerText:String = item["fieldName"].toString();
							column.headerText = headerText.replace(/\^/g,"\n");
							if("colWidth" in item && parseInt(item["colWidth"])  > 0)
							{
								column.width = parseInt(item["colWidth"]);
							}
							else
							{
								//包含换行符,不包含列KV描述，需要动态计算
								if(headerText.search("^") != -1)
								{
									var headerArr:Array = headerText.split("^"); 
									column.width = 0;
									for each(var headerItem:String in headerArr)
									{
										textLine = uiTextFormat.measureText(headerItem);
										if(column.width < textLine.width)
										{
											column.width = textLine.width;
										}
									}
									column.width += 20;
								}
							} 
							
							var isMK:int = item["isMainKey"];
							if(isMK == -1)//详情操作列表
							{
								var detailColFactory:ClassFactory = new ClassFactory(CapacityDetailItemRenderer);
								column.itemRenderer = detailColFactory;
							}
						}
						
						//在表格的首列添加定位操作列
						var operateCol:GridColumn = new GridColumn();
						var locationColFactory:ClassFactory = new ClassFactory(CapacityLocationItemRenderer);
						operateCol.itemRenderer = locationColFactory; 
						operateCol.dataField = "OPERATION";
						operateCol.headerText = "操作";
						operateCol.sortable = false;
						textLine = uiTextFormat.measureText(operateCol.headerText);
						operateCol.width = textLine.width + 20;
						dg.columns.addItemAt(operateCol, 0);
						
						//在表格最后添加空白列
						var blankColumn:GridColumn = new GridColumn();
						var blankColFactory:ClassFactory = new ClassFactory(DefaultGridItemRenderer);
						blankColumn.itemRenderer = blankColFactory; 
						blankColumn.dataField = "";
						blankColumn.headerText = "";
						blankColumn.minWidth = 0;
						blankColumn.width = NaN;
						blankColumn.sortable = false;
						dg.columns.addItem(blankColumn);
					}
				}
				return dg;
			} 
			
			/**初始化水资源承载力相关表*/
			private function initDataGrid():void
			{
				var dg:DataGrid = null;
				//				for each(var dgSrc:Object in CapacityDataSource.dgCol)
				//				{
				//					var dgKey:String = dgSrc["key"];
				//					if(dgKey != ConstVO.WATER_EVALUATION_TYPE)
				//					{
				//						dg = createDataGrid(CapacityDataSource.getDgSource(dgKey));
				//						dg.name = dgKey;
				//					}
				//					else
				//					{
				//初始化，测站水质评价主要评价指标表格列，根据配置文件创建
				
				var dgKey:String = ConstVO.WATER_EVALUATION_TYPE;
				dg = new DataGrid();
				dg.addEventListener(GridEvent.GRID_CLICK, normalGridClickHandler);
				dg.name = dgKey;
				dg.percentWidth = 100;
				dg.percentHeight = 100;
				dg.sortableColumns = false;
				dg.setStyle("borderVisible",false);
				dg.selectionMode = GridSelectionMode.SINGLE_CELL;
				dg.columns = new ArrayCollection([]);
				
				var colConfigParam:String = modelLocator.systemInfo.waterEvaluationGridColumn;
				var colConfigs:Array = colConfigParam.split(",");
				var column:GridColumn;
				for each(var item:String in colConfigs) {
					var items:Array = item.split(":");
					if (items.length >= 2) {
						column	= new GridColumn();
						if (items[1] == "index") {
							column.headerText = "序号";
							column.itemRenderer = new ClassFactory(IndexOrderRender);
						} else if (items[1] == "history") {
							column.headerText = "历史情况";
							column.itemRenderer = new ClassFactory(HistoryLineRender);
						} else {
							column.headerText = items[0];
							column.dataField = items[1];
						}
						if (items.length == 3) {
							column.width = items[2];
						}
						dg.columns.addItem(column);
					}
				}
				//					}
				dgContainer.add(dgKey, dg);
				//			}
			}
			
			//点击对象表格行，定位要素
			protected function normalGridClickHandler(event:GridEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				if (event.rowIndex > -1 && event.rowIndex < grid.dataProvider.length)
				{
					//地图定位
					var selectedItem:Object = grid.selectedItem;
					if ("x" in selectedItem && "y" in selectedItem) {
						var point:Point2D = new Point2D(selectedItem.x, selectedItem.y);
						if (modelLocator.mapCtrl.level < 3) {
							modelLocator.mapCtrl.zoomToLevel(3, point);
						} else {
							modelLocator.mapCtrl.panTo(point);
						}
					}
				}
			}
			
			//点击水资源承载力表格，钻取
			protected function drillGridClickHandler(event:GridEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				if (event.rowIndex > -1 && event.rowIndex < grid.dataProvider.length && event.columnIndex == 1 
					&& CapacityDataSource.isShowDetail == false)
				{
					if(CapacityDataSource.dataLevel <= 1)
					{
						CapacityDataSource.dataLevel++;
						
						this.homeImage.visible = this.returnImage.visible = true;
						//						var dgSrc:Object = CapacityDataSource.dgCol[CapacityDataSource.dataLevel];
						//						this.switchDataGrid(dgSrc["key"]);
						//						this.panel.title = dgSrc["name"];
						
						//点击河流列表，请求水功能区水质达标率及污染物入河量详情
						var queryEvent:QueryEvent;
						var selectItem:Object = grid.dataProvider.getItemAt(event.rowIndex);
						var waterEvaluaParam:WaterCapacityParam = modelLocator.waterCapacityParam;
						if (CapacityDataSource.dataLevel == 1){
							waterEvaluaParam.riverIds = selectItem["code"];
							queryEvent  = new QueryEvent(QueryEvent.GET_RIVER_WATER_FOUNCTION_CONDITION);
						}
						
						//水功能区排污口污染物入河量详情
						if (CapacityDataSource.dataLevel == 2) {
							waterEvaluaParam.waterFunctionId = selectItem["funCode"];
							queryEvent  = new QueryEvent(QueryEvent.GET_PWK_DETAIL);
						}
					
						if (queryEvent != null) {
							queryEvent.data = waterEvaluaParam;
							queryEvent.dispatch();
						}
					}
				}
			}
			
			/**清除所有表中数据*/
			private function clearDataGrid():void
			{
				//清空哈希表中的数据
				if(dgContainer.size>0)
				{
					var keySet:Array = dgContainer.getKeySet();
					if(keySet != null && keySet.length > 0)
					{
						for(var i:int=0;i<keySet.length;i++)
						{
							if(dgContainer.find(keySet[i]) is DataGrid)
							{
								var dg:DataGrid = dgContainer.find(keySet[i]) as DataGrid;
								dg.dataProvider = null;
							}
						}
					}
				}
			}
			
			//用户或子系统发生变化，刷新数据
			private function systemReloadHandler(event:CairngormEvent):void
			{
				//此处添加模块UI及逻辑初始化功能
				this.resetUI();
			}
			
			//系统初始化或系统切换之后重置UI
			private function resetUI():void
			{
				if(this.currentState != HIDE)
				{
					this.currentState = HIDE;
				}
				clearAllResult();
			}
			
			//响应系统清除
			private function clearSystemHandler(event:CairngormEvent):void
			{
				//暂定不重置UI
				this.resetUI();
			}
			
			/**清除所有结果*/
			private function clearAllResult():void
			{
				clearDataGrid();
				hideInfoWidow();
			}
			
			/**清除地图弹出面板*/
			private function hideInfoWidow():void
			{
				var map:MapCtrl = modelLocator.mapCtrl;
				if(map.infoWindow.content != null)
				{
					map.infoWindow.content = null;
				}
				map.infoWindow.hide();
			}
			
			/**显示行政区承载力情况统计表*/
			private function getXZQConditionHandler(event:QueryEvent):void
			{
				//点击地图水功能区重置级别及钻取按钮状态
				CapacityDataSource.dataLevel = 0;
				this.homeImage.visible = this.returnImage.visible = false;
				
				//切换数据表格内容
				var dgSrc:Object = event.data;
				this.switchDataGrid(dgSrc);
				this.panel.title = dgSrc["name"];
			}
			
			/**河流水功能区水质达标率及污染物入河量情况统计表*/
			private function getRiverWaterFunctionConditionHandler(event:QueryEvent):void
			{
				var dgSrc:Object = event.data;
				this.switchDataGrid(dgSrc);
				this.panel.title = dgSrc["name"];
			}
			
			/**水功能区水质达标率及污染物入河量详情*/
			private function getWaterFounctionItemValueHandler(event:QueryEvent):void
			{
				var dgSrc:Object = event.data;
				this.switchDataGrid(dgSrc);
				this.panel.title = dgSrc["name"];
				
				CapacityDataSource.isShowDetail = true;
			}
			
			/**水功能区排污口污染物入河量详情*/
			private function getPWKDetailHandler(event:QueryEvent):void
			{
				var dgSrc:Object = event.data;
				this.switchDataGrid(dgSrc);
				this.panel.title = dgSrc["name"];
			}
			
			/**响应查询结果*/
			private function queryStationEvalutionInfoResponseHandler(event:QueryEvent):void
			{
				var resultData:Object = event.data;
				var gridColumnInfo:GridColumnInfo;
				if (resultData != null && resultData.success == true && "attributes" in resultData &&
					"targets" in resultData["attributes"] && resultData["attributes"]["targets"] is Array 
					&&  resultData["attributes"]["targets"].length > 0)
				{
					panel.title = resultData.name +"——评价指标";
					var gridDatas:Array=  resultData["attributes"]["targets"];
					getDataGrid(ConstVO.WATER_EVALUATION_TYPE).dataProvider = new ArrayCollection(gridDatas);
					this.switchDataGrid(ConstVO.WATER_EVALUATION_TYPE);
					this.currentState = SHOW;
				} else {
					this.currentState = HIDE;
				}
			}
			
			/**第一次显示类，按照默认配置列显示列数*/
			private function initDefaultWatchIndex():void
			{
				//如果没有列被选，按照默认列数，设置
				var selectCount:int = 0;
				var gridColumnInfo:GridColumnInfo;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectCount++;
					}
				}
				if (selectCount == 0) {
					var normalCols:int =  modelLocator.systemInfo.normalCols;
					normalCols =  normalCols > watchIndexs.length ? watchIndexs.length : normalCols;
					for (var index:int = 0; index < normalCols; index++) {
						gridColumnInfo = watchIndexs.getItemAt(index) as GridColumnInfo;
						gridColumnInfo.selected = true;
					}
				}
			}
			
			/**创建表格列*/
			private function createGridColumn():void
			{
				//清空表格列
				var resultGrid:DataGrid = getDataGrid(ConstVO.WATER_EVALUATION_TYPE);
				resultGrid.columns = new ArrayCollection(); 
				var gridColumnInfo:GridColumnInfo;
				var column:GridColumn;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						column = new GridColumn();
						column.dataField = gridColumnInfo.dataField;
						column.headerText = gridColumnInfo.dataField;
						column.minWidth = 100;
						resultGrid.columns.addItem(column);
					}
				}
				column = new GridColumn();
				column.dataField = "name";
				column.headerText = "名称";
				column.minWidth = 120;
				resultGrid.columns.addItemAt(column, 0);
			}
			
			//首页
			protected function homeImage_clickHandler(event:MouseEvent):void
			{
				CapacityDataSource.dataLevel = 0;
				CapacityDataSource.isShowDetail = false;
				this.homeImage.visible = this.returnImage.visible = false;
				var dgSrc:Object = CapacityDataSource.dgCol[CapacityDataSource.dataLevel];
				this.switchDataGrid(dgSrc);
				this.panel.title = dgSrc["name"];
			}
			
			//返回
			protected function returnImage_clickHandler(event:MouseEvent):void
			{
				if(CapacityDataSource.dataLevel >= 1)
				{
					if(!CapacityDataSource.isShowDetail)
					{
						CapacityDataSource.dataLevel--;
					}
					CapacityDataSource.isShowDetail = false;
					
					if(CapacityDataSource.dataLevel == 0)
					{
						this.homeImage.visible = this.returnImage.visible = false;
					}
					
					var dgSrc:Object = CapacityDataSource.dgCol[CapacityDataSource.dataLevel];
					this.switchDataGrid(dgSrc);
					this.panel.title = dgSrc["name"];
				}
			}
			
			//点击控制panel展开和收缩
			protected function stateImage_clickHandler(event:MouseEvent):void
			{
				panel.contentGroup.visible = panel.contentGroup.includeInLayout = !panel.contentGroup.includeInLayout;
				if ( panel.contentGroup.visible) {
					stateImage.toolTip = CONTRACT;
					resizeEffect.heightTo = MaxHeight;
					fadeEffect.alphaTo = 1;
				} else {
					stateImage.toolTip = EXPAND;
					resizeEffect.heightTo =  panel.controlBarGroup.height;
					fadeEffect.alphaTo = 0;
				}
				animateEffect.stop();
				animateEffect.play();
			}
			
			protected function watchList_creationCompleteHandler(event:FlexEvent):void
			{
				var classFactory:ClassFactory = new ClassFactory(DataGroupCheckItemrenderer);
				classFactory.properties = {watchIndexs:watchIndexs, maxCount:modelLocator.systemInfo.maxCols};
			}
			
			private function watchListLabelFunction(item:Object):String
			{
				var selectColumn:String = "";
				for each(var gridColumnInfo:GridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectColumn = selectColumn + gridColumnInfo.dataField;
						if (watchIndexs.getItemIndex(gridColumnInfo) != watchIndexs.length -1) {
							selectColumn = selectColumn + ",";
						}
					}
				}
				return selectColumn;
			}
			
			protected function watchList_changeHandler(event:DropDownPanelEvent):void
			{
				createGridColumn();
			}
			
			protected function widgetRemoveHandler(event:BaseWidgetEvent):void
			{
				resetUI();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="animateEffect" duration="500" effectEnd="stateImage.enabled=true;"
					effectStart="stateImage.enabled=false">
			<s:Fade id="fadeEffect"/>
			<s:Resize id="resizeEffect"  target="{panel}" />
			<s:Rotate id="rotateEffect" angleBy="180" autoCenterTransform="true"
					  target="{stateImage}"/>
		</s:Parallel>
	</fx:Declarations>
	<ns:states>
		<s:State name="hide"/>
		<s:State name="show"/>
	</ns:states>
	<s:Panel id="panel" width="100%" maxHeight="{MaxHeight}"
			 bottom.show="5" bottom.hide="0" height.hide="0">
		<s:controlBarContent>
			<s:Image id="homeImage" width="16" height="16" buttonMode="true" 
					 click="homeImage_clickHandler(event)" visible="false"
					 source="{ResourceManagerEx.FindResource('Home').cls}" toolTip="首页"/>
			<s:Image id="returnImage" width="16" height="16" buttonMode="true" 
					 click="returnImage_clickHandler(event)" visible="false"
					 source="{ResourceManagerEx.FindResource('Return').cls}" toolTip="返回"/>
			<s:Image id="stateImage" width="16" height="16" buttonMode="true" 
					 click="stateImage_clickHandler(event)"
					 source="{ResourceManagerEx.FindResource('Down').cls}" toolTip="收缩"/>
			<s:Spacer width="10"/>
		</s:controlBarContent>
		<s:Group id="dgGroup" width="100%" height="100%">
		</s:Group>
	</s:Panel>
</ns:WidgetBase>
