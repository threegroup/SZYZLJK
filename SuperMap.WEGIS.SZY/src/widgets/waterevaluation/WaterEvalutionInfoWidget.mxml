<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   xmlns:line="sm.wegis.szy.components.line.*"
			   xmlns:drodown="sm.wegis.szy.components.drodown.*"
			   width="100%" 
			   creationComplete="initWidget(event)"
			   WidgetRemove="widgetRemoveHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.supermap.web.core.Point2D;
			import com.supermap.wegis.common.components.events.BaseWidgetEvent;
			import com.supermap.wegis.common.components.mapCtrl.MapCtrl;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import sm.wegis.szy.events.DropDownPanelEvent;
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.renders.DataGroupCheckItemrenderer;
			import sm.wegis.szy.renders.HistoryLineRender;
			import sm.wegis.szy.renders.IndexOrderRender;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.vo.ConstVO;
			import sm.wegis.szy.vo.GridColumnInfo;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			
			private const  SHOW:String = "show";
			private const  HIDE:String = "hide";
			
			private const MaxHeight:int = 200;
			
			private const CONTRACT:String = "收缩";
			private const EXPAND:String = "展开";
			
			/**当前所有监测指标*/
			[Bindable]
			private var watchIndexs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			/**模型定位器*/
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			protected function initWidget(event:FlexEvent):void
			{
				initListener();
				//初始化，测站水质评价主要评价指标表格列，根据配置文件创建
				initGridColumns();
			}
			
			/**初始化事件监听*/
			private function initListener():void
			{
				var eventObject:CairngormEventClass = new CairngormEventClass();
				/**事件列表*/
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_STATION_EVALUTION_INFO_RESPONSE, queryStationEvalutionInfoResponseHandler],//响应查询结果
					[QueryEvent.HIDE_WATER_EVALUTION_WIDGET, clearSystemHandler]//隐藏容器面板
				]);
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
				
				//响应系统清除功能
				CairngormEventManager.getInstance().attachSingleEvent(new CairngormEventClass(SystemEvent.CLEAR_SYSTEM, clearSystemHandler));
				
				//切换系统
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.SYSTEM_RELOAD	, systemReloadHandler);
			}
			
			/**创建DataGrid内容*/
			/* private function createContent(contentData:Object):void
			{
			DataGridList.visible = true;
			gridHeaderWidth = 0;
			//根据字段列表创建列
			if(DataGridList.columns != null && DataGridList.columns.length >2)
			{
			}
			else
			{
			DataGridList.columns = new ArrayCollection([]);
			}
			
			//用于计算表头宽度
			var uiTextFormat:UITextFormat = new UITextFormat(systemManager);
			uiTextFormat.antiAliasType = AntiAliasType.NORMAL;
			uiTextFormat.gridFitType =GridFitType.NONE;
			uiTextFormat.direction =Direction.LTR;
			var textLine:TextLineMetrics;
			var columnIndices:Vector.<int> = new Vector.<int>();
			var sortColumn:GridColumn;
			//根据返回结果创建需要显示的列
			if(contentData.hasOwnProperty("resultHeaderList"))
			{
			var headerList:Array = contentData["resultHeaderList"] as Array;
			if(headerList != null && headerList.length > 0)
			{
			var column:GridColumn;
			if (headerList.length < DataGridList.columns.length)
			{
			DataGridList.columns = new ArrayCollection(DataGridList.columns.toArray().slice(0,headerList.length));
			}
			for each (var item:Object in headerList) 
			{
			if(item == null)
			{
			return;
			}
			if(DataGridList.columns.length > 0 && DataGridList.columns.length > headerList.indexOf(item) )
			{
			column	= DataGridList.columns.getItemAt(headerList.indexOf(item)) as GridColumn;
			column.itemRenderer = null;
			} 
			if(column == null)
			{
			column = new GridColumn();
			DataGridList.columns.addItem(column);
			}
			column.dataField = item["fieldKey"];
			column.sortable = item["isSortField"] != null ? true : false;
			
			if("isAsc" in item )
			{
			sortColumn = column;
			if(item["isAsc"].toString() == "1")
			{
			column.sortDescending = false;
			}else{
			column.sortDescending = true;
			}
			}
			
			var headerText:String = item["fieldName"].toString();
			column.headerText = headerText.replace(/\^/g,"\n");
			item["labelLength"] = column.headerText.length;
			if("colWidth" in item && parseInt(item["colWidth"])  > 0)
			{
			column.width = parseInt(item["colWidth"]);
			}else{
			//包含换行符
			if(headerText.search("^") != -1)
			{
			var headerArr:Array = headerText.split("^"); 
			column.width = 0;
			for each(var headerItem:String in headerArr)
			{
			textLine = uiTextFormat.measureText(headerItem);
			if(column.width < textLine.width)
			{
			column.width = textLine.width;
			}
			}
			column.width += 20;
			}
			} 
			gridHeaderWidth += column.width;
			column = null;
			}
			headerList.splice(1,0,{});
			}
			//动态添加列渲染器
			var preFactory:ClassFactory = DataGridList.itemRenderer as ClassFactory;
			if(preFactory.generator != BaseDataDetailPanelGridItemRenderer  
			|| preFactory.properties == null 
			|| !("headerList" in preFactory.properties) 
			|| preFactory.properties["headerList"] != headerList)
			{
			preFactory = new ClassFactory(BaseDataDetailPanelGridItemRenderer);
			preFactory.properties = {headerList:headerList};
			DataGridList.itemRenderer = preFactory;
			}
			}
			
			//在表格的末列添加操作列
			var operateCol:GridColumn = new GridColumn();
			var colFactory:ClassFactory = new ClassFactory(BaseDataOperationGridItemRenderer);
			colFactory.properties = {queryType:modelLocator.baseDataVO.searchRequestData.queryType};
			operateCol.itemRenderer = colFactory;
			operateCol.dataField = "OPERATION";
			operateCol.headerText = "操作";
			operateCol.sortable = false;
			
			textLine = uiTextFormat.measureText(operateCol.headerText);
			operateCol.width = textLine.width + 20;
			gridHeaderWidth += operateCol.width;
			DataGridList.columns.addItemAt(operateCol,1);
			
			//在表格最后添加空白列
			var blankColumn:GridColumn = new GridColumn();
			colFactory = new ClassFactory(DefaultGridItemRenderer);
			blankColumn.itemRenderer = colFactory; 
			blankColumn.dataField = "";
			blankColumn.headerText = "";
			blankColumn.minWidth = 0;
			blankColumn.width = NaN;
			blankColumn.sortable = false;
			
			DataGridList.columns.addItem(blankColumn);
			
			//绑定数据源
			if(this.DataGridList.dataProvider != null)
			{
			this.DataGridList.dataProvider = null;
			}
			
			columnIndices.push(DataGridList.columns.getItemIndex(sortColumn));
			DataGridList.columnHeaderGroup.visibleSortIndicatorIndices = columnIndices;
			} */
			
			//初始化，测站水质评价主要评价指标表格列，根据配置文件创建
			private function initGridColumns(showType:String=""):void
			{
				switch(showType)
				{
					case ConstVO.AREA_CAPACITY_TYPE:
					{
						
						break;
					}
					case ConstVO.WATER_QUALITY_TYPE:
					{
						
						break;
					}
					case ConstVO.WATER_POLLUTION_DETAIL_TYPE:
					{
						
						break;
					}
					case ConstVO.WATER_DRAIN_POLLUTION_DETAIL_TYPE:
					{
						
						break;
					}
					default:
					{
						var colConfigParam:String = modelLocator.systemInfo.waterEvaluationGridColumn;
						var colConfigs:Array = colConfigParam.split(",");
						if (resultGrid.columns == null) {
							resultGrid.columns = new ArrayList();
						}
						var column:GridColumn;
						for each(var item:String in colConfigs) {
							var items:Array = item.split(":");
							if (items.length >= 2) {
								column	= new GridColumn();
								if (items[1] == "index") {
									column.headerText = "序号";
									column.itemRenderer = new ClassFactory(IndexOrderRender);
								} else if (items[1] == "history") {
									column.headerText = "历史情况";
									column.itemRenderer = new ClassFactory(HistoryLineRender);
								} else {
									column.headerText = items[0];
									column.dataField = items[1];
								}
								if (items.length == 3) {
									column.width = items[2];
								}
								resultGrid.columns.addItem(column);
							}
						}
						break;
					}
				}
			}
			
			//用户或子系统发生变化，刷新数据
			private function systemReloadHandler(event:CairngormEvent):void
			{
				//此处添加模块UI及逻辑初始化功能
				this.resetUI();
			}
			
			//系统初始化或系统切换之后重置UI
			private function resetUI():void
			{
				if(this.currentState != HIDE)
				{
					this.currentState = HIDE;
				}
				clearAllResult();
			}
			
			//响应系统清除
			private function clearSystemHandler(event:CairngormEvent):void
			{
				//暂定不重置UI
				this.resetUI();
			}
			
			/**清除所有结果*/
			private function clearAllResult():void
			{
				resultGrid.dataProvider = null;
				hideInfoWidow();
			}
			
			/**清除地图弹出面板*/
			private function hideInfoWidow():void
			{
				var map:MapCtrl = modelLocator.mapCtrl;
				if(map.infoWindow.content != null)
				{
					map.infoWindow.content = null;
				}
				map.infoWindow.hide();
			}
			
			/**响应查询结果*/
			private function queryStationEvalutionInfoResponseHandler(event:QueryEvent):void
			{
				var resultData:Object = event.data;
				var gridColumnInfo:GridColumnInfo;
				if (resultData != null && resultData.success == true && "attributes" in resultData &&
					"targets" in resultData["attributes"] && resultData["attributes"]["targets"] is Array 
					&&  resultData["attributes"]["targets"].length > 0)
				{
					panel.title = resultData.name +"——评价指标";
					var gridDatas:Array=  resultData["attributes"]["targets"];
					resultGrid.dataProvider = new ArrayCollection(gridDatas);
					this.currentState = SHOW;
				} else {
					this.currentState = HIDE;
				}
			}
			
			/**第一次显示类，按照默认配置列显示列数*/
			private function initDefaultWatchIndex():void
			{
				//如果没有列被选，按照默认列数，设置
				var selectCount:int = 0;
				var gridColumnInfo:GridColumnInfo;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectCount++;
					}
				}
				if (selectCount == 0) {
					var normalCols:int =  modelLocator.systemInfo.normalCols;
					normalCols =  normalCols > watchIndexs.length ? watchIndexs.length : normalCols;
					for (var index:int = 0; index < normalCols; index++) {
						gridColumnInfo = watchIndexs.getItemAt(index) as GridColumnInfo;
						gridColumnInfo.selected = true;
					}
				}
			}
			
			/**创建表格列*/
			private function createGridColumn():void
			{
				//清空表格列
				resultGrid.columns = new ArrayCollection(); 
				var gridColumnInfo:GridColumnInfo;
				var column:GridColumn;
				for each(gridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						column = new GridColumn();
						column.dataField = gridColumnInfo.dataField;
						column.headerText = gridColumnInfo.dataField;
						column.minWidth = 100;
						resultGrid.columns.addItem(column);
					}
				}
				column = new GridColumn();
				column.dataField = "name";
				column.headerText = "名称";
				column.minWidth = 120;
				resultGrid.columns.addItemAt(column, 0);
			}
			
			//点击对象表格行，定位要素
			protected function resultGrid_gridClickHandler(event:GridEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				if (event.rowIndex > -1 && event.rowIndex < grid.dataProvider.length)
				{
					//地图定位
					var selectedItem:Object = grid.selectedItem;
					if ("x" in selectedItem && "y" in selectedItem) {
						var point:Point2D = new Point2D(selectedItem.x, selectedItem.y);
						if (modelLocator.mapCtrl.level < 3) {
							modelLocator.mapCtrl.zoomToLevel(3, point);
						} else {
							modelLocator.mapCtrl.panTo(point);
						}
					}
				}
			}
			
			//点击控制panel展开和收缩
			protected function stateImage_clickHandler(event:MouseEvent):void
			{
				panel.contentGroup.visible = panel.contentGroup.includeInLayout = !panel.contentGroup.includeInLayout;
				if ( panel.contentGroup.visible) {
					stateImage.toolTip = CONTRACT;
					resizeEffect.heightTo =  MaxHeight;
					fadeEffect.alphaTo = 1;
				} else {
					stateImage.toolTip = EXPAND;
					resizeEffect.heightTo =  panel.controlBarGroup.height;
					fadeEffect.alphaTo = 0;
				}
				animateEffect.stop();
				animateEffect.play();
			}
			
			protected function watchList_creationCompleteHandler(event:FlexEvent):void
			{
				var classFactory:ClassFactory = new ClassFactory(DataGroupCheckItemrenderer);
				classFactory.properties = {watchIndexs:watchIndexs, maxCount:modelLocator.systemInfo.maxCols};
			}
			
			private function watchListLabelFunction(item:Object):String
			{
				var selectColumn:String = "";
				for each(var gridColumnInfo:GridColumnInfo in watchIndexs) {
					if (gridColumnInfo.selected == true) {
						selectColumn = selectColumn + gridColumnInfo.dataField;
						if (watchIndexs.getItemIndex(gridColumnInfo) != watchIndexs.length -1) {
							selectColumn = selectColumn + ",";
						}
					}
				}
				return selectColumn;
			}
			
			protected function watchList_changeHandler(event:DropDownPanelEvent):void
			{
				createGridColumn();
			}
			
			protected function widgetRemoveHandler(event:BaseWidgetEvent):void
			{
				resetUI();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="animateEffect" duration="500" effectEnd="stateImage.enabled=true;"
					effectStart="stateImage.enabled=false">
			<s:Fade id="fadeEffect" target="{resultGrid}"   />
			<s:Resize id="resizeEffect"  target="{panel}" />
			<s:Rotate id="rotateEffect" angleBy="180" autoCenterTransform="true"
					  target="{stateImage}"/>
		</s:Parallel>
	</fx:Declarations>
	<ns:states>
		<s:State name="hide"/>
		<s:State name="show"/>
	</ns:states>
	<s:Panel id="panel" width="100%" maxHeight="{MaxHeight}" bottom.show="5" bottom.hide="0"
			 height.hide="0">
		<s:controlBarContent>
			<s:Image id="stateImage" width="16" height="16" buttonMode="true" 
					 click="stateImage_clickHandler(event)"
					 source="{ResourceManagerEx.FindResource('Down').cls}" toolTip="收缩"/>
			<s:Spacer width="10"/>
		</s:controlBarContent>
		<s:DataGrid id="resultGrid" width="100%" height="100%" maxHeight="200"  borderVisible="false"
					gridClick="resultGrid_gridClickHandler(event)" sortableColumns="false" >
		</s:DataGrid>
	</s:Panel>
</ns:WidgetBase>
