<?xml version="1.0" encoding="utf-8"?>
<Items:CommonGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:Items="widgets.waterevaluation.Items.*"
				   creationComplete="initGroup(event)"
				   xmlns:baseclass="sm.wegis.szy.core.baseclass.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.transData.search.SearchConditionsData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import sm.wegis.szy.events.QueryEvent;
			
			import spark.events.TextOperationEvent;
			
			/**自定义框间隔，如果没有预定义选项只有自定义框则为0，如果前面有预定义值则为预定义值设定间隔值*/
			[Bindable]
			private var tempGap:Number = 0;
			
			protected function initGroup(event:FlexEvent):void
			{
				if(content == null)
				{
					content = new SearchConditionsData();
					content.type = data["propertyType"];
					content.fields = data["surveyFields"];
					content.propertyDisplayType = data["propertyDisplayType"];
				}
				
				if(selectContent == null)
				{
					selectContent = new ArrayCollection([]);
				}
				
				// TODO Auto-generated method stub
				generateUI();
			}
			
			/**生成界面*/
			override public function generateUI():void
			{
				if(data != null)
				{
					var firstItem:int = 0;
					var tempArr:Array = data["optionList"] as Array;
					if(tempArr != null && tempArr.length > 0)
					{
						for each (var item:Object in tempArr) 
						{
							if(item.hasOwnProperty("optionName") 
								&& StringUtil.trim(item["optionName"]) != "")
							{
								var c:CheckBoxItem = new CheckBoxItem();
								c.width = itemWidth;
								c.data = item;
								c.label = item["optionName"];
								c.toolTip = item["tip"];
								c.addEventListener(MouseEvent.CLICK, clickHandler);
								container.addElement(c);
								
								if(firstItem == 0 && isFirstItemSelected)
								{
									c.selected = isFirstItemSelected;
									//保存选中项
									selectContent.addItem(c);
									isSelected = true;
									firstItem = -1;
								}
							}
						}
					}
					
					var len:int = container.numChildren;
					if(len <= 0 && containerPanel.numChildren >= 1)
					{
						//移除全选按钮
						containerPanel.removeElementAt(1);
						tempGap = 0;
					}
					else
					{
						tempGap = hGap;
					}
					
					if(data.hasOwnProperty("hasCustom") && data["hasCustom"])
					{
						if(data.hasOwnProperty("propertyType"))
						{
							switch(data["propertyType"])
							{
								case "2"://数值
								{
									this.currentState = "NumberState";
									break;
								}
								case "3"://日期
								{
									this.currentState = "DateState";
									break;
								}	
								default:
								{
									break;
								}
							}
						}
						
						//重设条件指标宽度
						resetLayout(true, this.width, tempArr, "optionName", container, true);
					}
					else
					{
						this.currentState = "NoCustomState";
						
						//重设条件指标宽度
						resetLayout(true, this.width, tempArr, "optionName", container, true);
					}
					
					//派发河流评价年份查询
					queryRiverYear(selectContent.toArray());
				}
			}
			
			/**获取条件内容*/
			override public function getContent():SearchConditionsData
			{
				if(selectContent != null && selectContent.length > 0)
				{
					//获取选中项内容
					for (var i:int = 0; i < selectContent.length; i++) 
					{
						if(i == 0)
							content.value = selectContent[i]["data"]["optionValue"];
						else
							content.value += "," + selectContent[i]["data"]["optionValue"];
					}
				}
				else
				{
					if(this.currentState == "NumberState")//数字
					{
						content.value = startNumber.text;
						content.maxValue = endNumber.text;
					}
					else if(this.currentState == "DateState")//日期
					{
						content.value = startDate.text;
						content.maxValue = endDate.text;
					}
				}
				
				return content;
			}
			
			//单选项单击事件
			private function clickHandler(event:MouseEvent):void
			{
				var c:CheckBoxItem = event.currentTarget as CheckBoxItem;
				if(c != null)
				{
					if(c.selected == true)
					{
						//清空自定义数据
						if(this.currentState == "NumberState")//数字
						{
							startNumber.text = "";
							endNumber.text = "";
						}
						else if(this.currentState == "DateState")//日期
						{
							startDate.text = "";
							endDate.text = "";
						}
						content.maxValue = "";
						content.hasCustom = "0";
						
						//保存选中项
						selectContent.addItem(c);
					}
					else
					{
						//删除选中项
						var index:int = selectContent.getItemIndex(c);
						if(index != -1)
							selectContent.removeItemAt(index);
					}
					
					 if(selectContent.length > 0)
					{
						isSelected = true;
						/* if(selectContent.length == container.numChildren)
						{
							AllSelected.selected = true;
						}
						else
						{
							AllSelected.selected = false;
						} */
					}
					else
					{
						isSelected = false;
						/* AllSelected.selected = false; */
					} 
					
					//派发河流评价年份查询
					queryRiverYear(selectContent.toArray());
				}
			}
			
			//查明河流评价年份
			private function queryRiverYear(riverList:Array):void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_YEAR);
				if(riverList != null && riverList.length >0)
				{
					var temps:Array = [];
					for each (var item:Object in riverList) 
					{
						temps.push(item["data"]["optionValue"]);
					}
					
					queryEvent.data = temps.join(",");
				}
				else
				{
					queryEvent.data = null;
				}
				queryEvent.dispatch();
			}
			
			//自定义文本内容发生改变(比如数值)
			protected function changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				var t:TextInput = event.currentTarget as TextInput;
				if(t != null)
				{
					if(StringUtil.trim(t.text) != "")
					{
						//首先判断是否为数字，可采用正则表达式
						//var reg:RegExp = /([1-9]\d*\.?\d*)|(0\.\d*[1-9])/g;
						if(!isNaN(parseFloat(t.text)))
						{
							//清除前面已经选择的项目
							clearAllSelected(container);
							//清除全选
							/* if(AllSelected)
								AllSelected.selected = false; */
							if(selectContent != null && selectContent.length > 0)
							{
								selectContent.removeAll();
							}
							
							isSelected = true;
							content.hasCustom = "1";
						}
						else
						{
							Alert.show("请输入数字！", "提示", Alert.OK, null, null, 
								ResourceManagerEx.FindResource("TIP").cls);
							t.text = "";
						}
					}
					
					if(startNumber.text == "" && endNumber.text == "")
					{
						isSelected = false;
					}
				}
			}
			
			//自定义日期内容改变
			protected function dateChangeHandler(event:CalendarLayoutChangeEvent):void
			{
				// TODO Auto-generated method stub
				var d:DateField = event.currentTarget as DateField;
				if(d != null)
				{
					if(d.text != "")
					{
						//这里暂时没有处理字符串是否为日期
						clearAllSelected(container);
						//清除全选
						/* if(AllSelected)
							AllSelected.selected = false; */
						if(selectContent != null && selectContent.length > 0)
						{
							selectContent.removeAll();
						}
						isSelected = true;
						content.hasCustom = "1";
					}
					
					if(startDate.text == "" && endDate.text == "")
					{
						isSelected = false;
					}
				}
			}
			
			//全选或反选
			/* protected function AllSelected_clickHandler(event:MouseEvent):void
			{
				//获取所有指标选项
				var num:int = container.numChildren;
				if(num >= 1)
				{
					var checkBoxList:Array = [];
					for (var i:int = 0; i < num; i++) 
					{
						var c:CheckBoxItem = container.getChildAt(i) as CheckBoxItem;
						checkBoxList.push(c);
					}
					
					selectContent.removeAll();
					
					//全选
					if(AllSelected.selected)
					{
						for each (var j:CheckBoxItem in checkBoxList) 
						{
							j.selected = true;
							selectContent.addItem(j);
						}
						
						//清空自定义数据
						if(this.currentState == "NumberState")//数字
						{
							startNumber.text = "";
							endNumber.text = "";
						}
						else if(this.currentState == "DateState")//日期
						{
							startDate.text = "";
							endDate.text = "";
						}
						content.maxValue = "";
						content.hasCustom = "0";
					}
					else//反选
					{
						for each (var k:CheckBoxItem in checkBoxList) 
						{
							k.selected = false;
						}
					}
					
					if(selectContent.length > 0)
						isSelected = true;
					else
						isSelected = false;
					
					//派发河流评价年份查询
					queryRiverYear(selectContent.toArray());
				}
			} */
		]]>
	</fx:Script> 
	
	<Items:states>
		<s:State name="NoCustomState"/>
		<s:State name="NumberState"/>
		<s:State name="DateState"/>
	</Items:states>
	
	<s:HGroup width="100%" gap="0"
			  paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" 
			  verticalAlign="middle" horizontalAlign="left">
		<s:VGroup id="containerPanel" gap="{hGap}" width="100%"
				  horizontalAlign="left" verticalAlign="middle">
			<!--<s:HGroup gap="{hGap}"
					  horizontalAlign="left" verticalAlign="middle">
				<s:Label text="{data.propertyName}" toolTip="{data.tip}" 
						 styleName="ConditionTitle" width="{itemWidth}" buttonMode="true"/>
				<s:CheckBox id="AllSelected" label="全选" width="{itemWidth}" buttonMode="true" 
							styleName="AllSelected"
							click="AllSelected_clickHandler(event)"/>
			</s:HGroup>-->
			<s:Label text="{data.propertyName}" toolTip="{data.tip}" 
					 styleName="ConditionTitle" width="{itemWidth}" buttonMode="true"/>
			<baseclass:DottedLineClass width="100%" height="1"/>
			<s:Scroller verticalScrollPolicy="auto" horizontalScrollPolicy="off" 
						width="100%" height="{maxContentHeight}">
				<s:TileGroup id="container" horizontalGap="{hGap}" width="100%" height="100%">
				</s:TileGroup>
			</s:Scroller>
		</s:VGroup>
		<s:HGroup includeIn="NumberState" gap="0" paddingLeft="{tempGap}" horizontalAlign="left" verticalAlign="middle">
			<s:TextInput id="startNumber" prompt="请输入数字" borderVisible="true"
						 paddingBottom="3" paddingTop="3"
						 paddingLeft="3" paddingRight="3"
						 width="{itemWidth}" change="changeHandler(event)"/>
			<s:Label text="-" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="endNumber" prompt="请输入数字" borderVisible="true"
						 paddingBottom="3" paddingTop="3"
						 paddingLeft="3" paddingRight="3"
						 width="{itemWidth}" change="changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="DateState" gap="0" paddingLeft="{tempGap}" horizontalAlign="left" verticalAlign="middle">
			<mx:DateField id="startDate" width="{itemWidth}" dayNames="{dayNamesArray}" 
						  monthNames="{monthNamesArray}" 
						  formatString="{formatString}" yearNavigationEnabled="true"
						  maxYear="2100" minYear="1900"
						  dateChooserStyleName="dateFieldPopup" 
						  buttonMode="true" rollOverColor="#b1d1ea"
						  selectionColor="#b1d1ea" locale="zh-CN" editable="true"
						  change="dateChangeHandler(event)"/>
			<s:Label text="-" textAlign="center" verticalAlign="middle"/>
			<mx:DateField id="endDate" width="{itemWidth}" dayNames="{dayNamesArray}" 
						  monthNames="{monthNamesArray}" 
						  formatString="{formatString}" yearNavigationEnabled="true"
						  maxYear="2100" minYear="1900"
						  dateChooserStyleName="dateFieldPopup" 
						  buttonMode="true" rollOverColor="#b1d1ea"
						  selectionColor="#b1d1ea" locale="zh-CN" editable="true"
						  change="dateChangeHandler(event)"/>
		</s:HGroup>
	</s:HGroup>
</Items:CommonGroup>
