<?xml version="1.0" encoding="utf-8"?>
<ns:WidgetBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="library://ns.supermap.com/flex/wegis/common"
			   xmlns:line="sm.wegis.szy.components.line.*"
			   xmlns:components="widgets.wateremergency.model.components.*"
			   width="100%" height="100%"
			   xmlns:chart="widgets.wateremergency.chart.*"
			   creationComplete="this_creationCompleteHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.supermap.web.core.Feature;
			import com.supermap.web.core.geometry.GeoPoint;
			import com.supermap.web.core.styles.PictureMarkerStyle;
			import com.supermap.web.core.styles.PredefinedLineStyle;
			import com.supermap.web.events.ViewBoundsEvent;
			import com.supermap.web.iServerJava6R.Recordset;
			import com.supermap.web.mapping.FeaturesLayer;
			import com.supermap.web.utils.Hashtable;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.mappingEx.FeaturesLayerEx;
			import com.supermap.wegis.common.mappingEx.TiledDynamicRESTLayerEx;
			
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.AreaSeries;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			
			import sm.wegis.szy.events.QueryEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.events.TimeSliderEvent;
			import sm.wegis.szy.models.ApplicationModelLocator;
			import sm.wegis.szy.utils.CairngormEventClass;
			import sm.wegis.szy.utils.CairngormEventManager;
			import sm.wegis.szy.utils.FeatureLayerUtil;
			import sm.wegis.szy.vo.ConstVO;
			import sm.wegis.szy.vo.ModelContainerShowVO;
			import sm.wegis.szy.vo.WSMethod;
			import sm.wegis.szy.vo.WaterModelParam;
			
			import spark.components.CheckBox;
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			import spark.events.IndexChangeEvent;
			
			import widgets.wateremergency.chart.LegendItemEx;
			import widgets.wateremergency.chart.LineSeriesEx;
			import widgets.wateremergency.model.components.PollutionLegendItem;
			
			[Bindable]
			private var modelLocator:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			public static const HIDE_STATE:String = "hideState";
			public static const BREAK_STATE:String = "breakState";
			public static const RIVER_STATE:String = "riverState";
			public static const POLLUTION_COMPARE_STATE:String = "pollutionCompareState";
			
			/**断面标识*/
			public static const BREAK_COVER:String = "BP";
			/**河道标识*/
			public static const RIVER_WAY:String = "RW";
			
			
			/**可对比方案列表*/
			[Bindable]
			private var compareSchemeList:ArrayCollection = null;
			
			/**断面对比方案列表*/
			[Bindable]
			private var DMcompareSchemeList:ArrayCollection = null;
			
			/**当前方案计算断面列表，不包含插值断面*/
			[Bindable]
			private var dmCalcList:ArrayCollection = null;
			
			/**当前方案所有断面列表*/
			[Bindable]
			private var dmAllList:Array = null;
			
			//			/**当前断面对象*/
			//			private var sameItem:Object = null;
			//			/**当前断面对象索引*/
			//			private var sameItemIndex:int = -1;
			
			/**不同方案，相同断面对比，提示文本字段*/
			private var toolTipField:String = "toolTip";
			
			[Bindable]
			private var targetsList:ArrayCollection;
			
			[Bindable]
			private var riverCompareMonth:ArrayCollection = new ArrayCollection([
				{label:"一月",value:1}
				,{label:"二月",value:2}
				,{label:"三月",value:3}
				,{label:"四月",value:4}
				,{label:"五月",value:5}
				,{label:"六月",value:6}
				,{label:"七月",value:7}
				,{label:"八月",value:8}
				,{label:"九月",value:9}
				,{label:"十月",value:10}
				,{label:"十一月",value:11}
				,{label:"十二月",value:12}
			]);
			
			/**切换断面，河道，重置页面*/
			private function resetCurrentWidget():void
			{
				if (dmChart != null) {
					clearDMCalcResult();
					targetDpList.selectedIndex = 0;
				}
				if (terrainProfileChart != null){
					dmWaterPosition.dataProvider = new ArrayCollection();
					dmTerrainProfile.dataProvider = new ArrayCollection();
				}
				if (dmCompareChart != null) {
					clearDMCompareResult();
					targetDpCompareList.selectedIndex = 0;
					dmCompareSchemeList.selectedIndex = 0;
				}
				
				//河道
				if (hdChart != null){
					clearRiverCalcResult();
					targetRwList.selectedIndex = 0;
				}
				
				if (riverCompareChart != null) {
					clearRiverCompareResult();
					riverTargetRwList.selectedIndex = 0;
					riverCompareSchemeList.selectedIndex = 0;
				}
				
				//停止推演
				if (dmTimeSlider != null){
					this.dmStopBt_clickHandler(null);
				}
			}
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				initEventListener();
			}
			
			public function initEventListener():void{
				var eList:ArrayCollection = new ArrayCollection([
					[QueryEvent.QUERY_DM_RIVER_RESPONSE, queryDMRiverResponseHandler],//查询河流断面段空间数据
					
					[QueryEvent.QUERY_MODEL_RESULT_RESPONSE, queryModelResultResponseHandler],//模型计算的断面列表
					[QueryEvent.QUERY_COMPARE_LIST_RESPONSE, queryCompareListResponseHandler],//查询可对比方案列表
					
					[QueryEvent.QUERY_BREAK_CALC_RESULT_RESPONSE, queryBreakCalcResultResponseHandler],//查询断面计算结果
					[QueryEvent.QUERY_DM_PROFILE_RESPONSE, queryDmProfileResponseHandler],//查询断面地形剖面数据
					[QueryEvent.QUERY_BREAK_COMPARE_CALC_RESULT_RESPONSE, queryDMCompareHandler],//断面对比
					
					[QueryEvent.QUERY_RIVER_CALC_RESULT_RESPONSE, queryRiverCalcResultResponseHandler],//查询河道计算结果
					[QueryEvent.QUERY_RIVER_COMPARE_CALC_RESULT_RESPONSE, queryRiverCompareHandler],//河道对比
					
					[QueryEvent.SHOW_MODEL_RESULT_WIDGET, showModelResultWidgetHandler], //显示当前断面河道结果面板
					[SystemEvent.SYSTEM_RELOAD, systemReloadHandler]
				]);
				var eventObject:CairngormEventClass = new CairngormEventClass();
				CairngormEventManager.getInstance().attachEvent(eventObject.encode(eList));
			}
			
			private function queryDMRiverResponseHandler(event:CairngormEvent):void
			{
				riverPollutionCompareInitHandler();
			}
			
			//断面地形剖面数据
			private function queryDmProfileResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if(result != null && result["success"]
					&& result["attributes"]["targetList"] 
					&& result["attributes"]["targetList"] is Array
					&& (result["attributes"]["targetList"] as Array).length==2)
				{
					if (dmProfileGroup != null) {
						dmProfileGroup.enabled = true;
					}
					decodeDmProfileData(result);
				}
			}
			
			//断面剖面数据解码
			private function decodeDmProfileData(dpData:Object):void
			{
				var tp:Object = dpData["attributes"]["targetList"][0];//地形剖面数据
				var wp:Object = dpData["attributes"]["targetList"][1];//水位时相数据
				
				//绘制剖面图形
				var tpscs:SolidColorStroke = new SolidColorStroke(tp["color"]);
				dmTerrainProfile.setStyle("areaStroke", tpscs);
				var tpsc:SolidColor = new SolidColor(tp["color"]);
				dmTerrainProfile.setStyle("areaFill", tpsc);
				dmTerrainProfile.displayName = "地形剖面";
				dmTerrainProfile.dataProvider = new ArrayCollection(tp["nodeList"]);
				
				if ((wp["nodeList"] as Array).length == 0 || (tp["nodeList"] as Array).length == 0) {
					return;
				}
				//绘制水位图形,默认显示第一个时间的水位
				var wpValue:Number = wp["nodeList"][0]["altitude"];//第一时间水位值
				var minDistance:Number = tp["nodeList"][0]["distance"];//最近
				var maxDistance:Number = tp["nodeList"][tp["nodeList"].length - 1]["distance"];//最远
				
				dmHorizontalAxis.minimum = minDistance;
				dmHorizontalAxis.maximum = maxDistance;
				
				//获取剖面最低、最高高程 dmVerticalAxis
				var minAltitude:Number = Number.MAX_VALUE;
				var maxAltitude:Number = Number.MIN_VALUE;
				for each(var item:Object in tp["nodeList"]) {
					if (minAltitude >item.altitude) {
						minAltitude = item.altitude;
					}
					if (maxAltitude <item.altitude) {
						maxAltitude = item.altitude;
					}
				}
				//最大，最小，上下浮动10%
				minAltitude = minAltitude - minAltitude*0.05;
				maxAltitude = maxAltitude + maxAltitude*0.05;
				dmVerticalAxis.minimum = minAltitude;
				dmVerticalAxis.maximum = maxAltitude;
				
				modelLocator.waterModelParam.wpValue = wpValue;
				modelLocator.waterModelParam.minDistance = minDistance;
				modelLocator.waterModelParam.maxDistance = maxDistance;
				
				var wpscs:SolidColorStroke = new SolidColorStroke(wp["color"]);
				dmWaterPosition.setStyle("areaStroke", wpscs);
				var wpsc:SolidColor = new SolidColor(wp["color"]);
				dmWaterPosition.setStyle("areaFill", wpsc);
				dmWaterPosition.displayName = "水位";
				dmWaterPosition.dataProvider = new ArrayCollection(rewriteWaterPositionData(minDistance,maxDistance,wpValue));
				
				//初始化时间轴
				var wpTimeData:Array = wp["nodeList"];
				modelLocator.waterModelParam.wpTimeData = wpTimeData;
				modelLocator.waterModelParam.wpIndex = 0;
				dmTimeSlider.minimum = 0;
				dmTimeSlider.maximum = wpTimeData.length - 1;
				dmTimeLabel.text = wpTimeData[0]["date"];
				dmWpLabel.text = Number(wpTimeData[0]["altitude"]).toFixed(2);
				
				//播放
				updateWaterLevelHandler();
			}
			
			//将断面水位数据转化为面统计图数据
			private function rewriteWaterPositionData(minDistance:Number, maxDistance:Number, wpValue:Number):Array
			{
				var wpArray:Array = [];
				wpArray.push({"distance": minDistance, "altitude": 0});
				wpArray.push({"distance": minDistance, "altitude": wpValue});
				wpArray.push({"distance": maxDistance, "altitude": wpValue});
				wpArray.push({"distance": maxDistance, "altitude": 0});
				return wpArray;
			}
			
			
			
			//查询可对比方案列表
			private function queryCompareListResponseHandler(event:CairngormEvent):void
			{
				compareSchemeList = null;
				var result:Object = event.data;
				if(result != null && result["success"] 
					&& result["attributes"] 
					&& result["attributes"]["targetList"] is Array)
				{
					compareSchemeList = new ArrayCollection(result["attributes"]["targetList"]);
					//断面对比，需要增加当前方案
					var currentPlan:Object = {planNm:"当前方案"};
					var temp:ArrayCollection = new ArrayCollection(compareSchemeList.toArray());
					temp.addItemAt(currentPlan,0);
					DMcompareSchemeList = temp;
				}
			}
			
			//获取单个水模型方案结果
			private function queryModelResultResponseHandler(event:CairngormEvent):void
			{
				dmCalcList = null;
				dmAllList = null;
				var result:Object = event.data;
				if (result != null && result.success == true && result.attributes && result.attributes.attributes is Array) {
					var tempCol:Array = result.attributes.attributes as Array;
					dmAllList = tempCol;
					var sectionCol:Array = [];
					if(tempCol != null && tempCol.length > 0)
					{
						for each(var section:Object in tempCol)
						{
							if(section != null && section["sectionName"] != null && section.type == "计算")
							{
								sectionCol.push(section);
							}
						}
					}
					dmCalcList = new ArrayCollection(sectionCol);
				}
			}
			
			//响应河道计算结果
			private function queryRiverCalcResultResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				if (riverCaclClickButton == queryRwBt)
				{
					//显示对比chart
					var datas:Array = [];
					//污染物对比
					riverCalcType.removeAllElements(); 
					if (targetRwList.selectedItem.value == 5) {
						
						var riverRBG:RadioButtonGroup = new RadioButtonGroup();
						riverRBG.addEventListener(Event.CHANGE, riverPollutionChangeHandler);
						//是否显示通过图例控制
						var tip:Label = new Label();
						tip.text = "污染物展示类型：";
						tip.percentHeight = 100;
						riverCalcType.addElement(tip);
						
						var nh3Ck:RadioButton = new RadioButton();
						nh3Ck.buttonMode = true;
						nh3Ck.group = riverRBG;
						nh3Ck.label = "NH3-N";
						nh3Ck.selected = true;
						riverCalcType.addElement(nh3Ck);
						
						var codCk:RadioButton = new RadioButton();
						codCk.label = "COD";
						codCk.group = riverRBG;
						codCk.buttonMode = true;
						riverCalcType.addElement(codCk); 
						
						if (result.attributes && result.attributes.targetList is Array)
						{
							for each(var pollutionItem:Object in result.attributes.targetList)
							{
								for each(var item:Object in pollutionItem.result)
								{
									item["name"] = pollutionItem.pollutionType;
									item.isPollution = true;
									if (nh3Ck.label == item["name"] ){
										item.visible = true;
									} else {
										item.visible = false;
									}
									datas.push(item);
								}
							}
						}
					} else {
						if (result.attributes &&  result.attributes.result is Array) {
							for each(var subItem:Object in result.attributes.result)
							{
								datas.push(subItem);
							}
						}
					}
					//设置Y轴名称 
					hdVerticalAxis.title = targetRwList.selectedItem.title;
					
					hdChart.series = createChartSeries(datas, false, false, true);
					hdLegend.visible = true;
				} else if (riverCaclClickButton == mapCalcBt) {
					//处理数据，供Hslider使用
					var riverResult:Object = {};
					var legendData:Array;
					if (result.attributes && result.attributes.targetList is Array)
					{
						riverResult.currentPlan =result.attributes.targetList;
						legendData = result.attributes.legends;
						riverCompareTimeSlider.data = riverResult;
						showRiverCompareLegend(legendData);
					}
				}
				
				//河道计算结果，污染物展示控制
				function riverPollutionChangeHandler(event:Event):void
				{
					var radioButtonGroup:RadioButtonGroup = event.currentTarget as RadioButtonGroup;
					var radioButton:RadioButton = radioButtonGroup.selection; 
					var name:String = radioButton.label;
					for each(var item:Object in datas) {
						if (item.name == name) {
							item.visible = true;
						} else {
							item.visible = false;
						}
					}
					var series:Array = createChartSeries(datas, false, false, true);
					hdChart.series = series;
				}
			}
			
			//响应断面计算结果
			private function queryBreakCalcResultResponseHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				var index:int = 0;
				var saCol:Array = [];
				var saData:Object;
				var serises:Array = [];
				var isPollution:Boolean = false;
				dmPollutionTypeGroup.removeAllElements();
				if (targetDpList.selectedItem.value == 5){
					isPollution = true;
					//污染物浓度展示
					var tip:Label = new Label();
					tip.text = "污染物展示类型：";
					tip.percentHeight = 100;
					dmPollutionTypeGroup.addElement(tip);
					
					var nh3Ck:CheckBox = new CheckBox();
					nh3Ck.label = "NH3-N";
					nh3Ck.selected = true;
					nh3Ck.addEventListener(Event.CHANGE, dmResultHandler);
					dmPollutionTypeGroup.addElement(nh3Ck);
					
					var codCk:CheckBox = new CheckBox();
					codCk.label = "COD";
					codCk.selected = true;
					codCk.addEventListener(Event.CHANGE, dmResultHandler);
					dmPollutionTypeGroup.addElement(codCk);
					for each(var pollutionItem:Object in result.attributes.targetList) {
						for each(var seriesItem:Object in pollutionItem.nodeList) 
						{
							seriesItem.name = pollutionItem.pollutionType;
							seriesItem.isPollution = true;
							seriesItem.visible = true;
							saCol.push(seriesItem);
						}
					}
				}else{ 
					if (result.success == true) 
					{
						if(result.attributes) 
						{ 
							if (result.attributes.targetList)
							{
								if (result.attributes.targetList is Array) {
									saCol = result.attributes.targetList as Array;
								} 
							}else if(result.attributes is Object)
							{
								saCol = [result.attributes];
							}
						}
					}
				}
				
				//设置Y轴名称 
				this.dmCalcVerticalAxis.title = targetDpList.selectedItem.title;
				dmChart.series = createChartSeries(saCol, false ,true, isPollution);
				dmLegend.visible = true;
				//断面计算结果展示，污染物浓度指标控制显示
				function dmResultHandler(event:Event):void
				{
					var checkBox:CheckBox = event.currentTarget as CheckBox;
					var pollutionName:String = checkBox.label;
					for each(var item:Object in saCol)
					{
						if (item.name == pollutionName) {
							item.visible = checkBox.selected;
						}
					}
					dmChart.series = createChartSeries(saCol, false ,true);
				}
			}
			
			//创建chart 曲线
			/**
			 * 创建chart曲线
			 * @param chartSeries 曲线图数据
			 * @param isCompare 是否是对比展示
			 * @param isDm 是否是断面
			 * @param isPollution 是否是污染物
			 * */
			private function createChartSeries(chartSeries:Array, isCompare:Boolean = false, isDm:Boolean = false, isPollution:Boolean = false):Array
			{
				var serises:Array = [];
				if (chartSeries.length > 0) 
				{
					var chartSeriesItem:Object;
					for (var index:int = 0 ; index < chartSeries.length ; index++)
					{
						chartSeriesItem = chartSeries[index];
						var chartType:String = chartSeriesItem["type"];
						if(chartType == "LineChart")
						{
							//如果是污染物
							if (chartSeriesItem.isPollution == true && chartSeriesItem.visible == false){
								continue;
							}
							var ls:LineSeriesEx = new LineSeriesEx();
							ls.name = chartSeriesItem["name"] != null ?  chartSeriesItem["name"]  : chartSeriesItem["label"];
							ls.xField = chartSeriesItem["xField"];
							ls.yField = chartSeriesItem["yField"];
							ls.setStyle("form", "curve");
							ls.setStyle("showDataEffect", slide);
							var scs:SolidColorStroke = new SolidColorStroke();
							if (index < modelLocator.systemInfo.colors.length) {
								scs.color = modelLocator.systemInfo.colors[index];
							} else {
								scs.color = chartSeriesItem["color"];
							}
							scs.weight = 2;
							ls.setStyle("lineStroke", scs);
							var displayName:String = "";
							if (isCompare == true){
								//断面对比图例名称
								if (isDm == true){
									displayName = chartSeriesItem["schemeName"] + chartSeriesItem["sectionName"] + chartSeriesItem["label"] ;
								} else {
									//河道对比图例名称
									displayName =  chartSeriesItem["schemeName"]+ (chartSeriesItem["name"] != null ? chartSeriesItem["name"] : "");
								}
							} else {
								//断面计算结果
								if (isDm == true){
									displayName = chartSeriesItem["label"];
								} else {
									//河道计算结果
									if (isPollution == true) {
										displayName = chartSeriesItem["label"];	
									} else {
										displayName = chartSeriesItem["label"] +  (chartSeriesItem["name"] != null ?  chartSeriesItem["name"] : "");
									}
								}
							}
							ls.displayName = displayName;
							var temp:Array = chartSeriesItem["nodeList"];
							if(temp.length > 0)
							{
								ls.dataProvider = ls.originalDataProvider = new ArrayCollection(temp);
								serises.push(ls);
							}
						}
					}
				}
				return serises;
			}
			
			private function changeDm():void
			{
				//此处需要清空已有的数据
				resetCurrentWidget();
				
				//请求剖面展示数据
				if (dmProfileGroup != null){
					this.startDmWaterLevelSimulate();
				}
				currentPollutionInfo.visible = comparePollutionInfo.visible = false;
			}
			
			private function showModelResultWidgetHandler(event:CairngormEvent):void
			{
				//切换，或重选选择断面
				changeDm();
				
				var modelShowVO:ModelContainerShowVO =  event.data as  ModelContainerShowVO;
				panel.title = modelShowVO.title;
				this.currentState = modelShowVO.state;
				
				if (modelLocator.waterModelParam.isHave == true) {
					targetsList = new ArrayCollection([
						{label:"水位",value:1,title:"水位[m]"}, {label:"水深",value:2,title:"水深[m]"},
						{label:"流量",value:3,title:"流量[m³/s]"},{label:"流速",value:4,title:"流速[m/s]"},
						{label:"污染物浓度",value:5,title:"污染物浓度[mg/L]"}]);
				} else {
					targetsList = new ArrayCollection([
						{label:"水位",value:1,title:"水位[m]"}, {label:"水深",value:2,title:"水深[m]"},
						{label:"流量",value:3,title:"流量[m³/s]"},{label:"流速",value:4,title:"流速[m/s]"}]);	
				}
				
				
				//设置当前断面
				var currentDmID:String = modelLocator.waterModelParam.dmId;
				for each(var item:Object in dmCalcList) {
					if (currentDmID == item.sectionCode){
						dmList.selectedIndex = dmCalcList.getItemIndex(item);
					}
				}
				//设置切换按钮是否可用
				checkChangeEnabelDM();
			}
			
			protected function closeBt_clickHandler(event:MouseEvent):void
			{
				this.currentState = HIDE_STATE;
			}
			
			//河道污染物浓度对比展示
			protected function riverPollutionCompareCloseBt_clickHandler(event:MouseEvent):void
			{
				this.currentState = RIVER_STATE;
			}
			
			//点击查询断面计算结果
			private function queryBt_clickHandler():void
			{
				//清除上次查询结果
				clearDMCalcResult();
				
				var waterModelparam:WaterModelParam = modelLocator.waterModelParam;
				waterModelparam.method = getQueryMethodHandler(targetDpList, BREAK_COVER);
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_BREAK_CALC_RESULT);
				queryEvent.dispatch();
			}
			
			/**清除断面的查询结果*/
			private function clearDMCalcResult():void
			{
				dmPollutionTypeGroup.removeAllElements();
				dmChart.series = null;
				dmLegend.visible = false;
				dmCalcVerticalAxis.title = "";
			}
			
			//根据选择指标类型，获取后台查询方法,默认为断面
			private function getQueryMethodHandler(hostDdl:DropDownList, methodType:String=BREAK_COVER):String
			{
				var selectItem:Object = null;
				if(methodType == BREAK_COVER)//断面
				{
					selectItem = hostDdl.selectedItem;
					switch(selectItem["value"]) {
						case 1:
							return WSMethod.GetWaterDMPositionData;
						case 2:
							return WSMethod.GetWaterDMDepthData;
						case 3:
							return WSMethod.GetWaterDMFlowData;
						case 4:
							return WSMethod.GetWaterDMSpeedData;
						case 5:
							return WSMethod.GetWaterDMDensitySource;//断面污染物浓度目前还未实现
					}
				}
				else if(methodType == RIVER_WAY)//河道
				{
					selectItem = hostDdl.selectedItem;
					switch(selectItem["value"]) {
						case 1:
							return WSMethod.GetWaterHDPositionData;
						case 2:
							return WSMethod.GetWaterHDDepthData;
						case 3:
							return WSMethod.GetWaterHDFlowData;
						case 4:
							return WSMethod.GetWaterHDSpeedData;
						case 5:
							return WSMethod.GetWaterHDDensitySource;//河道污染物浓度目前还未实现
					}
				}
				return "";
			}
			
			//系统重新加载
			public function systemReloadHandler(event:CairngormEvent):void
			{
				//此处需要清空已有的数据
				this.currentState = HIDE_STATE;
				
				//停止推演
				this.dmStopBt_clickHandler(null);
			}
			
			//将X轴显示转化为具体的日期格式
			private function dateParseFunction(s:String):Date { 
				var a:Array = s.split("-");
				var newDate:Date = new Date(a[0],a[1]-1,a[2]);
				return newDate;
			}
			
			//X轴时间显示格式
			private function dateFormatFunction(labelValue:Date, previousValue:Object, axis:IAxis):String
			{ 
				var dateFormatter:DateFormatter = new DateFormatter();   
				dateFormatter.formatString = "MM-DD";   
				var dateValue:String= dateFormatter.format(labelValue);    
				return dateValue;
			}
			
			//将X轴显示转化为具体的日期格式
			private function dateParseFunction0(s:String):Date { 
				var a:Array = s.split("-");
				var b:Array = a[2].split(" ");
				var c:Array = b[1].split(":");
				var newDate:Date = new Date(a[0],a[1]-1,b[0], c[0], c[1]);
				return newDate;
			}
			
			//断面--地形剖面统计图
			private function terrainProfileDataTipFunction (hitData:HitData):String { 
				var cntData:Object = hitData.item;
				
				var displayName:String = hitData.chartItem.element["displayName"];
				var toopTipStr:String = "高程:" + cntData[hitData.chartItem.element["yField"]] + "<br>"+"距离:"+ cntData[hitData.chartItem.element["xField"]];
				toopTipStr += cntData["note"] != null ? "<br>" + cntData["note"] :  "";
				return toopTipStr;
			}
			
			//断面通用的显示描述
			private function dmDataTipFunction (hitData:HitData):String { 
				var cntData:Object = hitData.item;
				
				var displayName:String;//targetDpList.selectedItem.title;
				if (hitData.chartItem.element is LineSeries){
					displayName = (hitData.chartItem.element as LineSeries).displayName;
				}
				if (hitData.chartItem.element is AreaSeries){
					displayName = (hitData.chartItem.element as AreaSeries).displayName;
				}
				var tipStr:String = displayName+ ":" + cntData[hitData.chartItem.element["yField"]] + "<br>"+"时间:";
				if (dmCompareSchemeList != null && dmCompareSchemeList.selectedIndex != 0){
					tipStr += cntData[toolTipField];
				} else {
					tipStr += cntData[hitData.chartItem.element["xField"]];
				}
				return tipStr;
			}
			
			//河道计算结果显示描述
			private function hdCalcDataTipFunction (hitData:HitData):String { 
				var cntData:Object = hitData.item;
				
				var displayName:String;
				displayName = (hitData.chartItem.element as LineSeries).displayName + "<br>";
				if (targetRwList.selectedItem.value == 5){
					displayName += hitData.chartItem.element.name;
				} else {
					displayName += targetRwList.selectedItem.title;
				}
				return displayName+ ":" + cntData[hitData.chartItem.element["yField"]] + "<br>"+"距离[m]:"+ cntData[hitData.chartItem.element["xField"]];
			}
			
			
			//河道对比显示描述
			private function hdCompareDataTipFunction (hitData:HitData):String { 
				var cntData:Object = hitData.item;
				
				var displayName:String;
				displayName = (hitData.chartItem.element as LineSeries).displayName + "<br>";
				
				if (riverTargetRwList.selectedItem.value == 5){
					displayName += hitData.chartItem.element.name;
				} else {
					displayName += riverTargetRwList.selectedItem.title;
				}
				return displayName+ ":" + cntData[hitData.chartItem.element["yField"]] + "<br>"+"距离[m]:"+ cntData[hitData.chartItem.element["xField"]];
			}
			
			//河道计算结果查询
			var riverCaclClickButton:Button;
			protected function queryRwBt_clickHandler(event:MouseEvent):void
			{
				clearRiverCalcResult();
				riverCaclClickButton = event.currentTarget as Button;
				
				if (riverCaclClickButton == mapCalcBt)
				{
					//点击河道污染物浓度对比
					this.currentState = POLLUTION_COMPARE_STATE;
					//设置污染物地图展示标题
					currentPanel.text= panel.title;
					compareGroup.width = 0;
					comparePanelGroup.visible = false;
					content.removeAllElements();
					riverCompareTimeSlider.initParam();
				}
				
				var waterModelparam:WaterModelParam = modelLocator.waterModelParam;
				waterModelparam.method = getQueryMethodHandler(targetRwList, RIVER_WAY);
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_CALC_RESULT);
				queryEvent.dispatch();
			}
			
			/**河道计算结果展示，清除上次查询结果*/
			private function clearRiverCalcResult():void
			{
				riverCalcType.removeAllElements();
				hdChart.series = null;
				hdLegend.visible = false;
				hdVerticalAxis.title = "";
			}
			
			//断面统计图图例
			protected function targetDpList_changeHandler(event:IndexChangeEvent):void
			{
				//清除上次查询结果
				clearDMCalcResult();
			}
			
			//河道统计图图例
			protected function targetRwList_changeHandler(event:IndexChangeEvent):void
			{
				clearRiverCalcResult();
				if (targetRwList.selectedItem.value == 5) {
					mapCalcBt.visible = true;
				} else {
					mapCalcBt.visible = false;
				}
			}
			
			//断面对比指标选择
			protected function targetDpCompareList_changeHandler(event:IndexChangeEvent):void
			{
				clearDMCompareResult()
			}
			
			//			//断面对比方案选择
			//			protected function dmCompareSchemeList_changeHandler(event:IndexChangeEvent):void
			//			{
			//				// TODO Auto-generated method stub
			//				this.resetDmChart();
			//				var schemeItem:Object = this.dmCompareSchemeList.selectedItem;
			//				if(schemeItem != null)
			//				{
			//					if(dmList && dmList.length > 0)
			//					{
			//						for each (var tempItem:Object in dmList)
			//						{
			//							if(tempItem && tempItem["sectionCode"] == modelLocator.waterModelParam.dmId)
			//							{
			//								sameItem = tempItem;//定位下拉列表中与当前断面相同的断面
			//								sameItemIndex = dmList.getItemIndex(tempItem);
			//								break;
			//							}
			//						}
			//					}
			//					
			//					//同一个方案，对比不同的断面，此处断面可选
			//					if(schemeItem["planId"] == modelLocator.waterModelParam.planId)
			//					{
			//						dmList.removeItemAt(sameItemIndex);
			//						this.dmCompareList.enabled = true;
			//						this.dmCompareList.selectedIndex = 0;
			//					}
			//					else//不同的方案对比同一个断面，此处断面不可选
			//					{
			//						dmList.addItemAt(sameItem,sameItemIndex);
			//						this.dmCompareList.selectedItem = sameItem;
			//						this.dmCompareList.enabled = false;
			//					}
			//				}
			//			}
			
			//断面对比断面选择
			protected function dmCompareList_changeHandler(event:IndexChangeEvent):void
			{
				clearDMCompareResult();
			}
			
			//执行断面对比
			private var queryCompareDMCalc:Boolean = false;
			private var dMCompareResult:Object;
			protected function queryCompareBt_clickHandler(event:MouseEvent):void
			{
				clearDMCompareResult();
				var waterModelparam:WaterModelParam = modelLocator.waterModelParam;
				waterModelparam.method = getQueryMethodHandler(targetDpCompareList, BREAK_COVER);
				//设置flag，标识开始请求数据
				queryCompareDMCalc = false;
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_BREAK_COMPARE_CALC_RESULT);
				queryEvent.data = waterModelparam;
				queryEvent.dispatch();
				
				dMCompareResult = {};
			}
			
			/**断面对比，清除上次查询结果*/
			private function clearDMCompareResult():void
			{
				dmCompareType.removeAllElements();
				dmCompareChart.series = null;
				verticalCompareAxis.title = "";
				dmCompareLegend.visible = false;
			}
			
			private function queryDMCompareHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				var saData:Array = [];
				var pollutionItem:Object;
				var item:Object;
				if (queryCompareDMCalc == false){
					if (targetDpCompareList.selectedItem.value == 5){
						for each(pollutionItem in result.attributes.targetList) {
							if (pollutionItem.nodeList is Array && (pollutionItem.nodeList as Array).length >0) 
							{
								item =  pollutionItem.nodeList[0];
								item.isPollution = true;
								item.visible = true;
								item.name =  pollutionItem.pollutionType;
								saData.push(item);
							}
						}
					}else{ 
						if (result.success == true && result.attributes) 
						{
							if (result.attributes.targetList)
							{
								if (result.attributes.targetList is Array && (result.attributes.targetList as Array).length >0) {
									saData = [result.attributes.targetList[0]];
								} 
							}else if(result.attributes is Object)
							{
								saData = [result.attributes];
							}
						}
					}
					dMCompareResult.currentPlan =  saData;
					queryCompareDMCalc = true;
					
					var currentWaterModelparam:WaterModelParam = modelLocator.waterModelParam;
					
					var waterModelparam:WaterModelParam = new WaterModelParam();
					waterModelparam.method = getQueryMethodHandler(targetDpCompareList, BREAK_COVER);
					//当前方案，不同断面对比
					if (dmCompareSchemeList.selectedIndex == 0) {
						waterModelparam.planId = currentWaterModelparam.planId;
						waterModelparam.dmId = dmCompareList.selectedItem.sectionCode;
					}else{
						waterModelparam.planId = dmCompareSchemeList.selectedItem.planId;
						waterModelparam.dmId = currentWaterModelparam.dmId;
					}
					var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_BREAK_COMPARE_CALC_RESULT);
					queryEvent.data = waterModelparam;
					queryEvent.dispatch();
				} else if (queryCompareDMCalc == true){
					if (targetDpCompareList.selectedItem.value == 5){
						for each(pollutionItem in result.attributes.targetList) {
							if (pollutionItem.nodeList is Array && (pollutionItem.nodeList as Array).length >0) 
							{
								item =  pollutionItem.nodeList[0];
								item.name =  pollutionItem.pollutionType;
								item.isPollution = true;
								item.visible = true;
								saData.push(item);
							}
						}
					}else{ 
						if (result.success == true && result.attributes) 
						{
							if (result.attributes.targetList)
							{
								if (result.attributes.targetList is Array && (result.attributes.targetList as Array).length >0) {
									saData = [result.attributes.targetList[0]];
								} 
							}else if(result.attributes is Object)
							{
								saData = [result.attributes];
							}
						}
					}
					dMCompareResult.comparePlan =  saData;
					
					//对不同方案，相同断面进行处理
					var typeItem:Object;
					var times:Array;
					if (dmCompareSchemeList.selectedIndex != 0) {
						if ( dMCompareResult.currentPlan != null){
							for each(typeItem in dMCompareResult.currentPlan){
								for each(item in typeItem.nodeList)
								{
									item[toolTipField] = item.time;
									times = item.time.split("-");
									times["0"] = "1900"; // 年份，我自己指定的，主要是让两组数据，年份相同
									item.time = times.join("-");
								}
							}
						}
						if ( dMCompareResult.comparePlan != null){
							for each(typeItem in dMCompareResult.comparePlan){
								for each(item in typeItem.nodeList)
								{
									item[toolTipField] = item.time;
									times = item.time.split("-");
									times["0"] = "1900";
									item.time = times.join("-");
								}
							}
						}
					}
					//显示对比chart
					showDMCompareChart();
				}
			}
			
			/**显示对比chart*/
			private function showDMCompareChart():void
			{
				//显示当前方案的数据
				//设置Y轴名称 
				this.verticalCompareAxis.title = targetDpCompareList.selectedItem.title;
				
				var saData:Object;
				var saDatas:Array = [];
				var sa:Array = [];
				var month:int;
				var label:String;
				
				if (dMCompareResult.currentPlan != null){
					if (dMCompareResult.currentPlan is Array && (dMCompareResult.currentPlan as Array).length>0){
						for each(var item:Object in dMCompareResult.currentPlan){
							saDatas.push(item);
						}
					} else {
						saDatas.push(dMCompareResult.currentPlan);
					}
				}
				if (dMCompareResult.comparePlan != null){
					if (dMCompareResult.comparePlan is Array && (dMCompareResult.comparePlan as Array).length > 0){
						for each(var item0:Object in dMCompareResult.comparePlan){
							saDatas.push(item0);
						}
					} else {
						saDatas.push(dMCompareResult.comparePlan);
					}
				}
				
				//污染物浓度展示
				dmCompareType.removeAllElements(); 
				if (targetDpCompareList.selectedItem.value == 5){
					var tip:Label = new Label();
					tip.text = "污染物展示类型：";
					tip.percentHeight = 100;
					dmCompareType.addElement(tip);
					
					var nh3Ck:CheckBox = new CheckBox();
					nh3Ck.label = "NH3-N";
					nh3Ck.selected = true;
					nh3Ck.addEventListener(Event.CHANGE, dmComparePollutionChangeHandler);
					dmCompareType.addElement(nh3Ck);
					
					var codCk:CheckBox = new CheckBox();
					codCk.label = "COD";
					codCk.selected = true;
					codCk.addEventListener(Event.CHANGE, dmComparePollutionChangeHandler);
					dmCompareType.addElement(codCk);
				}
				
				dmCompareChart.series = createChartSeries(saDatas, true, true);
				dmCompareLegend.visible = true;
				
				function dmComparePollutionChangeHandler(event:Event):void
				{
					var checkBox:CheckBox = event.currentTarget as CheckBox;
					var name:String = checkBox.label;
					for each(var item:Object in saDatas) {
						if (item.name == name) {
							item.visible = checkBox.selected;
						}
					}
					dmCompareChart.series = createChartSeries(saDatas, true, true);
				}
			}
			
			
			protected function riverTargetRwList_valueCommitHandler(event:FlexEvent):void
			{
				clearRiverCompareResult();
				mapCompare.visible = mapCompare.includeInLayout = false;
				var dropDownList:DropDownList = event.currentTarget as DropDownList;
				if (dropDownList.selectedItem.value == 5){
					mapCompare.visible = mapCompare.includeInLayout = true;
				}
			}
			
			private var riverCompareResult:Object;
			private var queryCompareRiverCalc:Boolean = false;
			private var riverCompareClickButton:Button;
			//先请求当前方案的河道对应计算指标计算结果
			protected function riverQueryRwBt_clickHandler(event:MouseEvent):void
			{
				clearRiverCompareResult();
				
				riverCompareClickButton = event.currentTarget as Button;
				if (riverCompareClickButton == mapCompare)
				{
					//点击河道污染物浓度对比
					this.currentState = POLLUTION_COMPARE_STATE;
					//设置污染物地图展示标题
					currentPanel.text= panel.title;
					comparePanel.text = riverCompareSchemeList.selectedItem.planNm;
					compareGroup.percentWidth = 100;
					comparePanelGroup.visible = true;
					content.removeAllElements();
					riverCompareTimeSlider.initParam();
					
				}
				var waterModelparam:WaterModelParam = modelLocator.waterModelParam;
				waterModelparam.method = getQueryMethodHandler(riverTargetRwList, RIVER_WAY);
				
				//设置flag，标识开始请求数据
				queryCompareRiverCalc = false;
				riverCompareMonthDpList.enabled = false;
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_COMPARE_CALC_RESULT);
				queryEvent.data = waterModelparam;
				queryEvent.dispatch();
				
				riverCompareResult = {};
			}
			
			/**清除河道对比查询结果*/
			private function clearRiverCompareResult():void
			{
				riverCompareType.removeAllElements();
				riverCompareChart.series = null;
				riverCompareLegend.visible = false;
				riverVerticalAxis.title = "";
				var featuresLayer:FeaturesLayer;
				featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, comparePlanMap);
				resolveRiverFeature(featuresLayer);
				featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, currentPlanMap);
				resolveRiverFeature(featuresLayer);
			}
			
			private function queryRiverCompareHandler(event:CairngormEvent):void
			{
				var result:Object = event.data;
				var legendData:Array;
				var datas:Array = [];
				var pollutionItem:Object;
				var item:Object;
				var subItem:Object;
				if (queryCompareRiverCalc == false){
					if (result.success == true) {
						//污染物对比
						if (riverTargetRwList.selectedItem.value == 5) {
							if (result.attributes && result.attributes.targetList is Array)
							{
								for each(pollutionItem in result.attributes.targetList)
								{
									for each(item in pollutionItem.result)
									{
										item["name"] = pollutionItem.pollutionType;
										item.isPollution = true;
										item.visible = true;
										datas.push(item);
									}
								}
								riverCompareResult.currentPlan =result.attributes.targetList;
							}
						} else {
							if (result.attributes &&  result.attributes.result is Array) {
								for each(subItem in result.attributes.result)
								{
									datas.push(subItem);
								}
								riverCompareResult.currentPlan = datas;
							}
						}
					}
					queryCompareRiverCalc = true;
					var waterModelparam:WaterModelParam = new WaterModelParam();
					waterModelparam.method = getQueryMethodHandler(riverTargetRwList, RIVER_WAY);
					waterModelparam.planId = riverCompareSchemeList.selectedItem.planId;
					var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_RIVER_COMPARE_CALC_RESULT);
					queryEvent.data = waterModelparam;
					queryEvent.dispatch();
				} else if (queryCompareRiverCalc == true){
					if (result.success == true) {
						//污染物对比
						//污染物对比
						if (riverTargetRwList.selectedItem.value == 5) {
							if (result.attributes && result.attributes.targetList is Array)
							{
								for each(pollutionItem in result.attributes.targetList)
								{
									for each(item in pollutionItem.result)
									{
										item["name"] = pollutionItem.pollutionType;
										item.isPollution = true;
										item.visible = true;
										datas.push(item);
									}
								}
								riverCompareResult.comparePlan =result.attributes.targetList;
								legendData = result.attributes.legends;
							}
						} else {
							if (result.attributes &&  result.attributes.result is Array) {
								for each(subItem in result.attributes.result)
								{
									datas.push(subItem);
								}
								riverCompareResult.comparePlan = datas;
							}
						}
					}
					riverCompareMonthDpList.enabled = true;
					//显示对比chart
					if (riverCompareClickButton == riverQueryRwBt) {
						showRiverCompareChart();
					} else {
						//处理数据，供Hslider使用
						riverCompareTimeSlider.data = riverCompareResult;
						showRiverCompareLegend(legendData);
					}
				}
			}
			
			private function showRiverCompareLegend(legendData:Array):void
			{
				if (legendData != null) {
					var index:int = 0;
					for ( ; index < legendData.length ; index++) {
						var itemData:Object = legendData[index];
						var legendItem:PollutionLegendItem;
						if (content.numElements > index && content.getElementAt(index) is PollutionLegendItem) {
							legendItem = content.getElementAt(index) as PollutionLegendItem;
						} else {
							legendItem = new PollutionLegendItem();
							content.addElementAt(legendItem,index);
						}
						legendItem.color =  parseInt(itemData["color"], 16);
						legendItem.label = itemData["label"];
					}
					if (content.numElements > index) {
						var remainNum:int = content.numElements;
						for (; index < remainNum ; index ++) {
							content.removeElementAt(content.numElements-1);
						}
					}
				}
			}
			
			/**处理污染物浓度地图对比，时间轴数据，取两个交集*/
			private function resolveHsliderTime():void
			{
				var saData:Object;
				var times:Hashtable = new Hashtable();
				var month:int;
				var label:String;
				for each(saData in riverCompareResult.currentPlan)
				{
					label =saData["label"];
					month = -1;
					if (label.split("-").length == 2){
						month = parseInt(label.split("-")[1]);
					}
					times.add(month,month);
				}
				
				//遍历对比方案的数据
				for each(saData in riverCompareResult.comparePlan)
				{
					label =saData["label"];
					month = -1;
					if (label.split("-").length == 2){
						month = parseInt(label.split("-")[1]);
					}
					if (times.find(month) == null) {
						times.add(month,month);
					}
				}
				
				var months:Array = times.getKeySet();
				months.sort(Array.NUMERIC);
				
			}
			
			/**显示对比chart*/
			private function showRiverCompareChart(changeByMonth:Boolean = false):void
			{
				//设置Y轴名称 
				this.riverVerticalAxis.title = riverTargetRwList.selectedItem.title;
				var selectMonth:int = riverCompareMonthDpList.selectedItem.value;
				//显示当前方案的数据
				var saData:Object;
				var saDatas:Array = [];
				var sa:Array = [];
				var month:int;
				var label:String;
				var isPollution:Boolean = false;
				//污染物浓度展示
				//是否通过切换月份改变，如果是，不重新创建checkbox
				if (changeByMonth == false){
					riverCompareType.removeAllElements();
				}
				if (riverTargetRwList.selectedItem.value == 5){
					isPollution = true;
					var nh3Ck:CheckBox;
					var codCk:CheckBox;
					if (changeByMonth == false){
						var tip:Label = new Label();
						tip.text = "污染物展示类型：";
						tip.percentHeight = 100;
						riverCompareType.addElement(tip);
						
						nh3Ck = new CheckBox();
						nh3Ck.id = "nh3Ck";
						nh3Ck.label = "NH3-N";
						nh3Ck.selected = true;
						nh3Ck.addEventListener(Event.CHANGE, riverComparePollutionChangeHandler);
						riverCompareType.addElement(nh3Ck);
						
						codCk = new CheckBox();
						codCk.id = "codCk";
						codCk.label = "COD";
						codCk.selected = true;
						codCk.addEventListener(Event.CHANGE, riverComparePollutionChangeHandler);
						riverCompareType.addElement(codCk);
					} else {
						for (var index:int = 0 ;index < riverCompareType.numElements ;index++){
							var checkBox:CheckBox = riverCompareType.getElementAt(index) as CheckBox;
							if ( checkBox != null ) {
								if (checkBox.id == "nh3Ck"){
									nh3Ck = checkBox;
								} else if (checkBox.id == "codCk"){
									codCk = checkBox;
								}
							}
						}
					}
					var pollutionItem:Object;
					if (riverCompareResult.currentPlan != null ){
						for each(pollutionItem in riverCompareResult.currentPlan)
						{
							for  each (saData in pollutionItem.result)
							{
								label =saData["label"];
								if (label != null) {
									month = -1;
									if (label.split("-").length == 2){
										month = parseInt(label.split("-")[1]);
									}
									if (month == selectMonth) {
										if (nh3Ck && nh3Ck.selected == false && saData.name == nh3Ck.label){
											saData.visible = false;
										}
										if (codCk && codCk.selected == false && saData.name == codCk.label){
											saData.visible = false;
										}
										saDatas.push(saData);
										break;
									}
								}
							}
						}
					}
					//遍历对比方案
					if (riverCompareResult.comparePlan != null ){
						for each(pollutionItem in riverCompareResult.comparePlan)
						{
							for  each (saData in pollutionItem.result)
							{
								label =saData["label"];
								if (label != null) {
									month = -1;
									if (label.split("-").length == 2){
										month = parseInt(label.split("-")[1]);
									}
									if (month == selectMonth) {
										if (nh3Ck && nh3Ck.selected == false && saData.name == nh3Ck.label){
											saData.visible = false;
										}
										if (codCk && codCk.selected == false && saData.name == codCk.label){
											saData.visible = false;
										}
										saDatas.push(saData);
										break;
									}
								}
							}
						}
					} 
				}else { // 非污染物指标对比
					for each(saData in riverCompareResult.currentPlan)
					{
						label =saData["label"];
						if (label != null) {
							month = -1;
							if (label.split("-").length == 2){
								month = parseInt(label.split("-")[1]);
							}
							if (month == selectMonth) {
								saDatas.push(saData);
								break;
							}
						}
					}
					
					//遍历对比方案的数据
					for each(saData in riverCompareResult.comparePlan)
					{
						label =saData["label"];
						if (label != null) {
							month = -1;
							if (label.split("-").length == 2){
								month = parseInt(label.split("-")[1]);
							}
							if (month == selectMonth) {
								saDatas.push(saData);
								break;
							}
						}
					}
				}
				
				riverCompareChart.series = createChartSeries(saDatas, true, false, isPollution);
				riverCompareLegend.visible = true;
				
				//河道计算结果，污染物展示控制
				function riverComparePollutionChangeHandler(event:Event):void
				{
					var checkBox:CheckBox = event.currentTarget as CheckBox;
					var name:String = checkBox.label;
					for each(var item:Object in saDatas) {
						if (item.name == name) {
							item.visible = checkBox.selected;
						} 
					}
					riverCompareChart.series =createChartSeries(saDatas, true, false, isPollution);
				}
			}
			
			protected function riverCompareMonthDpList_changeHandler(event:IndexChangeEvent):void
			{
				showRiverCompareChart(true);
			}
			
			//河道计算结果导出
			protected function exportRwBt_clickHandler(event:MouseEvent):void
			{
				var requestParam:WaterModelParam = new WaterModelParam();
				requestParam.planId =  modelLocator.waterModelParam.planId;
				requestParam.jisuanid = getExportCalcTypeHandler(targetRwList);
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.EXPORT_QUERY_RIVER_CALC_RESULT);
				queryEvent.data = requestParam;
				queryEvent.dispatch();
			}
			
			private function getExportCalcTypeHandler(hostDdl:DropDownList):String
			{
				var selectItem:Object = null;
				selectItem = hostDdl.selectedItem;
				switch(selectItem["value"]) {
					case 1:
						return ConstVO.WaterLevel;
					case 2:
						return ConstVO.WaterDepth;
					case 3:
						return ConstVO.WaterQuality;
					case 4:
						return ConstVO.WaterFlow;
					case 5:
						return ConstVO.WaterPollution;
				}
				return "";
			}
			
			//断面计算结果导出
			protected function dmExportBt_clickHandler(event:MouseEvent):void
			{
				var requestParam:WaterModelParam = new WaterModelParam();
				requestParam.planId =  modelLocator.waterModelParam.planId;
				requestParam.dmId = modelLocator.waterModelParam.dmId;
				requestParam.jisuanid = getExportCalcTypeHandler(targetDpList);
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.EXPORT_QUERY_DM_CALC_RESULT);
				queryEvent.data = requestParam;
				queryEvent.dispatch();
			}
			
			protected function dmCompareSchemeList_valueCommitHandler(event:FlexEvent):void
			{
				clearDMCompareResult();
				var dropdownList:DropDownList = event.currentTarget as DropDownList;
				dmCompareList.enabled = true;
				//选择的是非当前方案，断面设置为当前断面id------不同方案，相同断面比较
				if (dropdownList.selectedIndex != 0 && dropdownList.selectedIndex != -1) {
					for each(var item:Object in dmCompareList.dataProvider){
						if (item.sectionCode == modelLocator.waterModelParam.dmId) {
							dmCompareList.selectedItem = item;
							dmCompareList.enabled = false;
							break;
						}
					}
				}
			}
			
			//断面地形剖面数据
			private function dmProfileDataTipFunc(val:String):String
			{
				if(modelLocator.waterModelParam.wpTimeData != null 
					&& modelLocator.waterModelParam.wpTimeData.length > 0)
				{
					return "当前日期: " + modelLocator.waterModelParam.wpTimeData[val]["date"];
				}
				return "";
			}
			
			//开始断面地形水位推演
			private var playDMProfile:Boolean = false;
			protected function dmStartBt_clickHandler(event:MouseEvent):void
			{
				if (playDMProfile == false) {
					dmStartBt.label = "暂停";
					playDMProfile = true;
					updateWaterLevelHandler();
				} else {
					dmStartBt.label = "播放";
					playDMProfile = false;
				}
			}
			
			//停止断面地形水位推演
			protected function dmStopBt_clickHandler(event:MouseEvent):void
			{
				playDMProfile = false;
				dmStartBt.label = "播放";
				dmTimeSlider.value = dmTimeSlider.minimum;
			}
			
			private function startDmWaterLevelSimulate():void
			{
				var queryEvent:QueryEvent = new QueryEvent(QueryEvent.QUERY_DM_PROFILE);
				queryEvent.dispatch();
				dmProfileGroup.enabled = false;
			}
			
			protected function dmTimeSlider_changeHandler(event:Event):void
			{
				updateWaterLevelHandler();
			}
			
			private function updateWaterLevelHandler():void
			{
				var currentItem:Object = modelLocator.waterModelParam.wpTimeData[dmTimeSlider.value];
				dmTimeLabel.text = currentItem["date"];
				dmWpLabel.text = Number(currentItem["altitude"]).toFixed(2);
				modelLocator.waterModelParam.wpValue = Number(dmWpLabel.text );
				modelLocator.waterModelParam.wpIndex = dmTimeSlider.value;
				//更新水位统计图
				dmWaterPosition.dataProvider = new ArrayCollection(rewriteWaterPositionData(modelLocator.waterModelParam.minDistance,
					modelLocator.waterModelParam.maxDistance,modelLocator.waterModelParam.wpValue));
				if (playDMProfile == true ) {
					dmTimeSlider.value += dmTimeSlider.stepSize;
					setTimeout(updateWaterLevelHandler, 500);
					if (dmTimeSlider.value == dmTimeSlider.maximum) {
						playDMProfile = false;
						dmStartBt.label = "播放";
						dmTimeSlider.value = dmTimeSlider.minimum;
					}
				}
			}
			
			protected function riverPollutionCompareInitHandler():void
			{
				currentPlanMap.removeAllLayers();
				var baseMapLayer:TiledDynamicRESTLayerEx;
				var waterResourceLayer:TiledDynamicRESTLayerEx;
				//添加两个地图图层
				baseMapLayer = new TiledDynamicRESTLayerEx();
				baseMapLayer.layerType = 0
				baseMapLayer.layerIndex = 1;
				baseMapLayer.url = modelLocator.baseMapInfo.baseVectorMapUrl;
				baseMapLayer.bounds = modelLocator.systemInfo.layerBounds;
				currentPlanMap.addLayer(baseMapLayer);
				
				waterResourceLayer = new TiledDynamicRESTLayerEx();
				waterResourceLayer.layerType = 1;
				waterResourceLayer.layerIndex = 1;
				waterResourceLayer.transparent = true;
				waterResourceLayer.layersID = modelLocator.systemInfo.lastLayerIds;
				waterResourceLayer.url = modelLocator.baseMapInfo.waterResourceVectorMapUrl;
				currentPlanMap.addLayer(waterResourceLayer);
				
				currentPlanMap.resolutions = modelLocator.mapCtrl.resolutions;
				
				var featuresLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, currentPlanMap);
				currentPlanMap.addLayer(featuresLayer);
				
				var recordSet:Recordset;
				var feature:Feature;
				var newFeature:Feature;
				var recordSets:Array = modelLocator.waterModelParam.riverDMList;
				for each(recordSet in recordSets)
				{
					if (recordSet.features != null && recordSet.features.length != 0)
					{
						for each (feature in recordSet.features)
						{
							newFeature = new Feature(feature.geometry);
							newFeature.id = feature.attributes.ID;
							newFeature.visible = false;
							newFeature.buttonMode = true;
							featuresLayer.addFeature(newFeature);
						}
					}
				}
				
				currentPlanMap.viewBoundsEx = featuresLayer.bounds;
				
				
				comparePlanMap.removeAllLayers();
				//添加两个地图图层
				baseMapLayer = new TiledDynamicRESTLayerEx();
				baseMapLayer.layerType = 0
				baseMapLayer.layerIndex = 1;
				baseMapLayer.bounds = modelLocator.systemInfo.layerBounds;
				baseMapLayer.url = modelLocator.baseMapInfo.baseVectorMapUrl;
				comparePlanMap.addLayer(baseMapLayer);
				
				waterResourceLayer = new TiledDynamicRESTLayerEx();
				waterResourceLayer.layerType = 1;
				waterResourceLayer.layerIndex = 1;
				waterResourceLayer.transparent = true;
				waterResourceLayer.layersID = modelLocator.systemInfo.lastLayerIds;
				waterResourceLayer.url = modelLocator.baseMapInfo.waterResourceVectorMapUrl;
				comparePlanMap.addLayer(waterResourceLayer);
				
				comparePlanMap.resolutions = modelLocator.mapCtrl.resolutions;
				
				featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, comparePlanMap);
				comparePlanMap.addLayer(featuresLayer);
				
				for each(recordSet in recordSets)
				{
					if (recordSet.features != null && recordSet.features.length != 0)
					{
						for each (feature in recordSet.features)
						{
							newFeature = new Feature(feature.geometry);
							newFeature.id = feature.attributes.ID;
							newFeature.visible = false;
							newFeature.buttonMode = true;
							featuresLayer.addFeature(newFeature);
						}
					}
				}
				comparePlanMap.viewBoundsEx = featuresLayer.bounds;
			}
			
			private function mapRollOverHandler(event:MouseEvent):void
			{
				var map:MapCtrl = event.currentTarget as MapCtrl;
				map.addEventListener(ViewBoundsEvent.VIEW_BOUNDS_CHANGE, viewBoundsChangeHandler);
				map.addEventListener(MouseEvent.ROLL_OUT, mapRollOutrHandler);
			}
			
			private function mapRollOutrHandler(event:MouseEvent):void
			{
				var map:MapCtrl = event.currentTarget as MapCtrl;
				map.removeEventListener(MouseEvent.ROLL_OUT, mapRollOutrHandler);
				map.removeEventListener(ViewBoundsEvent.VIEW_BOUNDS_CHANGE, viewBoundsChangeHandler);
			}
			
			private function viewBoundsChangeHandler(event:ViewBoundsEvent):void
			{
				var map:MapCtrl = event.currentTarget as MapCtrl;
				if (map != currentPlanMap) 
				{
					currentPlanMap.viewBounds = event.viewBounds;
				}
				if (map != comparePlanMap && comparePlanMap.width != 0)
				{
					comparePlanMap.viewBounds = event.viewBounds;
				}
			}
			
			//当前时间轴选择的月份数据，根据月份数据，刷新河流段
			protected function timeSlider_changeHandler(event:TimeSliderEvent):void
			{
				var featuresLayer:FeaturesLayer;
				var showDatas:Object = event.data;
				if (showDatas.currentPlan != null){
					showRiverMap(showDatas.currentPlan, currentPlanMap);
					currentPollutionInfo.data = showDatas.currentPlan;
					currentPollutionInfo.visible = true;
				} else {
					currentPollutionInfo.visible = false;
					featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, comparePlanMap);
					resolveRiverFeature(featuresLayer);
					
					if (showDatas.comparePlan != null){
						showRiverMap(showDatas.comparePlan, comparePlanMap);
						comparePollutionInfo.data = showDatas.comparePlan;
						comparePollutionInfo.visible = true;
					} else {
						comparePollutionInfo.visible = false;
						featuresLayer = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, currentPlanMap);
						resolveRiverFeature(featuresLayer);
					}
				}
			}
			
			private function showRiverMap(data:Object, map:MapCtrl):void
			{
				//关联断面对应的河流段
				//河流段
				var riverLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Pollution_Compare_Layer, map);
				resolveRiverFeature(riverLayer);
				
				var maxPolltionDmLayer:FeaturesLayerEx = FeatureLayerUtil.getFeatureLayerById(ConstVO.River_Max_Pollution_Layer, map);
				maxPolltionDmLayer.clear();
				//设置河段颜色
				var preLineStyle:PredefinedLineStyle;
				var item:Object;
				for each(item in data.nodeList){
					var riverFeature:Feature = riverLayer.getFeatureByID(item.super_obj_id);
					if (riverFeature != null) {
						riverFeature.visible = true;
						preLineStyle = riverFeature.style as PredefinedLineStyle;
						if (preLineStyle == null) {
							preLineStyle = new PredefinedLineStyle("solid");
							riverFeature.style = preLineStyle;
						}
						preLineStyle.color = parseInt(item.colo_value, 16);
					}
				}
				
				for each(item in dmAllList) {
					//				  if (item.superObjId == data.super_obj_id){
					if (item.superObjId == data.super_obj_id){
						var pictureMarkerStyle:PictureMarkerStyle = new PictureMarkerStyle();
						var typeIDs:String = item.typeIDs;
						pictureMarkerStyle.source = ResourceManagerEx.FindResource(typeIDs).cls;
						
						if (item.lgtd && item.lttd) {
							item.x = Number(item.lgtd);
							item.y = Number(item.lttd);
							var geoPoint:GeoPoint = new GeoPoint(item.x, item.y);
							var feature:Feature = new Feature(geoPoint, pictureMarkerStyle, item);
							feature.id = item.sectionCode;
							feature.toolTip = item.sectionName;
							feature.buttonMode = true;
							maxPolltionDmLayer.addFeature(feature);
						}
						break;
					}
				}
			}
			
			//设置features都不可见
			private function resolveRiverFeature(featuresLayer:FeaturesLayer):void
			{
				for each(var feature:Feature in featuresLayer.features){
					feature.visible = false;
				}
			}
			
			protected function dmProfileNC_creationCompleteHandler(event:FlexEvent):void
			{
				startDmWaterLevelSimulate();
			}
			
			protected function changeDM_clickHandler(event:MouseEvent):void
			{
				var bt:Button = event.currentTarget as Button;
				if (bt == preDM && dmList.selectedIndex > 0) {
					dmList.selectedIndex -= 1;
				}
				if (bt == nextDM && dmList.selectedIndex < dmList.dataProvider.length -1) {
					dmList.selectedIndex += 1;
				}
				if (dmList.selectedItem != null) {
					modelLocator.waterModelParam.dmId = dmList.selectedItem.sectionCode;
					panel.title = dmList.selectedItem.sectionName;
				}
				changeDm();
				checkChangeEnabelDM();
			}
			
			/**设置切换按钮是否可用*/
			private function checkChangeEnabelDM():void
			{
				preDM.enabled = true;
				preDM.enabled = true;
				if (dmList.selectedIndex > -1 && dmList.dataProvider.length > 0){
					if (dmList.selectedIndex == 0 ) {
						preDM.enabled = false;
					}else {
						preDM.enabled = true;
					}
					if(dmList.selectedIndex == dmList.dataProvider.length - 1) {
						nextDM.enabled = false;
					} else {
						nextDM.enabled = true;
					}
				} else {
					preDM.enabled = false;
					nextDM.enabled = false;
				}
			}
			
			protected function dmList_changeHandler(event:IndexChangeEvent):void
			{
				modelLocator.waterModelParam.dmId = dmList.selectedItem.sectionCode;
				panel.title = dmList.selectedItem.sectionName;
				changeDm();
				checkChangeEnabelDM();		
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:SeriesSlide  id="slide"  direction="up" elementOffset="0"/>
		<s:SolidColorStroke id="chartAxisStroke" color="#BBCCDD" weight="1" alpha="1"/>
	</fx:Declarations>
	<ns:states>
		<s:State name="hideState"/>
		<s:State name="breakState"/>
		<s:State name="riverState"/>
		<s:State name="pollutionCompareState"/>
	</ns:states>
	<s:Panel id="panel" width="100%" height="100%" visible="false" visible.breakState="true" visible.riverState="true"
			 visible.pollutionCompareState="false">
		<s:controlBarContent>
			<fx:Array>
				<s:HGroup visible.breakState="true" visible="false" width="100%" height="100%"  horizontalAlign="center" verticalCenter="0">
					<s:Button id="preDM" label="上一断面"  buttonMode="true" styleName="SubmitRegisterStyle" click="changeDM_clickHandler(event)"/>
					<s:DropDownList id="dmList" minWidth="120"  dataProvider="{dmCalcList}" styleName="SystemSelectorStyle" labelField="sectionName"
									change="dmList_changeHandler(event)"/>
					<s:Button id="nextDM" label="下一断面" buttonMode="true"  styleName="SubmitRegisterStyle"  click="changeDM_clickHandler(event)"/>
				</s:HGroup>
				<s:Spacer width="400"/>
				<s:Button id="closeBt" skinClass="sm.wegis.szy.skins.CloseLoginButtonSkin" buttonMode="true"
						  click="closeBt_clickHandler(event)"/>
			</fx:Array>
		</s:controlBarContent>
		<!--断面信息展示-->
		<s:Group id="breakGroup" width="100%" height="100%" visible="false" visible.breakState="true" >
			<s:VGroup width="100%" height="100%" gap="3">
				<s:ButtonBar id="breakBTB" dataProvider="{breakVW}"/>
				<s:Rect width="100%" height="1">
					<s:fill>
						<s:SolidColor color="0x979797" alpha="0.5"/>
					</s:fill>
				</s:Rect>
				<mx:ViewStack id="breakVW" width="100%" height="100%">
					<s:NavigatorContent label="断面计算结果"  width="100%" height="100%">
						<s:VGroup  width="100%" height="100%" paddingLeft="5"  paddingTop="5" paddingRight="5" >
							<mx:Grid verticalGap="15" horizontalGap="20">
								<mx:GridRow>
									<mx:GridItem>
										<s:HGroup gap="10" >
											<s:Label text="指标：" height="100%"/>
											<s:DropDownList id="targetDpList" width="160" dataProvider="{targetsList}" 
															requireSelection="true" styleName="SystemSelectorStyle"
															change="targetDpList_changeHandler(event)"/>
										</s:HGroup>
									</mx:GridItem>
									<mx:GridItem>
										<s:HGroup gap="10">
											<s:Button id="queryBt" label="查询" buttonMode="true" styleName="SubmitRegisterStyle" 
													  click="queryBt_clickHandler()"/>
											<s:Button id="dmExportBt" label="导出计算结果" buttonMode="true" styleName="SubmitRegisterStyle"
													  click="dmExportBt_clickHandler(event)"/>
										</s:HGroup>
										<s:HGroup id="dmPollutionTypeGroup" paddingLeft="20"/>
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>	
							<line:HLine width="100%"/>
							<chart:LineChartEx id="dmChart" width="100%" height="100%" 
											   dataTipFunction="dmDataTipFunction">
								<!-- vertical axis -->
								<chart:verticalAxis>
									<mx:LinearAxis id="dmCalcVerticalAxis" baseAtZero="false" />
								</chart:verticalAxis>
								<chart:verticalAxisRenderers>
									<mx:AxisRenderer axis="{dmCalcVerticalAxis}"  fontSize="12" axisStroke="{chartAxisStroke}" color="#0000A2" tickStroke="{chartAxisStroke}"/>
								</chart:verticalAxisRenderers>
								<!-- horizontal axis -->
								<chart:horizontalAxis>
									<mx:DateTimeAxis id="ca"  title="时间" interval="1" labelUnits="months" dataUnits="days"
													 displayLocalTime="true" parseFunction="dateParseFunction" labelFunction="dateFormatFunction"/>
								</chart:horizontalAxis>
								<!-- horizontal axis renderer -->
								<chart:horizontalAxisRenderers>
									<mx:AxisRenderer axis="{ca}"  fontSize="12" canDropLabels="true" color="#0000A2" axisStroke="{chartAxisStroke}"
													 tickStroke="{chartAxisStroke}"  labelRenderer="sm.wegis.szy.renders.AxisRendererEx"/>
								</chart:horizontalAxisRenderers>
								<chart:series>
								</chart:series>
							</chart:LineChartEx>
						</s:VGroup>
						<mx:ControlBar top="40" right="20">
							<mx:Legend id="dmLegend" dataProvider="{dmChart}" fontSize="12"  buttonMode="true"
									   direction="vertical"
									   legendItemClass="widgets.wateremergency.chart.LegendItemEx"/>
						</mx:ControlBar>
					</s:NavigatorContent>
					<s:NavigatorContent label="断面地形展示"  width="100%" height="100%">
						<s:VGroup  id="dmProfileNC"  width="100%" height="100%" paddingLeft="5"  paddingTop="5" paddingRight="5"
								   creationComplete="dmProfileNC_creationCompleteHandler(event)">
							<s:HGroup id="dmProfileGroup" gap="10" width="100%">
								<s:HSlider id="dmTimeSlider" width="100%" height="100%" 
										   liveDragging="true" doubleClickEnabled="false"
										   showDataTip="true" slideDuration="200" 
										   minimum="0" stepSize="1" snapInterval="1"
										   dataTipFormatFunction="dmProfileDataTipFunc"
										   change="dmTimeSlider_changeHandler(event)"/>
								<s:Button id="dmStartBt" label="开始" buttonMode="true" styleName="SubmitRegisterStyle" click="dmStartBt_clickHandler(event)"/>
								<s:Button id="dmStopBt" label="停止" buttonMode="true" styleName="SubmitRegisterStyle" click="dmStopBt_clickHandler(event)"/>
							</s:HGroup>
							<line:HLine width="100%"/>
							<s:HGroup width="100%" horizontalAlign="center" fontWeight="bold">
								<s:Label text="时间：" height="100%"/>
								<s:Label id="dmTimeLabel" width="80" height="100%"/>
								<s:Label text="水位(米)：" height="100%"/>
								<s:Label id="dmWpLabel" width="80" height="100%"/>
							</s:HGroup>
							<chart:AreaChartEx id="terrainProfileChart" height="100%" width="100%" showDataTips="true" 
											   seriesFilters="[]"
											   dataTipFunction="terrainProfileDataTipFunction">
								<!--用于定义统计图的XY轴样式及数值范围-->
								<chart:verticalAxis>
									<mx:LinearAxis  id="dmVerticalAxis"  title="高程"/>
								</chart:verticalAxis>
								<chart:verticalAxisRenderers>
									<mx:AxisRenderer axis="{dmVerticalAxis}" axisStroke="{chartAxisStroke}" color="#0000A2" tickStroke="{chartAxisStroke}"/>
								</chart:verticalAxisRenderers>
								<chart:horizontalAxis>
									<mx:LinearAxis id="dmHorizontalAxis" title="距离"/>
								</chart:horizontalAxis>
								<chart:horizontalAxisRenderers>
									<mx:AxisRenderer axis="{dmHorizontalAxis}"  canDropLabels="true" color="#0000A2" axisStroke="{chartAxisStroke}"  tickStroke="{chartAxisStroke}"/>
								</chart:horizontalAxisRenderers>
								<chart:series>
									<mx:AreaSeries id="dmWaterPosition"  xField="distance" yField="altitude" form="curve"/>
									<mx:AreaSeries id="dmTerrainProfile"  xField="distance" yField="altitude" form="curve" />
								</chart:series>
							</chart:AreaChartEx>
							<mx:ControlBar>
								<mx:Legend id="dmterrainProfileLegend" dataProvider="{terrainProfileChart}" fontSize="12"  buttonMode="true"
										   direction="horizontal"/>
							</mx:ControlBar>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="断面对比"  width="100%" height="100%">
						<s:VGroup  width="100%" height="100%" paddingLeft="5"  paddingTop="5" paddingRight="5" >
							<s:HGroup gap="10" width="100%">
								<s:Label text="指标：" height="100%"/>
								<s:DropDownList id="targetDpCompareList" width="160" dataProvider="{targetsList}"  
												requireSelection="true" styleName="SystemSelectorStyle"
												change="targetDpCompareList_changeHandler(event)"/>
								<s:Spacer width="30"/>
								<s:Label text="对比方案：" height="100%"/>
								<s:DropDownList id="dmCompareSchemeList" width="160"  dataProvider="{DMcompareSchemeList}" labelField="planNm"
												requireSelection="true" styleName="SystemSelectorStyle"
												valueCommit="dmCompareSchemeList_valueCommitHandler(event)"/>
								<s:Spacer width="30"/>
								<s:Label text="对比断面：" height="100%"/>
								<s:DropDownList id="dmCompareList" width="160" dataProvider="{dmCalcList}" labelField="sectionName"
												requireSelection="true" styleName="SystemSelectorStyle"
												change="dmCompareList_changeHandler(event)"/>
								<s:Spacer width="30"/>
								<s:Button id="queryCompareBt" label="查询" buttonMode="true" styleName="SubmitRegisterStyle"
										  click="queryCompareBt_clickHandler(event)"/>
								<s:HGroup id="dmCompareType" paddingLeft="20"/>
							</s:HGroup>
							<line:HLine width="100%"/>
							<chart:LineChartEx id="dmCompareChart" width="100%" height="100%" 
											   dataTipFunction="dmDataTipFunction">
								<!-- vertical axis -->
								<chart:verticalAxis>
									<mx:LinearAxis id="verticalCompareAxis" baseAtZero="false" />
								</chart:verticalAxis>
								<chart:verticalAxisRenderers>
									<mx:AxisRenderer axis="{verticalCompareAxis}"  fontSize="12" axisStroke="{chartAxisStroke}" color="#0000A2" tickStroke="{chartAxisStroke}"/>
								</chart:verticalAxisRenderers>
								<!-- horizontal axis -->
								<chart:horizontalAxis>
									<mx:DateTimeAxis id="compareCa"  title="时间" interval="1" labelUnits="months" dataUnits="days"
													 displayLocalTime="true" parseFunction="dateParseFunction" labelFunction="dateFormatFunction"/>
								</chart:horizontalAxis>
								<!-- horizontal axis renderer -->
								<chart:horizontalAxisRenderers>
									<mx:AxisRenderer axis="{compareCa}"  fontSize="12" canDropLabels="true" color="#0000A2" axisStroke="{chartAxisStroke}"
													 tickStroke="{chartAxisStroke}"  labelRenderer="sm.wegis.szy.renders.AxisRendererEx"/>
								</chart:horizontalAxisRenderers>
								<chart:series>
								</chart:series>
							</chart:LineChartEx>
						</s:VGroup>
						<mx:ControlBar top="40" right="20">
							<mx:Legend id="dmCompareLegend" dataProvider="{dmCompareChart}" fontSize="12"  buttonMode="true"
									   direction="vertical" 
									   legendItemClass="widgets.wateremergency.chart.LegendItemEx"/>
						</mx:ControlBar>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Group>
		<!--河流信息展示-->
		<s:Group id="riverGroup" width="100%"  height="100%"  visible="false" visible.riverState="true" >
			<s:VGroup width="100%" height="100%" gap="3">
				<s:ButtonBar id="riverBTB" dataProvider="{riverVW}"/>
				<s:Rect width="100%" height="1">
					<s:fill>
						<s:SolidColor color="0x979797" alpha="0.5"/>
					</s:fill>
				</s:Rect>
				<mx:ViewStack id="riverVW" width="100%" height="100%">
					<s:NavigatorContent label="河道计算结果"  width="100%" height="100%">
						<s:VGroup  width="100%" height="100%" paddingLeft="5"  paddingTop="5" paddingRight="5">
							<mx:Grid verticalGap="15" horizontalGap="20">
								<mx:GridRow>
									<mx:GridItem>
										<s:HGroup gap="10" >
											<s:Label text="指标：" height="100%"/>
											<s:DropDownList id="targetRwList" width="160" dataProvider="{targetsList}"  
															requireSelection="true" styleName="SystemSelectorStyle"
															change="targetRwList_changeHandler(event)"/>
										</s:HGroup>
									</mx:GridItem>
									<mx:GridItem>
										<s:HGroup gap="10">
											<s:Button id="queryRwBt" label="查询" buttonMode="true"
													  styleName="SubmitRegisterStyle"
													  click="queryRwBt_clickHandler(event)"/>
											<s:Button id="exportRwBt" label="导出计算结果" buttonMode="true" 
													  styleName="SubmitRegisterStyle"
													  click="exportRwBt_clickHandler(event)"/>
											<s:Button id="mapCalcBt" label="浓度地图展示" visible="false" buttonMode="true" styleName="SubmitRegisterStyle"
													  click="queryRwBt_clickHandler(event)"/>
										</s:HGroup>
										<s:HGroup id="riverCalcType" paddingLeft="20"/>
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>	
							<line:HLine width="100%"/>
							<chart:LineChartEx id="hdChart" width="100%" height="100%" 
											   dataTipFunction="hdCalcDataTipFunction">
								<!-- vertical axis -->
								<chart:verticalAxis>
									<mx:LinearAxis id="hdVerticalAxis" baseAtZero="false" />
								</chart:verticalAxis>
								<chart:verticalAxisRenderers>
									<mx:AxisRenderer axis="{hdVerticalAxis}" fontSize="12" axisStroke="{chartAxisStroke}" color="#0000A2" tickStroke="{chartAxisStroke}"/>
								</chart:verticalAxisRenderers>
								<!-- horizontal axis -->
								<chart:horizontalAxis>
									<mx:LinearAxis id="hdHorizontalAxis" title="距离(m)" baseAtZero="false"/>
								</chart:horizontalAxis>
								<!-- horizontal axis renderer -->
								<chart:horizontalAxisRenderers>
									<mx:AxisRenderer axis="{hdHorizontalAxis}" canDropLabels="true" color="#0000A2" axisStroke="{chartAxisStroke}"
													 tickStroke="{chartAxisStroke}" fontSize="12"  labelRenderer="sm.wegis.szy.renders.AxisRendererEx"/>
								</chart:horizontalAxisRenderers>
							</chart:LineChartEx>
						</s:VGroup>
						<mx:ControlBar top="40" right="20">
							<mx:Legend id="hdLegend" dataProvider="{hdChart}"  fontSize="12"  buttonMode="true"
									   direction="vertical"
									   legendItemClass="widgets.wateremergency.chart.LegendItemEx"/>
						</mx:ControlBar>
					</s:NavigatorContent>
					<!--河道对比-->
					<s:NavigatorContent label="河道对比"  width="100%" height="100%">
						<s:VGroup width="100%" height="100%" paddingLeft="5">
							<mx:Grid verticalGap="15" horizontalGap="20">
								<mx:GridRow>
									<mx:GridItem>
										<s:HGroup gap="10" >
											<s:Label text="指标：" height="100%"/>
											<s:DropDownList id="riverTargetRwList" width="160" dataProvider="{targetsList}"  
															requireSelection="true" styleName="SystemSelectorStyle" 
															valueCommit="riverTargetRwList_valueCommitHandler(event)"
															/>
											<s:Spacer width="30"/>
											<s:Label text="对比方案：" height="100%"/>
											<s:DropDownList id="riverCompareSchemeList" width="160"  dataProvider="{compareSchemeList}" labelField="planNm"
															requireSelection="true" styleName="SystemSelectorStyle"
															change="targetDpList_changeHandler(event)"/>
										</s:HGroup>
									</mx:GridItem>
									<mx:GridItem>
										<s:HGroup gap="10">
											<s:Button id="riverQueryRwBt" label="查询" buttonMode="true" styleName="SubmitRegisterStyle"
													  click="riverQueryRwBt_clickHandler(event)"/>
											<s:Button id="mapCompare" label="浓度地图展示" buttonMode="true" styleName="SubmitRegisterStyle"
													  click="riverQueryRwBt_clickHandler(event)"/>
										</s:HGroup>
										<s:HGroup id="riverCompareType" paddingLeft="20"/>
									</mx:GridItem>
									<mx:GridItem>
										<s:HGroup gap="10">
											<s:Label text="选择对比月份：" height="100%"/>
											<s:DropDownList id="riverCompareMonthDpList"  enabled="false" requireSelection="true" width="160"
															styleName="SystemSelectorStyle" dataProvider="{riverCompareMonth}" 
															change="riverCompareMonthDpList_changeHandler(event)"/>
										</s:HGroup>
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>	
							<line:HLine width="100%"/>
							
							<chart:LineChartEx id="riverCompareChart" width="100%" height="100%" 
											   dataTipFunction="hdCompareDataTipFunction">
								<!-- vertical axis -->
								<chart:verticalAxis>
									<mx:LinearAxis id="riverVerticalAxis" baseAtZero="false" />
								</chart:verticalAxis>
								<chart:verticalAxisRenderers>
									<mx:AxisRenderer axis="{riverVerticalAxis}" fontSize="12" axisStroke="{chartAxisStroke}" color="#0000A2" tickStroke="{chartAxisStroke}"/>
								</chart:verticalAxisRenderers>
								<!-- horizontal axis -->
								<chart:horizontalAxis>
									<mx:LinearAxis id="riverHorizontalAxis" title="距离(m)" baseAtZero="false"/>
								</chart:horizontalAxis>
								<!-- horizontal axis renderer -->
								<chart:horizontalAxisRenderers>
									<mx:AxisRenderer axis="{riverHorizontalAxis}" canDropLabels="true" color="#0000A2" axisStroke="{chartAxisStroke}"
													 tickStroke="{chartAxisStroke}" fontSize="12"  labelRenderer="sm.wegis.szy.renders.AxisRendererEx"/>
								</chart:horizontalAxisRenderers>
							</chart:LineChartEx>
						</s:VGroup>
						<mx:ControlBar top="40" right="20">
							<mx:Legend id="riverCompareLegend" dataProvider="{riverCompareChart}"  fontSize="12"  buttonMode="true"
									   direction="vertical"
									   legendItemClass="widgets.wateremergency.chart.LegendItemEx"/>
						</mx:ControlBar>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Group>
	</s:Panel>
	<!--河道污染物浓度对比-->
	<s:Panel id="riverPollutionCompare" title="污染物浓度演进过程展示" width="100%" height="100%" 
			 visible="false" visible.pollutionCompareState="true">
		<s:controlBarContent>
			<fx:Array>
				<s:Button id="riverPollutionCompareCloseBt" skinClass="sm.wegis.szy.skins.CloseLoginButtonSkin" buttonMode="true"
						  click="riverPollutionCompareCloseBt_clickHandler(event)"/>
			</fx:Array>
		</s:controlBarContent>
		<s:VGroup width="100%" height="100%" gap="0">
			<s:BorderContainer width="100%" height="100%">
				<s:HGroup width="100%" height="100%" gap="0">
					<s:Group id="currentGroup" width="100%" height="100%">
						<ns:MapCtrl id="currentPlanMap" width="100%" height="100%" rollOver="mapRollOverHandler(event)"/>
						<s:Group id="currentPanelGroup" minWidth="200"  minHeight="25" horizontalCenter="0" top="5">
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor color="{getStyle('textSymbolBgColor')}" alpha="{getStyle('textSymbolAlpha')}"/>
								</s:fill>
							</s:Rect>
							<s:Label id="currentPanel" color="0xFFFFFF" fontSize="14" horizontalCenter="0" verticalCenter="0" />
						</s:Group>
						<components:RiverPollutionInfo id="currentPollutionInfo" visible="false" left="5" bottom="5"/>
					</s:Group>
					<line:VLine color="0x333333"/>
					<s:Group id="compareGroup" width="100%" height="100%">
						<ns:MapCtrl id="comparePlanMap" width="100%" height="100%"  rollOver="mapRollOverHandler(event)"/>
						<s:Group id="comparePanelGroup" minWidth="200"  minHeight="25" horizontalCenter="0" top="5">
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor color="{getStyle('textSymbolBgColor')}" alpha="{getStyle('textSymbolAlpha')}"/>
								</s:fill>
							</s:Rect>
							<s:Label id="comparePanel" color="0xFFFFFF" fontSize="14" horizontalCenter="0" verticalCenter="0" />
						</s:Group>
						<components:RiverPollutionInfo id="comparePollutionInfo" visible="false" left="5" bottom="5"/>
					</s:Group>
				</s:HGroup>
				<s:BorderContainer  borderVisible="true" borderColor="0xEAEAEA" right="5" bottom="5">
					<s:VGroup  gap="5">
						<s:Group height="25" width="100%"  minWidth="50">
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor  color="0x00A8F3" />
								</s:fill>
							</s:Rect>
							<s:Label id="label" text="图例(单位:mg/L)" color="0xFFFFFF"   verticalAlign="middle"  horizontalCenter="0" height="100%" />
						</s:Group> 
						<s:VGroup id="content"   paddingLeft="5"  paddingRight="5" paddingBottom="5"/>
					</s:VGroup>
				</s:BorderContainer>
			</s:BorderContainer>
			<components:TimeSlider id="riverCompareTimeSlider"  width="100%" change="timeSlider_changeHandler(event)"/>
		</s:VGroup>
	</s:Panel>
</ns:WidgetBase>
