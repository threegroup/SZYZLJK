<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   backgroundAlpha="0.7"
			   backgroundColor="#646464" 
			   preloader="com.supermap.wegis.common.components.progressBar.InitBar"
			   preinitialize="preinitializeHandler(event)">
	<fx:Metadata>
		[ResourceBundle("osmf")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.supermap.wegis.common.core.plugin.PluginClass;
			import com.supermap.wegis.common.core.plugin.PluginManager;
			import com.supermap.wegis.common.utils.Property;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.StyleEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import org.springextensions.actionscript.context.support.FlexXMLApplicationContext;
			
			import sm.wegis.szy.events.SystemEvent;
			
			private var appContext:FlexXMLApplicationContext;
			private var springContextUrl:String;
			//等待plugin和stylecss加载完，加载spring
			private var isReadCreateSpring:Boolean = false;
			//spring和view都创建完成
			private var allCreateComplete:Boolean =false;
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				Alert.okLabel = "确定";
				Alert.cancelLabel ="取消";
				Alert.yesLabel ="是";
				Alert.noLabel ="否";
				
				//全局异常捕获
				this.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, systemErrorHandler);
				getConfigInfo();
			}
			
			//捕捉系統全局错误
			private function systemErrorHandler(event:UncaughtErrorEvent):void
			{
				event.preventDefault();
				Alert.show(event.error.message, "错误提示");
			}
			
			/**
			 * 获取系统配置信息
			 * */
			private function getConfigInfo():void
			{
				var http:HTTPService = new HTTPService();
				http.url = "config/szy_config.xml"+"?t="+ new Date().time;;
				http.resultFormat = "text";
				http.addEventListener(ResultEvent.RESULT,initSystemStyle);
				http.addEventListener(FaultEvent.FAULT,fault);
				http.send();
			}
			
			private function initSystemStyle(event:ResultEvent):void
			{
				var xml:XML = new XML(event.result.toString());
				var pluginClass:PluginClass =new PluginClass();
				pluginClass.pluginUrl = xml.target[0].root.pluginUrl.@url.toString();
				pluginClass.nameSpace = xml.target[0].root.pluginUrl.@nameSpace.toString();
				springContextUrl = xml.target[0].root.springContextUrl.@url.toString();
				
				PluginManager.callBackFun = callBackHandler;
				PluginManager.LoadPlugin(pluginClass);
				
				var styleEventDispatcher:IEventDispatcher =FlexGlobals.topLevelApplication.styleManager.loadStyleDeclarations2(xml.target[0].root.themeUrl.@url,
					true,ApplicationDomain.currentDomain); 
				styleEventDispatcher.addEventListener(StyleEvent.COMPLETE,callBackHandler);
			}
			
			private function callBackHandler(event:StyleEvent = null):void
			{
				if(isReadCreateSpring == false)
				{
					isReadCreateSpring = true;
				}
				else
				{
					//加载Spring参数
					createSpringContainer();
				}
			}
			
			protected function createSpringContainer():void
			{
				//监听ApplicationViewAssembler,创建完成
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.SYSTEM_CREATION_COMPLETE
					,systemCreationComplete);
				
				var appContextPath:String = springContextUrl;
				appContext = new FlexXMLApplicationContext(appContextPath);
				appContext.addEventListener(Event.COMPLETE, systemCreationComplete);
				appContext.load();
			}
			
			private function systemCreationComplete(event:Object):void
			{
				if(allCreateComplete == false)
				{
					allCreateComplete = true;
				}
				else
				{
					getSecurityControler();
				}
			}
			
			private function getSecurityControler():void
			{
				//获取权限后，在SystemSecurityCommand请求系统初始化菜单配置文件
				//在这里执行系统权限验证
				var systemEvent:SystemEvent = new SystemEvent(SystemEvent.SYSTEM_SECURITY);
				systemEvent.dispatch();
			}
			
			private function fault(event:FaultEvent):void
			{
				Alert.show(event.message.toString());
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:Application>
