<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- 
The default skin class for a Spark DataGrid component.  

<p>This skin defines all of the optional DataGrid skin parts except for rowBackground
(by default, no per-row background visual element is displayed).
It defines the default value for the grid's itemRenderer property as 
spark.skins.spark.DefaultGridItemRenderer, and the default value of the 
columnHeaderGroup's headerRenderer property as 
<code>spark.skins.spark.DefaultGridHeaderRenderer</code>.</p>

<p>The values of the following DataGrid skin parts are defined by declarations
and can be overridden by subclasses of this class: <code>alternatingRowColors</code>,
<code>caretIndicator</code>, <code>columnSeparator</code>, <code>editorIndicator</code>, 
<code>headerColumnSeparator</code>, <code>hoverIndicator</code>, 
<code>rowSeparator</code>, <code>selectionIndicator</code>.  All of these 
declarations define DataGrid skin parts except <code>headerColumnSeparator</code> and
<code>headerRenderer</code> which are used for the values of the columnHeaderGroup's 
<code>columnSeparator</code> and <code>headerRenderer</code> properties.</p>

@see spark.components.DataGrid
@langversion 3.0
@playerversion Flash 10
@playerversion AIR 2.5
@productversion Flex 4.5
-->

<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:renderer="sm.wegis.szy.renders.*"
			 minWidth="89" minHeight="84"
			 alpha.disabled="0.5" alpha="0.8">
	
	<fx:Metadata>
		<![CDATA[
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		@langversion 3.0
		@playerversion Flash 10
		@playerversion AIR 1.5
		@productversion Flex 4
		*/
		[HostComponent("spark.components.DataGrid")]
		]]>
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	
	<fx:Declarations>
		<!--- @private -->        
		<fx:Component id="alternatingRowColorsBackground">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const colors:Array = dataGrid.getStyle("alternatingRowColors");
							if (colors && (colors.length > 0))
							{
								dataGrid.styleManager.getColorNames(colors); // lazily replace color names with ints
								rowBackgroundFillColor.color = colors[rowIndex % colors.length];
							}
							else
							{          
								// This should be the same as bgFill.color.
								rowBackgroundFillColor.color = 0xFFFFFF;
							}
						}
					]]>
				</fx:Script>  
				<s:fill>
					<!--- @private -->   
					<s:SolidColor id="rowBackgroundFillColor" color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->        
		<fx:Component id="caretIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("caretColor");
							caretIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="caretIndicatorFill" color="0x0167FF" weight="1"/>
				</s:stroke>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="columnSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke caps="square" color="#C6C6C6" weight="1"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the columnSeparator property for the columnHeaderGroup. -->
		<fx:Component id="headerColumnSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke caps="square" color="#C6C6C6" weight="1"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the headerRenderer property for the columnHeaderGroup. 
		The default is spark.skins.spark.DefaultGridHeaderRenderer -->
		<fx:Component id="headerRenderer">
			<renderer:InfoGridHeaderRendererEx/>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="hoverIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("rollOverColor");
							hoverIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<s:fill>
					<!--- @private -->
					<s:SolidColor id="hoverIndicatorFill" color="0xCEDBEF"/>
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="rowSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke caps="square" color="#C6C6C6" weight="1"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="selectionIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("selectionColor");
							selectionIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<s:fill>
					<!--- @private -->
					<s:SolidColor id="selectionIndicatorFill" color="0xA8C6EE"/>
				</s:fill>                
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="editorIndicator">
			<s:Rect>
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>                
			</s:Rect>
		</fx:Component>                    
		
	</fx:Declarations>
	
	<!-- column header, content -->
	<s:VGroup left="0" right="0" top="0" bottom="0" gap="0" horizontalAlign="justify">
		
		<s:Group left="0" right="0" top="0" bottom="0">
			<!--表格标头背景，默认透明-->
			<s:Rect left="0" right="0" top="0" bottom="0" topLeftRadiusX="0" topLeftRadiusY="0"
					topRightRadiusX="0" topRightRadiusY="0" alpha="0">
				<s:fill>
					<!--<s:LinearGradient rotation="90">
						<s:GradientEntry color="#FDFDFD"/>
						<s:GradientEntry color="#D2D2D2"/>
					</s:LinearGradient>-->
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Rect>
			
			<!--- @private -->
			<s:GridColumnHeaderGroup id="columnHeaderGroup" left="0" right="0" top="0" bottom="0"
									 minHeight="21" columnSeparator="{headerColumnSeparator}"
									 headerRenderer="{headerRenderer}" paddingLeft="1"
									 paddingRight="1" paddingTop="1" />
		</s:Group>
		
		<s:Group height="100%">
			
			<!--- @private -->
			<s:Rect id="background" left="1" right="1" top="1" bottom="1" bottomLeftRadiusX="0"
					bottomLeftRadiusY="0" bottomRightRadiusX="0" bottomRightRadiusY="0" alpha="0">
				<s:fill>
					<!--- Defines the color of the background. The default color is 0xFFFFFF. -->
					<s:SolidColor id="bgFill" color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
			
			<!-- header separator, scroller and grid -->
			<s:VGroup width="100%" height="100%" gap="-1" horizontalAlign="justify">
				<!--- @private -->
				<s:Line id="headerSeparator">
					<s:stroke>
						<s:SolidColorStroke caps="square" color="#C6C6C6" weight="1"/>
					</s:stroke>
				</s:Line>          
				
				<!--- @private -->
				<s:Scroller id="scroller" height="100%" hasFocusableChildren="false"
							minViewportInset="1">
					<!--- @private -->
					<s:Grid id="grid" itemRenderer="spark.skins.spark.DefaultGridItemRenderer">
						<s:GridLayer name="backgroundLayer"/>
						<s:GridLayer name="selectionLayer"/>
						<s:GridLayer name="editorIndicatorLayer"/>                            
						<s:GridLayer name="rendererLayer"/>
						<s:GridLayer name="overlayLayer"/>
					</s:Grid>                    
				</s:Scroller>
			</s:VGroup>
			
		</s:Group>
		
	</s:VGroup>
	
	<!-- border -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="0" radiusY="0">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" color="#C6C6C6" weight="1"/>
		</s:stroke>
	</s:Rect>    
	
	<!--<s:RectangularDropShadow id="dropShadow" blurX="5" blurY="5" alpha="0.5" distance="3"
	angle="90" color="#000000"
	left="0" top="0" right="0" bottom="0"
	blRadius="0" brRadius="0"
	tlRadius="0" trRadius="0"/>-->
	
</s:SparkSkin>
