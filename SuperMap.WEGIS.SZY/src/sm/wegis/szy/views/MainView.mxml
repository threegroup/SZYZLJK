<?xml version="1.0" encoding="utf-8"?>
<baseclass:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:baseclass="sm.wegis.szy.core.baseclass.*"
					xmlns:ns="library://ns.supermap.com/flex/wegis/common"
					xmlns:supermap="http://www.supermap.com/iclient/2010"
					xmlns:basemap="widgets.basemap.*"
					width="100%" height="100%" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Resize id="hideEffect" duration="1000" easer="{bounceEffect}" repeatCount="1"
				  target="{BodyContainerID}" widthFrom="300" widthTo="0"/>
		<s:Resize id="showEffect" duration="1000" easer="{bounceEffect}" repeatCount="1"
				  target="{BodyContainerID}" widthFrom="0" widthTo="300"/>
		<s:Bounce id="bounceEffect"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.adobe.utils.StringUtil;
			import com.supermap.wegis.common.components.events.MenuEventEx;
			import com.supermap.wegis.common.components.events.ScrollPanelEvent;
			import com.supermap.wegis.common.components.events.ToolEvent;
			import com.supermap.wegis.common.components.menuBar.MenuItem;
			import com.supermap.wegis.common.components.toolBar.ToolItem;
			import com.supermap.wegis.common.core.resourceManager.ResourceManagerEx;
			import com.supermap.wegis.common.core.widget.WidgetManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import sm.wegis.szy.core.utils.MapCtrlTool;
			import sm.wegis.szy.events.MapLayerEvent;
			import sm.wegis.szy.events.MenuItemEvent;
			import sm.wegis.szy.events.SystemEvent;
			import sm.wegis.szy.events.ToolItemEvent;
			import sm.wegis.szy.skins.MenuItemSkinEx;
			import sm.wegis.szy.vo.UserVO;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.choosePanel(true);
				
				initListener();
			}
			
			/**更改面板显示内容
			 * @param isLogin：登录面板
			 * @param isNormal：系统面板
			 * @param isChoose：系统选择面板*/
			private function choosePanel(isLogin:Boolean=false, isNormal:Boolean=false, isChoose:Boolean=false):void
			{
				//登录面板
				this.loginPanelId.visible = isLogin;
				this.loginPanelId.includeInLayout = isLogin;
				
				//登录之后运行面板
				this.mainPanelId.visible = isNormal;
				this.mainPanelId.includeInLayout = isNormal;
				
				//系统选择面板
				this.choosePanelId.visible = isChoose;
				this.choosePanelId.includeInLayout = isChoose;
			}
			
			public function initSystemInitEventHandler():void 
			{ 
				//初始化加载的widget 
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.INITIAL_WIDGET 
					,addInitialWidget); 
				//根据菜单选择切换主体面板内容 
				CairngormEventDispatcher.getInstance().addEventListener(MenuItemEvent.SYSTEM_MENU_SELECT_CHANGE 
					,switchBodyContent); 
			} 
			
			/**初始化视图事件监听*/
			public function initListener():void
			{
				if(this.systemMenuId != null)
				{
					//系统菜单
					this.systemMenuId.addEventListener(MenuEventEx.MENU_CLICK, systemMenuHandler);
				}
				
				if(this.ControlBodyControlID != null)
				{
					//控制左侧面板显示隐藏
					this.ControlBodyControlID.addEventListener(MouseEvent.MOUSE_DOWN, controlBodyHandler);
				}
				
				if(this.MapTool != null)
				{
					//地图工具
					this.MapTool.addEventListener(ToolEvent.TOOL_CLICK, mapToolHandler);
				}
				
				//系统选择项事件
				this.ScrollButtonPanel.addEventListener(ScrollPanelEvent.CLICK, scrollButtonClickHandler);
				
				//底图切换
				CairngormEventDispatcher.getInstance().addEventListener(MapLayerEvent.BASE_MAP_CHANGE, basemapChangeHandler);
				
				//登录成功之后响应
				CairngormEventDispatcher.getInstance().addEventListener(SystemEvent.LoginInResponse, loginInResponseHandler);
			}
			
			//登录成功
			private function loginInResponseHandler(event:SystemEvent):void
			{
				//进入系统选择面板，此处要注意，如果返回结果只有一个系统，直接进入，如果有多个，则显示系统选择面板。
				var data:Object = event.data;
				if(data != null)
				{
					var attrs:Object = data["attributes"];
					var userVo:UserVO = new UserVO();
					userVo.isLogin = true;
					
					userVo.name = attrs["user"]["name"];
					userVo.userId = attrs["user"]["id"];
					
					var tempAarray:Array = attrs["waterBodys"] as Array;
					if(tempAarray != null && tempAarray.length > 0)
					{
						for(var i:int=0; i<tempAarray.length; i++)
						{
							var item:Object = tempAarray[i];
							tempAarray[i]["key"] = item["mapId"] + item["id"];
						}
					}
					userVo.systemList = new ArrayCollection(tempAarray);
					modelLocator.userVo = userVo;
					
					this.ScrollButtonPanel.dataProvider = userVo.systemList;
					
					//如果只有一个系统，不在进行系统选择，直接进入系统
					if(userVo.systemList.length == 1)
					{
						var param:Object = userVo.systemList[0];
						modelLocator.systemInfo.subSystemTitle = param["name"];
						modelLocator.systemInfo.subSystemID = param["key"];
						
						this.choosePanel(false,true,false);
						systemInitControler();
					}
					else if(userVo.systemList.length > 1)
					{
						this.choosePanel(false, false, true);
					} else if (userVo.systemList.length == 0) {
						Alert.show("登录用户没有可以访问的系统","警告");
					}
				}
			}
			
			//系统初始化，请求function.xml文件
			private function systemInitControler():void
			{
				var systemEvent:SystemEvent
				if (modelLocator.userVo.isSystemInited == false) {
					//系统初始只进行一次
					modelLocator.userVo.isSystemInited = true;
					//系统初始化
					systemEvent = new SystemEvent(SystemEvent.SYSTEM_INIT);
				} else {
					//切换用户或者子系统，派发重新加载数据的事件，针对已经初始化后的情景 
					systemEvent = new SystemEvent(SystemEvent.SYSTEM_RELOAD);
				}
				systemEvent.dispatch();
			}
			
			private function mapToolHandler(e:ToolEvent):void
			{
				if(e.Message is ToolItem)
				{
					var item:ToolItem = e.Message as ToolItem;
					var toolEvent:ToolItemEvent = new ToolItemEvent(ToolItemEvent.MAP_TOOL_ITEM_CLICK);
					if(item != null)
					{
						toolEvent.data = item;
						toolEvent.dispatch();
					}
				}
			}
			
			private function scrollButtonClickHandler(event:ScrollPanelEvent):void
			{
				var data:Object = event.Message;
				if(data != null && data.hasOwnProperty("param"))
				{
					var param:Object = data.param;
					modelLocator.systemInfo.subSystemTitle = param["name"];
					modelLocator.systemInfo.subSystemID = param["key"];
					choosePanel(false,true);
					systemInitControler();
				}
			}
			
			private function basemapChangeHandler(e:MapLayerEvent):void
			{
				var data:Object = e.data;
				if(data != null)
				{
					if(data.hasOwnProperty("baseMapState"))
					{
						var current:String = data["baseMapState"];
						if(current == "vectorMapState")
						{
							this.CopyRightID.styleName = "verctorCopyRightStyle";
						}
						else
						{
							this.CopyRightID.styleName = "imageCopyRightStyle";
						}
					}
				}
			}
			
			//控制左侧面板显示隐藏
			private function controlBodyHandler(e:MouseEvent):void
			{
				this.showEffect.stop();
				this.hideEffect.stop();
				var tempWidth:Number = this.BodyContainerID.width;
				if(tempWidth == 0)
				{
					this.showEffect.play();
					this.ControlBodyControlID.source = ResourceManagerEx.FindResource("Left").cls;
				}
				else
				{
					this.hideEffect.play();
					this.ControlBodyControlID.source = ResourceManagerEx.FindResource("Right").cls;
				}
			}
			
			//系统一级菜单响应
			private function systemMenuHandler(e:MenuEventEx):void
			{
				if(e.Message is MenuItem)
				{
					var item:MenuItem = e.Message as MenuItem;
					var menuEvent:MenuItemEvent = new MenuItemEvent(MenuItemEvent.SYSTEM_MENU_SELECT_CHANGE);
					if(item != null)
					{
						menuEvent.data = item.data;
						menuEvent.dispatch();
					}
				}
			}
			
			//加载初始化widget
			private function addInitialWidget(event:SystemEvent):void
			{
				var initWidgetConfig:Object = event.data;
				if(initWidgetConfig == null)
				{
					return;
				}
				if(initWidgetConfig is ArrayCollection || initWidgetConfig is Array)
				{
					for each(var obj:Object in initWidgetConfig)
					{
						obj.parent = MainBodyContainerID;
					}
				}
				else if(initWidgetConfig is Object)
				{
					initWidgetConfig.parent = MainBodyContainerID;
				}
				WidgetManager.getInstance().loadWidget(initWidgetConfig);
			}
			
			
			//切换主体模块内容
			private function switchBodyContent(event:MenuItemEvent):void
			{
				var menuItemData:Object = event.data;
				if(menuItemData == null) {
					return;
				}
				
				//若有多个子模块
				if(menuItemData.hasOwnProperty("subitems")
					&& menuItemData["subitems"] != null){
					var subitems:Object = menuItemData["subitems"];
					var subWidgets:ArrayCollection =  subitems["subitem"] is  ArrayCollection 
						? subitems["subitem"] as  ArrayCollection
						: new ArrayCollection([subitems["subitem"]]);
					if(subWidgets != null && subWidgets.length > 0) {
						for each (var item:Object in subWidgets) {
							if(item.hasOwnProperty("url") 	&& item["url"] != null )
							{
								item.parent = this.RightDownContainerID;
								WidgetManager.getInstance().loadWidget(item);
							}
						}
					}
				}
				
				this.BodyContainerID.removeAllElements();
				menuItemData.parent = this.BodyContainerID;
				WidgetManager.getInstance().loadWidget(menuItemData);
			}
			
			/*****添加二维地图控件******************************************************/
			public function addMapCtrl(component:IVisualElement):void
			{
				this.MapContainerID.addElement(component);
				
				this.initMapControl();
			}
			
			/**控件初始化，调用控件实例时，必须先调用该方法*/
			public function initMapControl():void
			{
				if(modelLocator.mapCtrl != null)
				{
					var mapCtrlTool:MapCtrlTool = new MapCtrlTool();
					mapCtrlTool.initMapCompass(this.MapContainerID);
				}
			}
			
			protected function userLoginId_clickHandler(event:MouseEvent):void
			{
				this.choosePanel(true);
			}
			
			protected function closeLoginId_clickHandler(event:MouseEvent):void
			{
				this.choosePanel(false,true);
			}
			
			protected function SubmitBtn_clickHandler():void
			{
				var name:String = StringUtil.trim(this.UserIdName.text.toString());
				var pwd:String = StringUtil.trim(this.PwdValue.text.toString());
				
				if(name == "" || pwd == "")
				{
					this.LoginInfoLabel.text = "用户名或密码不能为空";
				}
				else
				{
					modelLocator.userVo.userName = name;
					modelLocator.userVo.password = pwd;
					this.LoginInfoLabel.text = "";//清空登录信息
					
					//派发登录请求
					var loginInEvent:SystemEvent = new SystemEvent(SystemEvent.LoginIn);
					loginInEvent.data = modelLocator.userVo;
					loginInEvent.dispatch();
				}
			}
			
			protected function closeChooseId_clickHandler(event:MouseEvent):void
			{
				this.choosePanel(false,true);
			}
			
			protected function OkBtn_clickHandler(event:MouseEvent):void
			{
				this.choosePanel(false,true);
			}
			
			protected function changeSystemId_clickHandler(event:MouseEvent):void
			{
				this.choosePanel(false,false,true);
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup id="mainPanelId" width="100%" height="100%" gap="0">
		<s:BorderContainer id="TopContainerID" width="100%" height="80">
			<!--<s:Group width="100%" height="100%">
			<s:Rect left="0" right="0" top="0" bottom="0">
			<s:fill>
			<s:BitmapFill fillMode="repeat"
			source="{ResourceManagerEx.FindResource('bg').cls}"/>
			</s:fill>
			</s:Rect>
			</s:Group>-->
			<s:Image left="10" height="90%"
					 source="{ResourceManagerEx.FindResource('logoTIcon').cls}" verticalCenter="0"/> 
			<s:HGroup right="0" height="100%" gap="0" paddingLeft="0" verticalAlign="middle">
				<s:VGroup height="100%" horizontalAlign="right" paddingRight="5">
					<s:HGroup gap="10" horizontalAlign="right" verticalAlign="middle">
						<s:Label id="subSystemTitleId" height="100%" styleName="SubSystemTitleStyle"
								 text="{modelLocator.systemInfo.subSystemTitle}"/>
						<s:Button id="changeSystemId" width="60" height="100%" label="[切换系统]"
								  buttonMode="true" click="changeSystemId_clickHandler(event)"
								  skinClass="sm.wegis.szy.skins.LoginButtonSkin"/>
						<s:Label id="userInfoId" height="100%" styleName="SubSystemTitleStyle"
								 text="管理员"/>
						<s:Button id="userLoginId" width="40" height="100%" label="[登录]"
								  buttonMode="true" click="userLoginId_clickHandler(event)"
								  skinClass="sm.wegis.szy.skins.LoginButtonSkin"/>
					</s:HGroup>
					<s:Spacer height="100%"/>
					<ns:MenuBar id="systemMenuId" height="100%"
								dataProvider="{modelLocator.menuInfo.mapMenuList}" isToolTip="false"
								isUpdateStatus="true" itemHeight="30" itemHorizontalGap="0"
								itemRowCount="1" itemVerticalGap="4" itemWidth="70"
								labelField="{modelLocator.menuInfo.mapMenuLabel}"
								menuItemSkinClass="{MenuItemSkinEx}" styleName="menuStyle"/>
				</s:VGroup>
			</s:HGroup>
			<s:SWFLoader width="100%" height="100%" source="assets/swf/bubble.swf"/>
		</s:BorderContainer>
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#B5B9C0"/>
			</s:fill>
		</s:Rect>
		<s:HGroup id="BottomContainerID" width="100%" height="100%" gap="0" paddingBottom="0"
				  paddingTop="0">
			<s:BorderContainer id="BodyContainerID" width="300" height="100%">
			</s:BorderContainer>
			<s:Group id="MainBodyContainerID" width="100%" height="100%">
				<s:Group top="0" bottom="{RightDownContainerID.height}" width="100%">
					<s:BorderContainer id="MapContainerID" width="100%" height="100%"/>
					<s:HGroup id="CopyRightID" left="3" bottom="3" width="100%" gap="0"
							  horizontalAlign="left" verticalAlign="middle">
						<s:Label fontFamily="Times New Roman" text="©"/>
						<s:Label text="{modelLocator.systemInfo.copyRight}"/>
					</s:HGroup>
				</s:Group>
				<!--右侧下方布局面板,和地图在右侧上下分布 -->
				<s:BorderContainer id="RightDownContainerID" bottom="0" width="100%" minHeight="0"/>
				<s:HGroup left="0" top="0" height="100%" gap="0" horizontalAlign="left"
						  verticalAlign="middle">
					<s:Rect width="1" height="100%">
						<s:fill>
							<s:SolidColor color="#B5B9C0"/>
						</s:fill>
					</s:Rect>
					<s:BorderContainer width="15" height="60">
						<s:Image id="ControlBodyControlID" buttonMode="true"
								 source="{ResourceManagerEx.FindResource('Left').cls}"/>
					</s:BorderContainer>
				</s:HGroup>
				<s:BorderContainer right="5" top="5" height="30" borderVisible="true">
					<ns:ToolBar id="MapTool" height="100%" buttonStyleName="toolStyle"
								dataProvider="{modelLocator.toolInfo.mapToolList}"
								labelField="{modelLocator.toolInfo.mapToolLabel}"/>
				</s:BorderContainer>
			</s:Group> 
		</s:HGroup>
	</s:VGroup>
	
	<s:BorderContainer id="loginPanelId" width="100%" height="100%" backgroundAlpha="1"
					   backgroundColor="#D9D9D9">
		<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:BorderContainer>
				<s:VGroup width="400" gap="10" horizontalAlign="center" paddingBottom="10"
						  paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle">
					<s:HGroup width="100%" height="30" paddingLeft="10" paddingRight="10"
							  verticalAlign="middle">
						<s:Image fillMode="scale"
								 source="{ResourceManagerEx.FindResource('userIcon').cls}"/>
						<s:Label width="100%" styleName="LoginLabelStyle" text="登录系统账号"/>
						<s:Button id="closeLoginId" buttonMode="true"
								  click="closeLoginId_clickHandler(event)"
								  styleName="CloseLoginButtonStyle"/>
					</s:HGroup>
					<s:Line width="100%">
						<s:stroke>
							<s:SolidColorStroke color="#ABDBFC" weight="1"/>
						</s:stroke>
					</s:Line>
					<s:TextInput id="UserIdName" width="355" height="40" prompt="用户名"
								 styleName="UserIdStyle" enter="SubmitBtn_clickHandler()"/>
					<s:TextInput id="PwdValue" width="355" height="40" displayAsPassword="true"
								 prompt="密码" styleName="PasswordStyle" enter="SubmitBtn_clickHandler()"/>
					<s:HGroup width="355" horizontalAlign="right">
						<s:Button id="SubmitBtn" width="60" height="30" label="登录" buttonMode="true"
								  click="SubmitBtn_clickHandler()"
								  styleName="SubmitRegisterStyle"/>
					</s:HGroup>
					<s:Label id="LoginInfoLabel" width="355" styleName="SubmitRegisterInfo"/>
				</s:VGroup>
			</s:BorderContainer>
		</s:VGroup>
	</s:BorderContainer>
	
	<s:VGroup id="choosePanelId" width="100%" height="100%" horizontalAlign="center"
			  verticalAlign="middle">
		<s:BorderContainer width="100%" height="100%" backgroundAlpha="1" backgroundColor="#D9D9D9">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				<s:BorderContainer minWidth="100">
					<s:VGroup gap="10" horizontalAlign="center" paddingBottom="10" paddingLeft="10"
							  paddingRight="10" paddingTop="10" verticalAlign="middle">
						<s:HGroup width="100%" height="30" paddingLeft="10" paddingRight="10"
								  verticalAlign="middle">
							<s:Image fillMode="scale"
									 source="{ResourceManagerEx.FindResource('logoIcon').cls}"/>
							<s:Label width="100%" styleName="LoginLabelStyle" text="选择应用系统"/>
							<s:Button id="closeChooseId" buttonMode="true"
									  click="closeChooseId_clickHandler(event)"
									  styleName="CloseLoginButtonStyle"/>
						</s:HGroup>
						<s:Line width="100%">
							<s:stroke>
								<s:SolidColorStroke color="#ABDBFC" weight="1"/>
							</s:stroke>
						</s:Line>
						<ns:ScrollPanel id="ScrollButtonPanel" alpha="0.8"
										buttonStyleName="ScrollPanelItemStyle" columnCount="4"
										contentBackgroundAlpha="0.8" hGap="3" itemHeight="90"
										itemWidth="90" labelField="name" rowCount="6" type="button"/>
					</s:VGroup>
				</s:BorderContainer>
			</s:VGroup>
		</s:BorderContainer>
	</s:VGroup>
</baseclass:ViewBase>
